"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: tables_resources_views_components_reorder_indicator_blade_php', () => {
    test('pint: it can format tables_resources_views_components_reorder_indicator_blade_php', () => {
        const input = `@props([
    'colspan',
])

<div
    x-cloak
    {{
        $attributes
            ->merge([
                'wire:key' => "{$this->id}.table.reorder.indicator",
            ], escape: false)
            ->class(['filament-tables-reorder-indicator bg-primary-500/10 px-4 py-2 whitespace-nowrap text-sm'])
    }}
>
    <x-filament::loading-indicator
        wire:loading.delay=""
        wire:target="reorderTable"
        class="w-4 h-4 me-3 text-primary-500"
    />

    <span>
        {{ __('filament-tables::table.reorder_indicator') }}
    </span>
</div>
`;
        const output = `@props([
    'colspan',
])

<div
    x-cloak
    {{
        $attributes
            ->merge([
                'wire:key' => "{$this->id}.table.reorder.indicator",
            ], escape: false)
            ->class(['filament-tables-reorder-indicator bg-primary-500/10 whitespace-nowrap px-4 py-2 text-sm'])
    }}
>
    <x-filament::loading-indicator
        wire:loading.delay=""
        wire:target="reorderTable"
        class="text-primary-500 me-3 h-4 w-4"
    />

    <span>
        {{ __('filament-tables::table.reorder_indicator') }}
    </span>
</div>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=tables_resources_views_components_reorder_indicator_blade_php.test.js.map