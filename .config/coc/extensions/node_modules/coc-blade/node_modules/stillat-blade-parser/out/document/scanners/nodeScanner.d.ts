import { AbstractNode, BladeCommentNode, DirectiveNode, LiteralNode } from '../../nodes/nodes';
import { Position } from '../../nodes/position';
import { BladeDocument } from '../bladeDocument';
export declare class NodeScanner {
    private doc;
    constructor(doc: BladeDocument);
    firstDirectiveOfType(name: string): DirectiveNode | null;
    getNodeAt(position: Position | null): AbstractNode | null;
    getNodesBefore(position: Position | null): AbstractNode[];
    getNodeBefore(position: Position | null): AbstractNode | null;
    getNodeAfter(position: Position | null): AbstractNode | null;
    getNodesAfter(position: Position | null): AbstractNode[];
    filter(predicate: (value: AbstractNode, index: number, array: AbstractNode[]) => value is AbstractNode): AbstractNode[];
    getComments(): BladeCommentNode[];
    /**
     * Retrieves all literal and escaped content nodes in the document.
     */
    getAllLiteralNodes(): LiteralNode[];
}
//# sourceMappingURL=nodeScanner.d.ts.map