"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeQueries = void 0;
const nodes_1 = require("../../nodes/nodes");
class NodeQueries {
    static findNodeAfterPosition(position, nodes) {
        if (position == null) {
            return null;
        }
        for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (NodeQueries.isLiteralType(node)) {
                continue;
            }
            if (node.startPosition != null) {
                if (node.startPosition.index > position.index) {
                    return node;
                }
            }
        }
        return null;
    }
    static findNodeBeforePosition(position, nodes) {
        if (position == null) {
            return null;
        }
        let lastNode = null;
        for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (NodeQueries.isLiteralType(node)) {
                continue;
            }
            if (node.startPosition != null) {
                if (node.startPosition.index > position.index) {
                    break;
                }
                lastNode = node;
            }
        }
        return lastNode;
    }
    static findNodeAtPosition(position, nodes) {
        if (position == null) {
            return null;
        }
        for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (NodeQueries.isLiteralType(node)) {
                continue;
            }
            if (node.startPosition != null && node.endPosition != null) {
                if (position.index >= node.startPosition.index && position.index <= node.endPosition.index) {
                    return node;
                }
            }
        }
        return null;
    }
    static isLiteralType(node) {
        if (node instanceof nodes_1.LiteralNode) {
            return true;
        }
        return false;
    }
    static findNodesBeforePosition(position, nodes) {
        const beforeNodes = [];
        if (position == null) {
            return beforeNodes;
        }
        for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (NodeQueries.isLiteralType(node)) {
                continue;
            }
            if (node.startPosition != null && node.endPosition != null) {
                if (node.startPosition.index > position.index) {
                    break;
                }
                beforeNodes.push(node);
            }
        }
        return beforeNodes;
    }
    static findNodesAfterPosition(position, nodes) {
        const afterNodes = [];
        if (position == null) {
            return afterNodes;
        }
        for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (NodeQueries.isLiteralType(node)) {
                continue;
            }
            if (node.startPosition != null) {
                if (node.startPosition.index > position.index) {
                    afterNodes.push(node);
                }
            }
        }
        return afterNodes;
    }
}
exports.NodeQueries = NodeQueries;
//# sourceMappingURL=nodeQueries.js.map