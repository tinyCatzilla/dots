"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('Switch Statements', () => {
    test('it can parse switch statements', () => {
        var _a, _b, _c, _d, _e, _f;
        const nodes = bladeDocument_1.BladeDocument.fromText(`@switch($i)
@case(1)
    First case...
    @break

@case(2)
    Second case...
    @break

@default
    Default case...
@endswitch`).getRenderNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.SwitchStatementNode, nodes[0]);
        const switchStatement = nodes[0];
        (0, assertions_1.assertCount)(3, switchStatement.cases);
        (0, assertions_1.assertInstanceOf)(nodes_1.SwitchCaseNode, switchStatement.cases[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.SwitchCaseNode, switchStatement.cases[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.SwitchCaseNode, switchStatement.cases[2]);
        (0, assertions_1.assertNotNull)(switchStatement.tail);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, switchStatement.tail);
        const switchTail = switchStatement.tail;
        assert.strictEqual(switchTail.directiveName, 'endswitch');
        const case1 = switchStatement.cases[0], case2 = switchStatement.cases[1], case3 = switchStatement.cases[2];
        assert.strictEqual(case1.index, (_a = case1.head) === null || _a === void 0 ? void 0 : _a.index);
        assert.strictEqual(case2.index, (_b = case2.head) === null || _b === void 0 ? void 0 : _b.index);
        assert.strictEqual(case3.index, (_c = case3.head) === null || _c === void 0 ? void 0 : _c.index);
        assert.strictEqual(case1.refId, (_d = case1.head) === null || _d === void 0 ? void 0 : _d.refId);
        assert.strictEqual(case2.refId, (_e = case2.head) === null || _e === void 0 ? void 0 : _e.refId);
        assert.strictEqual(case3.refId, (_f = case3.head) === null || _f === void 0 ? void 0 : _f.refId);
        assert.strictEqual(case1.order, 0);
        assert.strictEqual(case2.order, 1);
        assert.strictEqual(case3.order, 2);
        assert.strictEqual(case1.isDefault, false);
        assert.strictEqual(case2.isDefault, false);
        assert.strictEqual(case3.isDefault, true);
        (0, assertions_1.assertCount)(3, case1.children);
        (0, assertions_1.assertCount)(3, case2.children);
        (0, assertions_1.assertCount)(1, case3.children);
        (0, assertions_1.assertCount)(1, case1.leadingNodes);
        (0, assertions_1.assertCount)(0, case2.leadingNodes);
        (0, assertions_1.assertCount)(0, case3.leadingNodes);
        (0, assertions_1.assertLiteralContent)("\n", case1.leadingNodes[0]);
        const c1c = case1.children, c2c = case2.children, c3c = case3.children;
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c1c[0]);
        (0, assertions_1.assertLiteralContent)("\n    First case...\n    ", c1c[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, c1c[1]);
        const c1cd = c1c[1];
        assert.strictEqual(c1cd.directiveName, 'break');
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c1c[2]);
        (0, assertions_1.assertLiteralContent)("\n\n", c1c[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c2c[0]);
        (0, assertions_1.assertLiteralContent)("\n    Second case...\n    ", c2c[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, c2c[1]);
        const c2cd = c2c[1];
        assert.strictEqual(c2cd.directiveName, 'break');
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c2c[2]);
        (0, assertions_1.assertLiteralContent)("\n\n", c2c[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c3c[0]);
        (0, assertions_1.assertLiteralContent)("\n    Default case...\n", c3c[0]);
    });
    test('switch pairing', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@switch($i)
@case(1)
    First case
    @break

@case(2)
    Second case
    @switch($i2)
        @case(21)
            First case two
            
            @switch($i3)
                @case(31)
                    First case three
                    @break

                @case(32)
                    Second case three
                    @break

                @default
                    Default case three
            @endswitch

            @break

        @case(22)
            Second case two.
            @break

        @default
            Default case two
    @endswitch
    End Second
    @break

@default
    Default case
@endswitch`).getAllNodes();
        (0, assertions_1.assertCount)(41, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[3]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[4]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[5]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[6]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[7]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[8]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[9]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[10]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[11]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[12]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[13]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[14]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[15]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[16]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[17]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[18]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[19]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[20]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[21]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[22]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[23]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[24]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[25]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[26]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[27]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[28]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[29]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[30]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[31]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[32]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[33]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[34]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[35]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[36]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[37]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[38]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[39]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[40]);
        (0, assertions_1.assertPaired)(nodes[0], nodes[40]);
        (0, assertions_1.assertPaired)(nodes[8], nodes[34]);
        (0, assertions_1.assertPaired)(nodes[12], nodes[24]);
    });
    test('it parses nested documents', () => {
        var _a, _b, _c, _d, _e, _f, _g;
        const nodes = bladeDocument_1.BladeDocument.fromText(`@switch($i)
@case(1)
    First case
    @break

@case(2)
    Second case
    @switch($i2)
        @case(21)
            First case two
            
            @switch($i3)
                @case(31)
                    First case three
                    @break

                @case(32)
                    Second case three
                    @break

                @default
                    Default case three
            @endswitch

            @break

        @case(22)
            Second case two.
            @break

        @default
            Default case two
    @endswitch
    End Second
    @break

@default
    Default case
@endswitch`).getRenderNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.SwitchStatementNode, nodes[0]);
        const firstSwitch = nodes[0];
        assert.strictEqual(firstSwitch.nodeContent, "@switch($i)\n@case(1)\n    First case\n    @break\n\n@case(2)\n    Second case\n    @switch($i2)\n        @case(21)\n            First case two\n            \n            @switch($i3)\n                @case(31)\n                    First case three\n                    @break\n\n                @case(32)\n                    Second case three\n                    @break\n\n                @default\n                    Default case three\n            @endswitch\n\n            @break\n\n        @case(22)\n            Second case two.\n            @break\n\n        @default\n            Default case two\n    @endswitch\n    End Second\n    @break\n\n@default\n    Default case\n@endswitch");
        (0, assertions_1.assertCount)(3, firstSwitch.cases);
        const s1Case1 = firstSwitch.cases[0], s1Case2 = firstSwitch.cases[1], s1Case3 = firstSwitch.cases[2];
        (0, assertions_1.assertCount)(3, s1Case1.children);
        (0, assertions_1.assertNotNull)(s1Case1.childDocument);
        assert.strictEqual((_a = s1Case1.childDocument) === null || _a === void 0 ? void 0 : _a.content, "\n    First case\n    @break\n\n");
        (0, assertions_1.assertNotNull)(s1Case3.childDocument);
        (0, assertions_1.assertCount)(1, s1Case3.children);
        assert.strictEqual((_b = s1Case3.childDocument) === null || _b === void 0 ? void 0 : _b.content, "\n    Default case\n");
        (0, assertions_1.assertLiteralContent)("\n    Default case\n", s1Case3.children[0]);
        const s1Case2Children = s1Case2.children;
        (0, assertions_1.assertCount)(31, s1Case2Children);
        (0, assertions_1.assertNotNull)(s1Case2.childDocument);
        assert.strictEqual((_c = s1Case2.childDocument) === null || _c === void 0 ? void 0 : _c.content, "\n    Second case\n    @switch($i2)\n        @case(21)\n            First case two\n            \n            @switch($i3)\n                @case(31)\n                    First case three\n                    @break\n\n                @case(32)\n                    Second case three\n                    @break\n\n                @default\n                    Default case three\n            @endswitch\n\n            @break\n\n        @case(22)\n            Second case two.\n            @break\n\n        @default\n            Default case two\n    @endswitch\n    End Second\n    @break\n\n");
        const s1Case2Nodes = s1Case2.childDocument.renderNodes;
        (0, assertions_1.assertCount)(5, s1Case2Nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s1Case2Nodes[0]);
        (0, assertions_1.assertLiteralContent)("\n    Second case\n    ", s1Case2Nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.SwitchStatementNode, s1Case2Nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s1Case2Nodes[2]);
        (0, assertions_1.assertLiteralContent)("\n    End Second\n    ", s1Case2Nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, s1Case2Nodes[3]);
        const s1Case2D1 = s1Case2Nodes[3];
        assert.strictEqual(s1Case2D1.directiveName, 'break');
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s1Case2Nodes[4]);
        (0, assertions_1.assertLiteralContent)("\n", s1Case2Nodes[4]);
        const switchTwo = s1Case2Nodes[1];
        (0, assertions_1.assertCount)(3, switchTwo.cases);
        assert.strictEqual(switchTwo.nodeContent, "@switch($i2)\n        @case(21)\n            First case two\n            \n            @switch($i3)\n                @case(31)\n                    First case three\n                    @break\n\n                @case(32)\n                    Second case three\n                    @break\n\n                @default\n                    Default case three\n            @endswitch\n\n            @break\n\n        @case(22)\n            Second case two.\n            @break\n\n        @default\n            Default case two\n    @endswitch");
        const s2case1 = switchTwo.cases[0], s2Case2 = switchTwo.cases[1], s2Case3 = switchTwo.cases[2];
        (0, assertions_1.assertCount)(17, s2case1.children);
        (0, assertions_1.assertCount)(3, s2Case2.children);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s2Case2.children[0]);
        (0, assertions_1.assertLiteralContent)("\n            Second case two.\n            ", s2Case2.children[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, s2Case2.children[1]);
        const s2Case2D1 = s2Case2.children[1];
        assert.strictEqual(s2Case2D1.directiveName, 'break');
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s2Case2.children[2]);
        (0, assertions_1.assertLiteralContent)("\n\n        ", s2Case2.children[2]);
        (0, assertions_1.assertCount)(1, s2Case3.children);
        (0, assertions_1.assertLiteralContent)("\n            Default case two\n    ", s2Case3.children[0]);
        (0, assertions_1.assertNotNull)(s2case1.childDocument);
        assert.strictEqual((_d = s2case1.childDocument) === null || _d === void 0 ? void 0 : _d.content, "\n            First case two\n            \n            @switch($i3)\n                @case(31)\n                    First case three\n                    @break\n\n                @case(32)\n                    Second case three\n                    @break\n\n                @default\n                    Default case three\n            @endswitch\n\n            @break\n\n        ");
        const s2Case1Children = s2case1.childDocument.renderNodes;
        (0, assertions_1.assertCount)(5, s2Case1Children);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s2Case1Children[0]);
        (0, assertions_1.assertLiteralContent)("\n            First case two\n            \n            ", s2Case1Children[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.SwitchStatementNode, s2Case1Children[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s2Case1Children[2]);
        (0, assertions_1.assertLiteralContent)("\n\n            ", s2Case1Children[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, s2Case1Children[3]);
        const s1Case1D1 = s2Case1Children[3];
        assert.strictEqual(s1Case1D1.directiveName, 'break');
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s2Case1Children[4]);
        (0, assertions_1.assertLiteralContent)("\n        ", s2Case1Children[4]);
        const switchThree = s2Case1Children[1];
        (0, assertions_1.assertCount)(3, switchThree.cases);
        assert.strictEqual(switchThree.nodeContent, "@switch($i3)\n                @case(31)\n                    First case three\n                    @break\n\n                @case(32)\n                    Second case three\n                    @break\n\n                @default\n                    Default case three\n            @endswitch");
        const s3c1 = switchThree.cases[0], s3c2 = switchThree.cases[1], s3c3 = switchThree.cases[2];
        (0, assertions_1.assertCount)(3, s3c1.children);
        (0, assertions_1.assertNotNull)(s3c1.childDocument);
        assert.strictEqual((_e = s3c1.childDocument) === null || _e === void 0 ? void 0 : _e.content, "\n                    First case three\n                    @break\n\n                ");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s3c1.children[0]);
        (0, assertions_1.assertLiteralContent)("\n                    First case three\n                    ", s3c1.children[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, s3c1.children[1]);
        const c3c1d1 = s3c1.children[1];
        assert.strictEqual(c3c1d1.directiveName, 'break');
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s3c1.children[2]);
        (0, assertions_1.assertLiteralContent)("\n\n                ", s3c1.children[2]);
        (0, assertions_1.assertCount)(3, s3c2.children);
        (0, assertions_1.assertNotNull)(s3c2.childDocument);
        assert.strictEqual((_f = s3c2.childDocument) === null || _f === void 0 ? void 0 : _f.content, "\n                    Second case three\n                    @break\n\n                ");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s3c2.children[0]);
        (0, assertions_1.assertLiteralContent)("\n                    Second case three\n                    ", s3c2.children[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, s3c2.children[1]);
        const s3c2d1 = s3c2.children[1];
        assert.strictEqual(s3c2d1.directiveName, 'break');
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s3c2.children[2]);
        (0, assertions_1.assertLiteralContent)("\n\n                ", s3c2.children[2]);
        (0, assertions_1.assertCount)(1, s3c3.children);
        (0, assertions_1.assertNotNull)(s3c3.childDocument);
        assert.strictEqual((_g = s3c3.childDocument) === null || _g === void 0 ? void 0 : _g.content, "\n                    Default case three\n            ");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, s3c3.children[0]);
        (0, assertions_1.assertLiteralContent)("\n                    Default case three\n            ", s3c3.children[0]);
    });
});
//# sourceMappingURL=switch.test.js.map