"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const transform_1 = require("./testUtils/transform");
suite('Component Tag Transform', () => {
    test('it can transform component tags', () => {
        assert_1.default.strictEqual((0, transform_1.transformString)(`<x:slot:name

param="value">
<p>Content</p>
</x:slot:name>`).trim(), `<x-slot:name param="value" >
<p>Content</p>
</x-slot>`);
    });
    test('it transforms inline echos', () => {
        assert_1.default.strictEqual((0, transform_1.transformString)(`<option 
{{ $isSelected($value) ? 'selected="selected"' : '' }} value="{{ $value }}">
{{ $label }}
</option>`).trim(), `<option
{{ $isSelected($value) ? 'selected="selected"' : '' }} value="{{ $value }}">
{{ $label }}
</option>`);
    });
    test('it transforms merged attributes', () => {
        assert_1.default.strictEqual((0, transform_1.transformString)(`<div {{ $attributes->class(['p-4', 'bg-red' => $hasError]) }}>
{{ $message }}
</div>`).trim(), `<div {{ $attributes->class(['p-4', 'bg-red' => $hasError]) }}>
{{ $message }}
</div>`);
    });
});
//# sourceMappingURL=transformer_component_tags.test.js.map