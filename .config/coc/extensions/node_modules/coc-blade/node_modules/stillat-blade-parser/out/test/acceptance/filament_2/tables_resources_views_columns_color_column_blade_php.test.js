"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: tables_resources_views_columns_color_column_blade_php', () => {
    test('pint: it can format tables_resources_views_columns_color_column_blade_php', () => {
        const input = `@php
    $state = $getState();
    $isCopyable = $isCopyable();
@endphp

<div
    @if ($state)
        style="background-color: {{ $state }}"
        @if ($isCopyable)
            x-on:click="
                window.navigator.clipboard.writeText(@js($state))
                $tooltip(@js($getCopyMessage()), { timeout: @js($getCopyMessageDuration()) })
            "
        @endif
    @endif
    {{
        $attributes
            ->merge($getExtraAttributes())
            ->class([
                'filament-tables-color-column relative ml-4 flex h-6 w-6 rounded-md',
                'cursor-pointer' => $isCopyable,
            ])
    }}
>
</div>
`;
        const output = `@php
    $state = $getState();
    $isCopyable = $isCopyable();
@endphp

<div
    @if ($state)
        style="background-color: {{ $state }}"
        @if ($isCopyable)
            x-on:click="
                window.navigator.clipboard.writeText(@js($state))
                $tooltip(@js($getCopyMessage()), { timeout: @js($getCopyMessageDuration()) })
            "
        @endif
    @endif
    {{
        $attributes
            ->merge($getExtraAttributes())
            ->class([
                'filament-tables-color-column relative ml-4 flex h-6 w-6 rounded-md',
                'cursor-pointer' => $isCopyable,
            ])
    }}
></div>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=tables_resources_views_columns_color_column_blade_php.test.js.map