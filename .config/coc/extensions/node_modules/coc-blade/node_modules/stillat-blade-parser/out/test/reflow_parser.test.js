"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
const generalSyntaxReflow_1 = require("../formatting/generalSyntaxReflow");
suite('PHP Operator Reflow Parser', () => {
    test('it breaks strings apart', () => {
        const template = ` !$foo /** !!! */ ** true //! `, parser = new generalSyntaxReflow_1.GeneralSyntaxReflow();
        parser.parse(template);
        const tokens = parser.getTokens();
        (0, assertions_1.assertCount)(3, tokens);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, tokens[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.OperatorNode, tokens[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, tokens[2]);
        const operator = tokens[1], startLiteral = tokens[0], endLiteral = tokens[2];
        assert_1.default.strictEqual(operator.sourceContent, '!');
        assert_1.default.strictEqual(endLiteral.content, '$foo /** !!! */ ** true //! ');
        assert_1.default.strictEqual(startLiteral.content, ' ');
    });
    test('it reflows operators', () => {
        const parser = new generalSyntaxReflow_1.GeneralSyntaxReflow();
        assert_1.default.strictEqual(parser.reflow(' !$foo /** !!! */ && true //! '), ' ! $foo /** !!! */ && true //! ');
        assert_1.default.strictEqual(parser.reflow(' !$foo'), ' ! $foo');
        assert_1.default.strictEqual(parser.reflow(' !$foo && (! $that)'), ' ! $foo && (! $that)');
    });
});
//# sourceMappingURL=reflow_parser.test.js.map