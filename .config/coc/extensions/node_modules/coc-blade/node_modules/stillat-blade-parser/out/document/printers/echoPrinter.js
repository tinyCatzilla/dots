"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EchoPrinter = void 0;
const generalSyntaxReflow_1 = require("../../formatting/generalSyntaxReflow");
const utils_1 = require("../../formatting/prettier/utils");
const syntaxReflow_1 = require("../../formatting/syntaxReflow");
const nodes_1 = require("../../nodes/nodes");
const stringUtilities_1 = require("../../utilities/stringUtilities");
const indentLevel_1 = require("./indentLevel");
const printWidthUtils_1 = require("./printWidthUtils");
class EchoPrinter {
    static printEcho(echo, formattingOptions, phpFormatter, indentLevel, pintTransformer) {
        var _a, _b;
        let start = '{{ ', end = ' }}';
        if (echo instanceof nodes_1.BladeEscapedEchoNode) {
            start = '{!! ';
            end = ' !!}';
        }
        else if (echo instanceof nodes_1.BladeEntitiesEchoNode) {
            start = '{{{ ';
            end = ' }}}';
        }
        let result = start;
        let innerContent = echo.content.trim();
        if (formattingOptions.formatInsideEcho) {
            if (phpFormatter != null && echo.hasValidPhp()) {
                let echoOptions = (0, utils_1.getEchoPhpOptions)(), tResult = innerContent;
                if (((_a = echo.startPosition) === null || _a === void 0 ? void 0 : _a.line) != ((_b = echo.endPosition) === null || _b === void 0 ? void 0 : _b.line)) {
                    echoOptions = {
                        ...echoOptions,
                        printWidth: (0, printWidthUtils_1.getPrintWidth)(innerContent, echoOptions.printWidth)
                    };
                    if (formattingOptions.useLaravelPint) {
                        if (pintTransformer != null) {
                            tResult = pintTransformer.getEchoContent(echo);
                        }
                    }
                    else {
                        const lineWrapWorkaround = (0, printWidthUtils_1.preparePrettierWorkaround)(innerContent);
                        if (lineWrapWorkaround.addedHack) {
                            innerContent = lineWrapWorkaround.content;
                        }
                        tResult = phpFormatter('<?php ' + innerContent, formattingOptions, echoOptions);
                        if (lineWrapWorkaround.addedHack) {
                            tResult = (0, printWidthUtils_1.undoPrettierWorkaround)(tResult);
                        }
                        if (generalSyntaxReflow_1.GeneralSyntaxReflow.couldReflow(tResult)) {
                            tResult = generalSyntaxReflow_1.GeneralSyntaxReflow.instance.reflow(tResult);
                        }
                        if (syntaxReflow_1.SyntaxReflow.couldReflow(tResult)) {
                            tResult = syntaxReflow_1.SyntaxReflow.instance.reflow(tResult);
                        }
                    }
                    if (formattingOptions.echoStyle == 'inline') {
                        const inlineIndentResult = indentLevel_1.IndentLevel.shiftIndentWithLastLineInline(tResult, formattingOptions.tabSize, indentLevel + formattingOptions.tabSize, true).trim();
                        const inlineRelativeIndent = start.trimRight() + ' ' + inlineIndentResult + ' ' + end.trim();
                        return inlineRelativeIndent;
                    }
                    const relativeIndent = start.trim() + "\n" + indentLevel_1.IndentLevel.shiftIndent(tResult, indentLevel + formattingOptions.tabSize, false, formattingOptions, true) + "\n" + ' '.repeat(indentLevel) + end.trim();
                    return relativeIndent;
                }
                else {
                    if (formattingOptions.useLaravelPint) {
                        if (pintTransformer != null) {
                            tResult = pintTransformer.getEchoContent(echo);
                        }
                    }
                    else {
                        tResult = phpFormatter('<?php ' + innerContent + ';', formattingOptions, { ...echoOptions, printWidth: Infinity });
                        tResult = tResult.trimRight().substring(0, tResult.trimRight().length - 1);
                        if (generalSyntaxReflow_1.GeneralSyntaxReflow.couldReflow(tResult)) {
                            tResult = generalSyntaxReflow_1.GeneralSyntaxReflow.instance.reflow(tResult);
                        }
                        if (syntaxReflow_1.SyntaxReflow.couldReflow(tResult)) {
                            tResult = syntaxReflow_1.SyntaxReflow.instance.reflow(tResult);
                        }
                    }
                    // Handle the case if prettier added newlines anyway.
                    if (tResult.includes("\n")) {
                        tResult = stringUtilities_1.StringUtilities.collapse(tResult);
                    }
                }
                innerContent = tResult;
            }
        }
        result += innerContent + end;
        return result;
    }
}
exports.EchoPrinter = EchoPrinter;
//# sourceMappingURL=echoPrinter.js.map