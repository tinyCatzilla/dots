"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('Blade Nodes Test', () => {
    test('it parses simple nodes', () => {
        const template = `start {{ $variable }} end`, document = bladeDocument_1.BladeDocument.fromText(template), nodes = document.getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        const literalOne = nodes[0], echoOne = nodes[1], literalTwo = nodes[2];
        assert.strictEqual(literalOne.content, 'start ');
        assert.strictEqual(echoOne.content, ' $variable ');
        assert.strictEqual(echoOne.sourceContent, '{{ $variable }}');
        assert.strictEqual(literalTwo.content, ' end');
    });
    test('it ignores escaped nodes', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`
@@unless
@{{ $variable }}
@{!! $variable }}
`).getRenderNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertLiteralContent)("\n@@unless\n@{{ $variable }}\n@{!! $variable }}\n", nodes[0]);
    });
    test('it ignores escaped nodes mixed with other nodes', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`
@@unless
@{{ $variable }}
@{!! $variable }}

{{ test }}


@{!! $variable }}

    {{ another }}
`).getAllNodes();
        (0, assertions_1.assertCount)(5, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[3]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[4]);
        (0, assertions_1.assertLiteralContent)("\n@@unless\n@{{ $variable }}\n@{!! $variable }}\n\n", nodes[0]);
        (0, assertions_1.assertLiteralContent)("\n\n\n@{!! $variable }}\n\n    ", nodes[2]);
        (0, assertions_1.assertLiteralContent)("\n", nodes[4]);
    });
    test('it parses many nodes', () => {
        const template = `start
    {{-- comment!!! --}}3
    s1@props-two(['color' => (true ?? 'gray')])
    s2@directive
    @directive something
    s3@props-three  (['color' => (true ?? 'gray')])
    @props(['color' => 'gray'])
 {!! $dooblyDoo !!}1
<ul {{ $attributes->merge(['class' => 'bg-'.$color.'-200']) }}>
    {{ $slot }}
</ul>`, document = bladeDocument_1.BladeDocument.fromText(template), nodes = document.getAllNodes();
        (0, assertions_1.assertCount)(19, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertLiteralContent)("start\n    ", nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeCommentNode, nodes[1]);
        const comment = nodes[1];
        assert.strictEqual(comment.innerContent, ' comment!!! ');
        assert.strictEqual(comment.sourceContent, "{{-- comment!!! --}}");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)("3\n    s1", nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[3]);
        const directiveOne = nodes[3];
        assert.strictEqual(directiveOne.directiveName, 'props-two');
        assert.strictEqual(directiveOne.directiveParameters, "(['color' => (true ?? 'gray')])");
        assert.strictEqual(directiveOne.sourceContent, "@props-two(['color' => (true ?? 'gray')])");
        assert.strictEqual(directiveOne.hasDirectiveParameters, true);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[4]);
        (0, assertions_1.assertLiteralContent)("\n    s2", nodes[4]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[5]);
        const directiveTwo = nodes[5];
        assert.strictEqual(directiveTwo.directiveName, 'directive');
        assert.strictEqual(directiveTwo.directiveParameters, '');
        assert.strictEqual(directiveTwo.sourceContent, "@directive");
        assert.strictEqual(directiveTwo.hasDirectiveParameters, false);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[6]);
        (0, assertions_1.assertLiteralContent)("\n    ", nodes[6]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[7]);
        const directiveThree = nodes[7];
        assert.strictEqual(directiveThree.directiveName, 'directive');
        assert.strictEqual(directiveThree.directiveParameters, '');
        assert.strictEqual(directiveThree.sourceContent, "@directive");
        assert.strictEqual(directiveThree.hasDirectiveParameters, false);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[8]);
        (0, assertions_1.assertLiteralContent)("something\n    s3", nodes[8]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[9]);
        const directiveFour = nodes[9];
        assert.strictEqual(directiveFour.directiveName, 'props-three');
        assert.strictEqual(directiveFour.directiveParameters, "(['color' => (true ?? 'gray')])");
        assert.strictEqual(directiveFour.sourceContent, "@props-three  (['color' => (true ?? 'gray')])");
        assert.strictEqual(directiveFour.hasDirectiveParameters, true);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[10]);
        (0, assertions_1.assertLiteralContent)("\n    ", nodes[10]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[11]);
        const directiveFive = nodes[11];
        assert.strictEqual(directiveFive.directiveName, 'props');
        assert.strictEqual(directiveFive.directiveParameters, "(['color' => 'gray'])");
        assert.strictEqual(directiveFive.sourceContent, "@props(['color' => 'gray'])");
        assert.strictEqual(directiveFive.hasDirectiveParameters, true);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[12]);
        (0, assertions_1.assertLiteralContent)("\n ", nodes[12]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEscapedEchoNode, nodes[13]);
        const echoNode = nodes[13];
        assert.strictEqual(echoNode.content, ' $dooblyDoo ');
        assert.strictEqual(echoNode.sourceContent, '{!! $dooblyDoo !!}');
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[14]);
        (0, assertions_1.assertLiteralContent)("1\n<ul ", nodes[14]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[15]);
        const echoNodeTwo = nodes[15];
        assert.strictEqual(echoNodeTwo.content, " $attributes->merge(['class' => 'bg-'.$color.'-200']) ");
        assert.strictEqual(echoNodeTwo.sourceContent, "{{ $attributes->merge(['class' => 'bg-'.$color.'-200']) }}");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[16]);
        (0, assertions_1.assertLiteralContent)(">\n    ", nodes[16]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[17]);
        const echoNodeThree = nodes[17];
        assert.strictEqual(echoNodeThree.content, ' $slot ');
        assert.strictEqual(echoNodeThree.sourceContent, '{{ $slot }}');
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[18]);
        (0, assertions_1.assertLiteralContent)("\n</ul>", nodes[18]);
    });
    test('template one', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`The current UNIX timestamp is {{ time() }}.`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)("The current UNIX timestamp is ", nodes[0]);
        (0, assertions_1.assertEchoContent)(nodes[1], ' time() ', '{{ time() }}');
        (0, assertions_1.assertLiteralContent)('.', nodes[2]);
    });
    test('template two', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`Hello, {!! $name !!}.`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEscapedEchoNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)("Hello, ", nodes[0]);
        (0, assertions_1.assertEchoContent)(nodes[1], ' $name ', '{!! $name !!}');
        (0, assertions_1.assertLiteralContent)('.', nodes[2]);
    });
    test('template three', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`<h1>Laravel</h1>
 
Hello, @{{ name }}.`).getAllNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertLiteralContent)("<h1>Laravel</h1>\n \nHello, @{{ name }}.", nodes[0]);
    });
    test('template four', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText('@@if').getAllNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertLiteralContent)('@@if', nodes[0]);
    });
    test('template five', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`<script>
var app = {{ Illuminate\\Support\\Js::from($array) }};
</script>`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertLiteralContent)("<script>\nvar app = ", nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[1]);
        (0, assertions_1.assertEchoContent)(nodes[1], " Illuminate\\Support\\Js::from($array) ", "{{ Illuminate\\Support\\Js::from($array) }}");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)(";\n</script>", nodes[2]);
    });
    test('template six', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`<script>
var app = {{ Js::from($array) }};
</script>`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertLiteralContent)("<script>\nvar app = ", nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[1]);
        (0, assertions_1.assertEchoContent)(nodes[1], " Js::from($array) ", "{{ Js::from($array) }}");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)(";\n</script>", nodes[2]);
    });
    test('template seven', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@verbatim
<div class="container">
    Hello, {{ name }}.
</div>
@endverbatim`).getAllNodes();
        (0, assertions_1.assertCount)(2, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[1]);
        const directiveOne = nodes[0], directiveTwo = nodes[1];
        assert.strictEqual(directiveOne.sourceContent, '@verbatim');
        assert.strictEqual(directiveOne.directiveName, 'verbatim');
        assert.strictEqual(directiveOne.innerContent, "\n<div class=\"container\">\n    Hello, {{ name }}.\n</div>\n");
        assert.strictEqual(directiveTwo.sourceContent, '@endverbatim');
        assert.strictEqual(directiveTwo.directiveName, 'endverbatim');
    });
    test('template eight', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@if (count($records) === 1)
I have one record!
@elseif (count($records) > 1)
I have multiple records!
@else
I don't have any records!
@endif`).getAllNodes();
        (0, assertions_1.assertCount)(7, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[3]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[4]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[5]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[6]);
        (0, assertions_1.assertLiteralContent)("\nI have one record!\n", nodes[1]);
        (0, assertions_1.assertLiteralContent)("\nI have multiple records!\n", nodes[3]);
        (0, assertions_1.assertLiteralContent)("\nI don't have any records!\n", nodes[5]);
        const directiveOne = nodes[0], directiveTwo = nodes[2], directiveThree = nodes[4], directiveFour = nodes[6];
        assert.strictEqual(directiveOne.directiveName, 'if');
        assert.strictEqual(directiveOne.directiveParameters, "(count($records) === 1)");
        assert.strictEqual(directiveOne.sourceContent, "@if (count($records) === 1)");
        assert.strictEqual(directiveOne.hasDirectiveParameters, true);
        assert.strictEqual(directiveTwo.directiveName, 'elseif');
        assert.strictEqual(directiveTwo.directiveParameters, "(count($records) > 1)");
        assert.strictEqual(directiveTwo.sourceContent, "@elseif (count($records) > 1)");
        assert.strictEqual(directiveTwo.hasDirectiveParameters, true);
        assert.strictEqual(directiveThree.directiveName, 'else');
        assert.strictEqual(directiveThree.directiveParameters, '');
        assert.strictEqual(directiveThree.sourceContent, "@else");
        assert.strictEqual(directiveThree.hasDirectiveParameters, false);
        assert.strictEqual(directiveFour.directiveName, 'endif');
        assert.strictEqual(directiveFour.directiveParameters, '');
        assert.strictEqual(directiveFour.sourceContent, "@endif");
        assert.strictEqual(directiveFour.hasDirectiveParameters, false);
    });
    test('template nine', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@unless (Auth::check())
You are not signed in.
@endunless`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)("\nYou are not signed in.\n", nodes[1]);
        const directiveOne = nodes[0], directiveTwo = nodes[2];
        assert.strictEqual(directiveOne.directiveName, 'unless');
        assert.strictEqual(directiveOne.directiveParameters, "(Auth::check())");
        assert.strictEqual(directiveOne.sourceContent, "@unless (Auth::check())");
        assert.strictEqual(directiveOne.hasDirectiveParameters, true);
        assert.strictEqual(directiveTwo.directiveName, 'endunless');
        assert.strictEqual(directiveTwo.directiveParameters, '');
        assert.strictEqual(directiveTwo.sourceContent, "@endunless");
        assert.strictEqual(directiveTwo.hasDirectiveParameters, false);
    });
    test('template ten', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@isset($records)
// $records is defined and is not null...
@endisset`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)("\n// $records is defined and is not null...\n", nodes[1]);
        const directiveOne = nodes[0], directiveTwo = nodes[2];
        assert.strictEqual(directiveOne.directiveName, 'isset');
        assert.strictEqual(directiveOne.directiveParameters, "($records)");
        assert.strictEqual(directiveOne.sourceContent, "@isset($records)");
        assert.strictEqual(directiveOne.hasDirectiveParameters, true);
        assert.strictEqual(directiveTwo.directiveName, 'endisset');
        assert.strictEqual(directiveTwo.directiveParameters, '');
        assert.strictEqual(directiveTwo.sourceContent, "@endisset");
        assert.strictEqual(directiveTwo.hasDirectiveParameters, false);
    });
    test('template 11', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText('{{ $name }}').getAllNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[0]);
        const echo = nodes[0];
        assert.strictEqual(echo.content, ' $name ');
        assert.strictEqual(echo.sourceContent, '{{ $name }}');
    });
    test('template 12', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText('{{{ $name }}}').getAllNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEntitiesEchoNode, nodes[0]);
        const echo = nodes[0];
        assert.strictEqual(echo.content, ' $name ');
        assert.strictEqual(echo.sourceContent, '{{{ $name }}}');
    });
    test('template 11', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`{{
         $name
 }}`).getAllNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[0]);
        const echo = nodes[0];
        assert.strictEqual(echo.content, "\n         $name\n ");
        assert.strictEqual(echo.sourceContent, "{{\n         $name\n }}");
    });
    test('simple directives', () => {
        const simpleDirectives = [
            '@append',
            '@break',
            '@endfor',
            '@elsecanany',
            '@canany',
            '@endcannot',
            '@can',
            '@endcan',
        ];
        const contentDirectives = [
            { content: '@break(TRUE)', name: 'break', params: '(TRUE)' },
            { content: '@break(2)', name: 'break', params: '(2)' },
            { content: '@break(-2)', name: 'break', params: '(-2)' },
            { content: '@break( 2 )', name: 'break', params: '( 2 )' },
            { content: '@canany ([\'create\', \'update\'], [$post])', name: 'canany', params: '([\'create\', \'update\'], [$post])' },
            { content: '@for ($i = 0; $i < 10; $i++)', name: 'for', params: '($i = 0; $i < 10; $i++)' },
            { content: '@cannot (\'update\', [$post])', name: 'cannot', params: '(\'update\', [$post])' },
            { content: '@elsecannot(\'delete\', [$post])', name: 'elsecannot', params: '(\'delete\', [$post])' },
            { content: '@can (\'update\', [$post])', name: 'can', params: '(\'update\', [$post])' },
            { content: '@selected(name(foo(bar)))', name: 'selected', params: '(name(foo(bar)))' },
            { content: '@disabled(name(foo(bar)))', name: 'disabled', params: '(name(foo(bar)))' },
            { content: "@class(['font-bold', 'mt-4', 'ml-2' => true, 'mr-2' => false])", name: 'class', params: "(['font-bold', 'mt-4', 'ml-2' => true, 'mr-2' => false])" },
            { content: '@componentFirst(["one", "two"])', name: 'componentFirst', params: '(["one", "two"])' },
            { content: '@componentFirst(["one", "two"], ["foo" => "bar"])', name: 'componentFirst', params: '(["one", "two"], ["foo" => "bar"])' },
            { content: '@componentFirst  (["one", "two"], ["foo" => "bar"])', name: 'componentFirst', params: '(["one", "two"], ["foo" => "bar"])' },
            { content: '@slot(\'foo\', null, ["foo" => "bar"])', name: 'slot', params: '(\'foo\', null, ["foo" => "bar"])' },
        ];
        simpleDirectives.forEach((directive) => {
            const nodes = bladeDocument_1.BladeDocument.fromText(directive).getAllNodes();
            (0, assertions_1.assertCount)(1, nodes);
            (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
            const directiveNode = nodes[0];
            assert.strictEqual(directiveNode.directiveName, directive.substring(1), 'simple directive name: ' + directive);
            assert.strictEqual(directiveNode.hasDirectiveParameters, false, 'simple directive has params: ' + directive);
            assert.strictEqual(directiveNode.sourceContent, directive, 'simple directive source content: ' + directive);
        });
        contentDirectives.forEach((directive) => {
            const nodes = bladeDocument_1.BladeDocument.fromText(directive.content).getAllNodes();
            (0, assertions_1.assertCount)(1, nodes);
            (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
            const directiveNode = nodes[0];
            assert.strictEqual(directiveNode.directiveName, directive.name, 'simple directive name: ' + directive.name);
            assert.strictEqual(directiveNode.hasDirectiveParameters, true, 'simple directive has params: ' + directive.name);
            assert.strictEqual(directiveNode.directiveParameters, directive.params, 'simple directive params: ' + directive.name);
            assert.strictEqual(directiveNode.sourceContent, directive.content, 'simple directive source content: ' + directive.name);
        });
    });
    test('Blade inside PHP directive', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@php echo 'I am PHP {{ not Blade }}' @endphp`).getAllNodes();
        (0, assertions_1.assertCount)(2, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[1]);
        const directive = nodes[0];
        assert.strictEqual(directive.innerContent, " echo 'I am PHP {{ not Blade }}' ");
    });
    test('it parses inline directives', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`<div @if(true) yes @endif></div>`).getRenderNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertLiteralContent)("<div ", nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.ConditionNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)("></div>", nodes[2]);
    });
});
//# sourceMappingURL=nodes.test.js.map