import { BladeEchoNode, DirectiveNode, InlinePhpNode, ParameterNode } from '../nodes/nodes';
import { BladeDocument } from './bladeDocument';
/**
 * The PintTransformer class will take an input document
 * and extract PHP from directive arguments, inline PHP
 * and from @php(...), @php/@endphp blocks and create
 * a temporary file with special markers that is
 * then supplied to Laravel Pint for formatting.
 *
 * Each type of language construct (like @foreach, @forelse)
 * is handled in a special way to make sure Laravel Pint
 * receives valid PHP input to format. Once Laravel Pint
 * has finished its formatting and fixing, the output
 * is re-processed and the formatting PHP code is
 * then extracted based on the file's markers.
 */
export declare class PintTransformer {
    private tmpDir;
    private cacheDir;
    private resultMapping;
    private contentMapping;
    private pintCommand;
    private templateFile;
    private cache;
    private wasCached;
    private outputPintResults;
    private markerSuffix;
    private pintConfigPath;
    private static processConfigPath;
    private phpDocs;
    private phpTagDocs;
    private cleanupFiles;
    private cleanupDirs;
    private didFail;
    private defaultConfig;
    constructor(tmpFilePath: string, cacheDir: string, pintCommand: string, pintConfigurationPath: string);
    getDidFail(): boolean;
    setTemplateFilePath(path: string): void;
    getTemplateFile(): string;
    /**
     * Prepares the content for the internal result mapping and cache.
     *
     * All whitespace except for newlines will be removed from the
     * input string. Before Laravel Pint is invoked, we have to
     * check the incoming document content with what is we
     * have in the cache. Newlines are excluded as they
     * can change the output/results of Pint a lot.
     *
     * @param input
     * @returns
     */
    private prepareContent;
    getResultMapping(): Map<string, string>;
    getPhpBlockContent(php: InlinePhpNode): string;
    getEchoContent(echo: BladeEchoNode): string;
    getComponentParameterContent(parameter: ParameterNode): string;
    getDirectiveContent(directive: DirectiveNode): string;
    getDirectivePhpContent(directive: DirectiveNode): string;
    transform(document: BladeDocument): string | null;
    format(document: BladeDocument): Map<string, string>;
    private cleanPintOutput;
    private callLaravelPint;
}
//# sourceMappingURL=pintTransformer.d.ts.map