"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('Exclusive Directives Parsing', () => {
    test('a list can be provided to specify what is a valid directive', () => {
        const doc = new bladeDocument_1.BladeDocument(), options = {
            customIfs: [],
            ignoreDirectives: [],
            directives: [
                'myDirective'
            ]
        };
        doc.getParser().withParserOptions(options);
        doc.loadString(`


@myDirective()

@if($true)
<span>Hello</span>
@elseif($anotherValue)
<div>
    <p>Hello world</p>
    <div>
    @pair
        Test

@endpair
    </div>
    </div>
@else

<p>Test {{ $title}}     test
        </p>

@endif

`);
        const nodes = doc.getAllNodes();
        (0, assertions_1.assertCount)(5, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertLiteralContent)("\n\n\n", nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[1]);
        const directive = nodes[1];
        assert_1.default.strictEqual(directive.directiveName, 'myDirective');
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)("\n\n@if($true)\n<span>Hello</span>\n@elseif($anotherValue)\n<div>\n    <p>Hello world</p>\n    <div>\n    @pair\n        Test\n\n@endpair\n    </div>\n    </div>\n@else\n\n<p>Test ", nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[3]);
        const echo = nodes[3];
        assert_1.default.strictEqual(echo.sourceContent, "{{ $title}}");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[4]);
        (0, assertions_1.assertLiteralContent)("     test\n        </p>\n\n@endif\n\n", nodes[4]);
    });
});
//# sourceMappingURL=exclusive_directives.test.js.map