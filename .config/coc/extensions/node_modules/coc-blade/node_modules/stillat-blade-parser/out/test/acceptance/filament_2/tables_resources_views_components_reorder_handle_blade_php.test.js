"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: tables_resources_views_components_reorder_handle_blade_php', () => {
    test('pint: it can format tables_resources_views_components_reorder_handle_blade_php', () => {
        const input = `<button
    type="button"
    {{ $attributes->class([
        'filament-tables-reorder-handle text-gray-500 cursor-move transition group-hover:text-primary-500',
        'dark:text-gray-400 dark:group-hover:text-primary-400' => config('tables.dark_mode'),
    ]) }}
>
    <x-heroicon-s-menu class="block h-4 w-4" />
</button>
`;
        const output = `<button
    type="button"
    {{
        $attributes->class([
            'filament-tables-reorder-handle group-hover:text-primary-500 cursor-move text-gray-500 transition',
            'dark:group-hover:text-primary-400 dark:text-gray-400' => config('tables.dark_mode'),
        ])
    }}
>
    <x-heroicon-s-menu class="block h-4 w-4" />
</button>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=tables_resources_views_components_reorder_handle_blade_php.test.js.map