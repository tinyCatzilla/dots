"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const componentClassNameResolver_1 = require("../compiler/componentClassNameResolver");
const phpCompiler_1 = require("../compiler/phpCompiler");
const bladeDocument_1 = require("../document/bladeDocument");
suite('Blade Component Tag Compiler', () => {
    test('slots can be compiled', () => {
        assert_1.default.strictEqual(compiler().compile(bladeDocument_1.BladeDocument.fromText(`<x-slot name="foo">
</x-slot>`)), `@slot('foo', null, [])
@endslot`);
    });
    test('inline slots can be compiled', () => {
        assert_1.default.strictEqual(compiler().compile(bladeDocument_1.BladeDocument.fromText(`<x-slot:foo>
</x-slot>`)), `@slot('foo', null, [])
@endslot`);
    });
    test('test dynamic slots can be compiled', () => {
        assert_1.default.strictEqual(compiler().compile(bladeDocument_1.BladeDocument.fromText(`<x-slot :name="$foo">
</x-slot>`)), `@slot($foo, null, [])
@endslot`);
    });
    test('slots with attributes can be compiled', () => {
        assert_1.default.strictEqual(compiler().compile(bladeDocument_1.BladeDocument.fromText(`<x-slot name="foo" class="font-bold">
</x-slot>`)), `@slot('foo', null, ['class' => 'font-bold'])
@endslot`);
    });
    test('inline slots with attributes can be compiled', () => {
        assert_1.default.strictEqual(compiler().compile(bladeDocument_1.BladeDocument.fromText(`<x-slot:foo class="font-bold">
</x-slot>`)), `@slot('foo', null, ['class' => 'font-bold'])
@endslot`);
    });
    test('slots with dynamic attributes can be compiled', () => {
        assert_1.default.strictEqual(compiler().compile(bladeDocument_1.BladeDocument.fromText(`<x-slot name="foo" :class="$classes">
</x-slot>`)), `@slot('foo', null, ['class' => \\Illuminate\\View\\Compilers\\BladeCompiler::sanitizeComponentAttribute($classes)])
@endslot`);
    });
    test('basic component parsing', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['alert', 'TestAlertComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<div><x-alert type="foo" limit="5" @click="foo" wire:click="changePlan('{{ $plan }}')" required /><x-alert /></div>`)), `<div>##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'alert', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['type' => 'foo', 'limit' => '5', '@click' => 'foo', 'wire:click' => 'changePlan('.e($plan).')', 'required' => true]); ?>
@endComponentClass##END-COMPONENT-CLASS####BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'alert', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
@endComponentClass##END-COMPONENT-CLASS##</div>`);
    });
    test('basic component with empty attributes parsing', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['alert', 'TestAlertComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<div><x-alert type="" limit='' @click="" required /></div>`)), `<div>##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'alert', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['type' => '', 'limit' => '', '@click' => '', 'required' => true]); ?>
@endComponentClass##END-COMPONENT-CLASS##</div>`);
    });
    test('data camel casing', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['profile', 'TestProfileComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-profile user-id="1"></x-profile>`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestProfileComponent', 'profile', ['userId' => '1'])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestProfileComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?> @endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('colon data', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['profile', 'TestProfileComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-profile :user-id="1"></x-profile>`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestProfileComponent', 'profile', ['userId' => 1])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestProfileComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?> @endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('escaped colon attributed', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['profile', 'TestProfileComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-profile :user-id="1" ::title="user.name"></x-profile>`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestProfileComponent', 'profile', ['userId' => 1])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestProfileComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([':title' => 'user.name']); ?> @endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('colon attributes is escaped if strings', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['profile', 'TestProfileComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-profile :src="'foo'"></x-profile>`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestProfileComponent', 'profile', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestProfileComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['src' => \\Illuminate\\View\\Compilers\\BladeCompiler::sanitizeComponentAttribute('foo')]); ?> @endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('colon nested component parsing', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['foo:alert', 'TestAlertComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-foo:alert></x-foo:alert>`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'foo:alert', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?> @endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('colon starting nested component parsing', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['foo:alert', 'TestAlertComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x:foo:alert></x-foo:alert>`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'foo:alert', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?> @endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('self closing components can be compiled', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['alert', 'TestAlertComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<div><x-alert/></div>`)), `<div>##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'alert', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
@endComponentClass##END-COMPONENT-CLASS##</div>`);
    });
    test('components can be compiled with hyphen attributes', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['alert', 'TestAlertComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-alert class="bar" wire:model="foo" x-on:click="bar" @click="baz" />`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'alert', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['class' => 'bar', 'wire:model' => 'foo', 'x-on:click' => 'bar', '@click' => 'baz']); ?>
@endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('self closing components can be compoiled with data and attributes', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['alert', 'TestAlertComponent::class']
        ]), {
            getDetails(componentName) {
                return {
                    properties: ['title']
                };
            },
        }).compile(bladeDocument_1.BladeDocument.fromText(`<x-alert title="foo" class="bar" wire:model="foo" />`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'alert', ['title' => 'foo'])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['class' => 'bar', 'wire:model' => 'foo']); ?>
@endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('component can receive attribute bag', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['profile', 'TestProfileComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-profile class="bar" {{ $attributes }} wire:model="foo"></x-profile>`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestProfileComponent', 'profile', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestProfileComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['class' => 'bar', 'attributes' => \\Illuminate\\View\\Compilers\\BladeCompiler::sanitizeComponentAttribute($attributes), 'wire:model' => 'foo']); ?> @endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('self closing component can receive attribute bag', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['alert', 'TestAlertComponent::class']
        ]), {
            getDetails(componentName) {
                return {
                    properties: ['title']
                };
            },
        }).compile(bladeDocument_1.BladeDocument.fromText(`<div><x-alert title="foo" class="bar" {{ $attributes->merge(['class' => 'test']) }} wire:model="foo" /></div>`)), `<div>##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'alert', ['title' => 'foo'])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['class' => 'bar', 'attributes' => \\Illuminate\\View\\Compilers\\BladeCompiler::sanitizeComponentAttribute($attributes->merge(['class' => 'test'])), 'wire:model' => 'foo']); ?>
@endComponentClass##END-COMPONENT-CLASS##</div>`);
    });
    test('components can have attached word', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['profile', 'TestProfileComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-profile></x-profile>Words`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestProfileComponent', 'profile', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestProfileComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?> @endComponentClass##END-COMPONENT-CLASS##Words`);
    });
    test('self closing components can have attached word', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['profile', 'TestProfileComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-profile/>Words`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestProfileComponent', 'profile', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestProfileComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
@endComponentClass##END-COMPONENT-CLASS##Words`);
    });
    test('self closing components can be compiled with bound data', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['alert', 'TestAlertComponent::class']
        ]), {
            getDetails(componentName) {
                return {
                    properties: ['title']
                };
            },
        }).compile(bladeDocument_1.BladeDocument.fromText(`<x-alert :title="$title" class="bar" />`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'alert', ['title' => $title])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['class' => 'bar']); ?>
@endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('paired component tags', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['alert', 'TestAlertComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-alert>
</x-alert>`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'alert', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes([]); ?>
 @endComponentClass##END-COMPONENT-CLASS##`);
    });
    test('attributes with > dont confuse it', () => {
        assert_1.default.strictEqual(compiler(new Map([
            ['alert', 'TestAlertComponent::class']
        ])).compile(bladeDocument_1.BladeDocument.fromText(`<x-alert class=">">
</x-alert>`)), `##BEGIN-COMPONENT-CLASS##@component('Illuminate\\Tests\\View\\Blade\\TestAlertComponent', 'alert', [])
<?php if (isset($attributes) && $constructor = (new ReflectionClass(Illuminate\\Tests\\View\\Blade\\TestAlertComponent::class))->getConstructor()): ?>
<?php $attributes = $attributes->except(collect($constructor->getParameters())->map->getName()->all()); ?>
<?php endif; ?>
<?php $component->withAttributes(['class' => '>']); ?>
 @endComponentClass##END-COMPONENT-CLASS##`);
    });
});
function compiler(aliases = new Map(), resolver = null) {
    const compiler = new phpCompiler_1.PhpCompiler(), testResolver = new componentClassNameResolver_1.AppClassNameResolver();
    testResolver.setNamespace('Illuminate\\Tests\\View\\Blade\\');
    compiler.getComponentCompiler()
        .registerAliases(aliases)
        .setComponentNameResolver(testResolver).setComponentDetailsResolver(resolver);
    compiler.setCompileComponentTagBlade(false);
    return compiler;
}
//# sourceMappingURL=compiler_componenttag.test.js.map