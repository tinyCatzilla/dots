"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const transform_1 = require("./testUtils/transform");
suite('Forelse Transformer', () => {
    test('it can transform forelse without an empty directive', () => {
        assert_1.default.strictEqual((0, transform_1.transformString)(`<div>
@forelse ($users as $user)
<li>{{ $user->name }}</li>
@endforelse
</div>



@forelse ($users as $user)
<li>{{ $user->name }}
</li>
@endforelse`).trim(), `<div>
@forelse ($users as $user)
<li>{{ $user->name }}</li>
@endforelse
</div>



@forelse ($users as $user)
<li>{{ $user->name }}
</li>
@endforelse`);
    });
    test('it can transform forelse', () => {
        assert_1.default.strictEqual((0, transform_1.transformString)(`<div>
@forelse ($users as $user)
<li>{{ $user->name }}</li>
@empty
<p>No users</p>
@endforelse
</div>`).trim(), `<div>
@forelse ($users as $user)
<li>{{ $user->name }}</li>
@empty

<p>No users</p>
@endforelse
</div>`);
    });
    test('it can transform forelse from a single line', () => {
        assert_1.default.strictEqual((0, transform_1.transformString)(`<div> @forelse ($users as $user) <li>{{ $user->name }}</li> @empty <p>No users</p> @endforelse</div> `).trim(), `<div> @forelse ($users as $user) <li>{{ $user->name }}</li> 
@empty
 <p>No users</p> @endforelse</div>`);
    });
});
//# sourceMappingURL=transformer_forelse.test.js.map