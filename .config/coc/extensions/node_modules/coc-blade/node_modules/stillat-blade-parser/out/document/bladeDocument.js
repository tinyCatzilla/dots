"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BladeDocument = void 0;
const documentParser_1 = require("../parser/documentParser");
const documentCursor_1 = require("./documentCursor");
const documentErrors_1 = require("./documentErrors");
const nodeScanner_1 = require("./scanners/nodeScanner");
const transformer_1 = require("./transformer");
class BladeDocument {
    constructor() {
        this.documentParser = new documentParser_1.DocumentParser();
        this.transformer = null;
        this.cursor = new documentCursor_1.DocumentCursor(this);
        this.nodes = new nodeScanner_1.NodeScanner(this);
        this.errors = new documentErrors_1.DocumentErrors(this);
    }
    static fromText(text, seedPosition = null) {
        const document = new BladeDocument();
        if (seedPosition != null) {
            document.getParser().setSeedPosition(seedPosition);
        }
        return document.loadString(text);
    }
    static childFromText(text, parentParser, seedPosition = null) {
        const document = new BladeDocument();
        if (seedPosition != null) {
            document.getParser().setSeedPosition(seedPosition);
        }
        document.getParser().withPhpValidator(parentParser.getPhpValidator());
        document.loadString(text);
        return {
            renderNodes: document.getRenderNodes(),
            content: text,
            document: document
        };
    }
    isValid() {
        if (this.documentParser.hasUnclosedStructures()) {
            return false;
        }
        return true;
    }
    transform() {
        if (this.transformer == null) {
            this.transformer = new transformer_1.Transformer(this);
        }
        return this.transformer;
    }
    loadString(text) {
        this.documentParser.parse(text);
        return this;
    }
    getLinesAround(line) {
        return this.documentParser.getLinesAround(line);
    }
    getContent() {
        return this.documentParser.getContent();
    }
    getOriginalContent() {
        return this.documentParser.getOriginalContent();
    }
    getAllNodes() {
        return this.documentParser.getNodes();
    }
    getRenderNodes() {
        return this.documentParser.getRenderNodes();
    }
    getFragments() {
        return this.documentParser.getFragments();
    }
    getParser() {
        return this.documentParser;
    }
    getText(start, end) {
        return this.documentParser.getText(start, end);
    }
    charLeftAt(position) {
        return this.documentParser.charLeftAt(position);
    }
    charAt(position) {
        return this.documentParser.charAt(position);
    }
    charRightAt(position) {
        return this.documentParser.charRightAt(position);
    }
    getLineIndex(lineNumber) {
        return this.documentParser.getLineIndex(lineNumber);
    }
    getLineText(lineNumber) {
        return this.documentParser.getLineText(lineNumber);
    }
    wordAt(position, tabSize = 4) {
        return this.documentParser.wordAt(position, tabSize);
    }
    wordLeftAt(position, tabSize = 4) {
        return this.documentParser.wordLeftAt(position, tabSize);
    }
    wordRightAt(position, tabSize = 4) {
        return this.documentParser.wordRightAt(position, tabSize);
    }
    punctuationLeftAt(position, tabSize = 4) {
        return this.documentParser.punctuationLeftAt(position, tabSize);
    }
    punctuationRightAt(position, tabSize = 4) {
        return this.documentParser.punctuationRightAt(position, tabSize);
    }
    getLineChars(lineNumber) {
        const lineText = this.getLineText(lineNumber);
        if (lineText != null) {
            return lineText.split("");
        }
        return null;
    }
}
exports.BladeDocument = BladeDocument;
//# sourceMappingURL=bladeDocument.js.map