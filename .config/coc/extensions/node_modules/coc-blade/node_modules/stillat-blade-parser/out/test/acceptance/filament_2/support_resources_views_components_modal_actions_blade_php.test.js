"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: support_resources_views_components_modal_actions_blade_php', () => {
    test('pint: it can format support_resources_views_components_modal_actions_blade_php', () => {
        const input = `@props([
    'alignment' => 'left',
    'darkMode' => false,
    'fullWidth' => false,
])

<div {{ $attributes->class([
    'filament-modal-actions',
    'flex flex-wrap items-center gap-4 rtl:space-x-reverse' => ! $fullWidth,
    'flex-row-reverse space-x-reverse' => (! $fullWidth) && ($alignment === 'right'),
    'justify-center' => (! $fullWidth) && ($alignment === 'center'),
    'grid gap-2 grid-cols-[repeat(auto-fit,minmax(0,1fr))]' => $fullWidth,
]) }}>
    {{ $slot }}
</div>
`;
        const output = `@props([
    'alignment' => 'left',
    'darkMode' => false,
    'fullWidth' => false,
])

<div
    {{
        $attributes->class([
            'filament-modal-actions',
            'flex flex-wrap items-center gap-4 rtl:space-x-reverse' => ! $fullWidth,
            'flex-row-reverse space-x-reverse' => (! $fullWidth) && ($alignment === 'right'),
            'justify-center' => (! $fullWidth) && ($alignment === 'center'),
            'grid grid-cols-[repeat(auto-fit,minmax(0,1fr))] gap-2' => $fullWidth,
        ])
    }}
>
    {{ $slot }}
</div>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=support_resources_views_components_modal_actions_blade_php.test.js.map