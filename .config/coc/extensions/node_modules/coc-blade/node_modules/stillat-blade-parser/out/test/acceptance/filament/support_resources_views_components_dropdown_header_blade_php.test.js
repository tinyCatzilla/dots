"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: support_resources_views_components_dropdown_header_blade_php', () => {
    test('pint: it can format support_resources_views_components_dropdown_header_blade_php', () => {
        const input = `@props([
    'color' => 'primary',
    'icon' => null,
    'tag' => 'div',
])

<{{ $tag }} {{ $attributes->class([
    'filament-dropdown-header flex w-full gap-2 p-3 text-sm',
    match ($color) {
        'danger' => 'filament-dropdown-header-color-danger text-danger-600 dark:text-danger-400',
        'gray' => 'filament-dropdown-header-color-gray text-gray-700 dark:text-gray-200',
        'info' => 'filament-dropdown-header-color-info text-info-600 dark:text-info-400',
        'primary' => 'filament-dropdown-header-color-primary text-primary-600 dark:text-primary-400',
        'secondary' => 'filament-dropdown-header-color-secondary text-secondary-600 dark:text-secondary-400',
        'success' => 'filament-dropdown-header-color-success text-success-600 dark:text-success-400',
        'warning' => 'filament-dropdown-header-color-warning text-warning-600 dark:text-warning-400',
        default => $color,
    },
]) }}>
    @if ($icon)
        <x-filament::icon
            :name="$icon"
            alias="support::dropdown.header"
            size="h-5 w-5"
            class="filament-dropdown-header-icon"
        />
    @endif

    <span class="filament-dropdown-header-label">
        {{ $slot }}
    </span>
</{{ $tag }}>
`;
        const output = `@props([
    'color' => 'primary',
    'icon' => null,
    'tag' => 'div',
])

<{{ $tag }}
    {{
        $attributes->class([
            'filament-dropdown-header flex w-full gap-2 p-3 text-sm',
            match ($color) {
                'danger' => 'filament-dropdown-header-color-danger text-danger-600 dark:text-danger-400',
                'gray' => 'filament-dropdown-header-color-gray text-gray-700 dark:text-gray-200',
                'info' => 'filament-dropdown-header-color-info text-info-600 dark:text-info-400',
                'primary' => 'filament-dropdown-header-color-primary text-primary-600 dark:text-primary-400',
                'secondary' => 'filament-dropdown-header-color-secondary text-secondary-600 dark:text-secondary-400',
                'success' => 'filament-dropdown-header-color-success text-success-600 dark:text-success-400',
                'warning' => 'filament-dropdown-header-color-warning text-warning-600 dark:text-warning-400',
                default => $color,
            },
        ])
    }}
>
    @if ($icon)
        <x-filament::icon
            :name="$icon"
            alias="support::dropdown.header"
            size="h-5 w-5"
            class="filament-dropdown-header-icon"
        />
    @endif

    <span class="filament-dropdown-header-label">
        {{ $slot }}
    </span>
</{{ $tag }}>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=support_resources_views_components_dropdown_header_blade_php.test.js.map