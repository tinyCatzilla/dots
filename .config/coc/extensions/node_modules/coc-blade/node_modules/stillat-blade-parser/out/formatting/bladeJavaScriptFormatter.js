"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatExtractedScript = void 0;
const bladeDocument_1 = require("../document/bladeDocument");
const indentLevel_1 = require("../document/printers/indentLevel");
const nodes_1 = require("../nodes/nodes");
const generalSyntaxReflow_1 = require("./generalSyntaxReflow");
const utils_1 = require("./prettier/utils");
const safetyChars = [
    '(', ')', '{', '}', , ':', '->', '<', '>'
];
function formatExtractedScript(attribute, transformOptions, slug, tmpContent, parentTransformer, originalDoc) {
    let addedVarPlaceholder = false;
    const formatContent = attribute.content.substring(1, attribute.content.length - 1).trim();
    let shouldContinue = false;
    for (let i = 0; i < safetyChars.length; i++) {
        if (formatContent.includes(safetyChars[i])) {
            shouldContinue = true;
            break;
        }
    }
    if (shouldContinue && attribute.content.includes('-')) {
        const checkDoc = bladeDocument_1.BladeDocument.fromText(formatContent), checkNodes = checkDoc.getAllNodes();
        for (let i = 0; i < checkNodes.length; i++) {
            const node = checkNodes[i];
            if (node instanceof nodes_1.LiteralNode) {
                if (node.content.startsWith('-') || node.content.endsWith('-')) {
                    shouldContinue = false;
                    break;
                }
            }
        }
    }
    if (!shouldContinue) {
        return attribute.content;
    }
    let tempTemplate = "\n";
    if (formatContent.startsWith('{') && formatContent.endsWith('}')) {
        tempTemplate += 'let _tmpFormat = ';
        addedVarPlaceholder = true;
    }
    tempTemplate += formatContent;
    tempTemplate += "\n";
    let result = attribute.content;
    let toFormat = '';
    try {
        const tmpDoc = new bladeDocument_1.BladeDocument();
        tmpDoc.getParser().withParserOptions(originalDoc.getParser().getParserOptions());
        tmpDoc.getParser().withPhpValidator(originalDoc.getParser().getPhpValidator());
        tmpDoc.loadString('<script>' + tempTemplate + '</script>');
        tmpDoc.getParser();
        const tmpTransformer = tmpDoc.transform();
        tmpTransformer.setParentTransformer(parentTransformer);
        tmpTransformer.withOptions(transformOptions);
        tmpTransformer.setFormattingOptions(parentTransformer.getFormattingOptions());
        tmpTransformer.withJsonFormatter(parentTransformer.getJsonFormatter());
        tmpTransformer.withBlockPhpFormatter(parentTransformer.getBlockPhpFormatter());
        tmpTransformer.withPhpTagFormatter(parentTransformer.getPhpTagFormatter());
        tmpTransformer.withPhpFormatter(parentTransformer.getPhpFormatter());
        const tmpResult = tmpTransformer.toStructure();
        toFormat = tmpResult.trim();
        toFormat = toFormat.substring(8);
        toFormat = toFormat.trim();
        toFormat = toFormat.substring(0, toFormat.length - 9);
        result = (0, utils_1.formatAsJavaScript)(toFormat, transformOptions);
        result = tmpTransformer.fromStructure(result);
        if (addedVarPlaceholder) {
            result = result.trimLeft();
            result = result.substring(3);
            result = result.trimLeft();
            result = result.substring(10);
            result = result.trimLeft();
            result = result.substring(1);
            result = result.trimLeft();
        }
        result = result.trim();
        if (formatContent.trim().endsWith(';') == false && result.endsWith(';')) {
            result = result.substring(0, result.length - 1);
        }
        if (result.startsWith(';')) {
            result = result.substring(1);
        }
        result = parentTransformer.transformStructures(result);
    }
    catch (err) {
        return attribute.content;
    }
    let targetIndent = indentLevel_1.IndentLevel.relativeIndentLevel(slug, tmpContent), transformedContent = result, appendFinal = ' '.repeat(targetIndent);
    const origTransformedContent = result.trim();
    if (origTransformedContent.startsWith('{') && origTransformedContent.endsWith('}')) {
        transformedContent = '"' + indentLevel_1.IndentLevel.shiftIndent(generalSyntaxReflow_1.GeneralSyntaxReflow.instance.safeReflow(origTransformedContent), targetIndent, true, transformOptions, false, false) + '"';
    }
    else {
        if (transformedContent.includes("\n") == false) {
            transformedContent = '"' + generalSyntaxReflow_1.GeneralSyntaxReflow.instance.safeReflow(transformedContent.trim()) + '"';
        }
        else {
            if (isSafeWrapping(attribute, transformOptions)) {
                targetIndent += attribute.name.length + 2;
                transformedContent = `"` + indentLevel_1.IndentLevel.shiftIndent(generalSyntaxReflow_1.GeneralSyntaxReflow.instance.safeReflow(origTransformedContent), targetIndent, false, transformOptions, false, false).trim() + `"`;
            }
            else {
                transformedContent = `"\n` + indentLevel_1.IndentLevel.shiftIndent(generalSyntaxReflow_1.GeneralSyntaxReflow.instance.safeReflow(origTransformedContent), targetIndent + transformOptions.tabSize, false, transformOptions, false, false) + `\n${appendFinal}"`;
            }
        }
    }
    return transformedContent;
}
exports.formatExtractedScript = formatExtractedScript;
function isSafeWrapping(attribute, transformOptions) {
    if (transformOptions.safeWrappingJsAttributes.length == 0) {
        return false;
    }
    for (let i = 0; i < transformOptions.safeWrappingJsAttributes.length; i++) {
        if (new RegExp(transformOptions.safeWrappingJsAttributes[i]).test(attribute.name)) {
            return true;
        }
    }
    return false;
}
//# sourceMappingURL=bladeJavaScriptFormatter.js.map