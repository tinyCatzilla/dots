"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('Blade Comments', () => {
    test('comments with braces does not confuse the parser', () => {
        const document = bladeDocument_1.BladeDocument.fromText('{{--a{{ $one }}b{{ $two }}c{{ $three }}d--}}a{{ $one }}b{{ $two }}c{{ $three }}d'), nodes = document.getAllNodes();
        (0, assertions_1.assertCount)(8, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeCommentNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[3]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[4]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[5]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[6]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[7]);
        const comment = nodes[0];
        assert.strictEqual(comment.innerContent, "a{{ $one }}b{{ $two }}c{{ $three }}d");
        assert.strictEqual(comment.sourceContent, "{{--a{{ $one }}b{{ $two }}c{{ $three }}d--}}");
        const echoOne = nodes[2], echoTwo = nodes[4], echoThree = nodes[6];
        (0, assertions_1.assertLiteralContent)('a', nodes[1]);
        (0, assertions_1.assertEchoContent)(echoOne, ' $one ', '{{ $one }}');
        (0, assertions_1.assertLiteralContent)('b', nodes[3]);
        (0, assertions_1.assertEchoContent)(echoTwo, ' $two ', '{{ $two }}');
        (0, assertions_1.assertLiteralContent)('c', nodes[5]);
        (0, assertions_1.assertEchoContent)(echoThree, ' $three ', '{{ $three }}');
        (0, assertions_1.assertLiteralContent)('d', nodes[7]);
    });
    test('comment 2', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText('{{--this is a comment--}}').getAllNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeCommentNode, nodes[0]);
        (0, assertions_1.assertCommentContent)('this is a comment', nodes[0]);
    });
    test('comment 3', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText('{{-- @foreach() --}}').getAllNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeCommentNode, nodes[0]);
        (0, assertions_1.assertCommentContent)(' @foreach() ', nodes[0]);
    });
});
//# sourceMappingURL=comments.test.js.map