"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseBladeConfigObject = exports.getEnvSettings = exports.getPrettierFilePath = exports.setPrettierFilePath = exports.setEnvSettings = exports.defaultSettings = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const commonEventShortcuts_1 = require("../parser/excludeDirectives/commonEventShortcuts");
const cssAtRules_1 = require("../parser/excludeDirectives/cssAtRules");
const classStringsConfig_1 = require("./classStringsConfig");
const BLADE_CONFIG_FILE = '.blade.format.json';
const defaultSettings = {
    ignoreDirectives: [
        ...cssAtRules_1.CssAtRules,
        ...commonEventShortcuts_1.CommonEventShortcuts
    ],
    spacesAfterDirective: 0,
    spacesAfterControlDirective: 1,
    tabSize: 4,
    formatDirectiveJsonParameters: true,
    formatDirectivePhpParameters: true,
    formatInsideEcho: true,
    customIfs: [],
    directives: [],
    echoStyle: 'block',
    useLaravelPint: false,
    pintCommand: '',
    phpOptions: {
        phpVersion: '8.0'
    },
    attributeJsOptions: null,
    pintCacheDirectory: '',
    pintTempDirectory: '',
    pintCacheEnabled: true,
    pintConfigPath: '',
    classStrings: (0, classStringsConfig_1.getDefaultClassStringConfig)(),
    formatJsAttributes: true,
    excludeJsAttributes: [
        '^v-',
    ],
    includeJsAttributes: [
        '^x-',
        '^ax-',
    ],
    safeWrappingJsAttributes: [
        '^x-data',
    ]
};
exports.defaultSettings = defaultSettings;
let overrideOptions, overrideFilePath;
function setEnvSettings(options) {
    overrideOptions = options;
}
exports.setEnvSettings = setEnvSettings;
function setPrettierFilePath(path) {
    overrideFilePath = path;
}
exports.setPrettierFilePath = setPrettierFilePath;
function getPrettierFilePath() {
    return overrideFilePath;
}
exports.getPrettierFilePath = getPrettierFilePath;
function getEnvSettings(startingDirectory) {
    if (overrideOptions != null) {
        return overrideOptions;
    }
    const settingsFile = findSettingsFile(startingDirectory);
    if (settingsFile == null) {
        return defaultSettings;
    }
    if (fs.existsSync(settingsFile) == false) {
        return defaultSettings;
    }
    const optionContents = fs.readFileSync(settingsFile, { encoding: 'utf8' });
    try {
        const parsedFile = JSON.parse(optionContents), bladeFormattingConfig = parseBladeConfigObject(parsedFile);
        if (bladeFormattingConfig.useLaravelPint) {
            if (bladeFormattingConfig.pintCommand.length == 0) {
                const vendorPath = settingsFile.substring(0, settingsFile.length - BLADE_CONFIG_FILE.length) + '/vendor/bin/pint';
                if (fs.existsSync(vendorPath)) {
                    bladeFormattingConfig.pintCommand = `php ${vendorPath} {file}`;
                }
            }
            if (bladeFormattingConfig.pintTempDirectory.trim().length == 0) {
                bladeFormattingConfig.pintTempDirectory = __dirname + '/_temp/';
            }
            if (bladeFormattingConfig.pintCacheDirectory.trim().length == 0) {
                bladeFormattingConfig.pintCacheDirectory = __dirname + '/_cache/';
            }
            if (bladeFormattingConfig.pintTempDirectory.trim().length > 0) {
                bladeFormattingConfig.pintTempDirectory = normalizeFilePath(bladeFormattingConfig.pintTempDirectory.trim());
            }
            if (bladeFormattingConfig.pintCacheDirectory.trim().length > 0) {
                bladeFormattingConfig.pintCacheDirectory = normalizeFilePath(bladeFormattingConfig.pintCacheDirectory.trim());
            }
            if (bladeFormattingConfig.pintConfigPath.trim().length > 0) {
                bladeFormattingConfig.pintConfigPath = normalizeFilePath(bladeFormattingConfig.pintConfigPath.trim());
            }
            else {
                const pintConfigPath = settingsFile.substring(0, settingsFile.length - BLADE_CONFIG_FILE.length) + '/pint.json';
                if (fs.existsSync(pintConfigPath)) {
                    bladeFormattingConfig.pintConfigPath = pintConfigPath;
                }
            }
        }
        return bladeFormattingConfig;
    }
    catch (err) {
        console.log(err);
    }
    return defaultSettings;
}
exports.getEnvSettings = getEnvSettings;
function parseBladeConfigObject(configObject) {
    let ignoreDirectives = cssAtRules_1.CssAtRules, spacesAfterDirective = 0, spacesAfterControlDirective = 1, tabSize = 4, formatDirectivePhpParameters = true, formatDirectiveJsonParameters = true, formatInsideEcho = true, customIfs = [], directives = [], phpOptions = null, jsOptions = null, echoStyle = 'block', useLaravelPint = false, pintCommand = '', pintTempDir = '', pintCacheDir = '', pintCacheEnabled = true, pintConfigPath = '', classStrings = (0, classStringsConfig_1.getDefaultClassStringConfig)(), formatJsAttributes = defaultSettings.formatJsAttributes, includeJsAttributes = defaultSettings.includeJsAttributes, excludeJsAttributes = defaultSettings.excludeJsAttributes, safeWrappingJsAttributes = defaultSettings.safeWrappingJsAttributes;
    if (typeof configObject.ignoreDirectives !== 'undefined' && configObject.ignoreDirectives !== null) {
        ignoreDirectives = configObject.ignoreDirectives;
    }
    if (typeof configObject.spacesAfterDirective !== 'undefined' && configObject.spacesAfterDirective !== null) {
        spacesAfterDirective = configObject.spacesAfterDirective;
    }
    if (typeof configObject.spacesAfterControlDirective !== 'undefined' && configObject.spacesAfterControlDirective !== null) {
        spacesAfterControlDirective = configObject.spacesAfterControlDirective;
    }
    if (typeof configObject.tabSize !== 'undefined' && configObject.tabSize !== null) {
        tabSize = configObject.tabSize;
    }
    if (typeof configObject.formatDirectivePhpParameters !== 'undefined' && configObject.formatDirectivePhpParameters !== null) {
        formatDirectivePhpParameters = configObject.formatDirectivePhpParameters;
    }
    if (typeof configObject.formatDirectiveJsonParameters !== 'undefined' && configObject.formatDirectiveJsonParameters !== null) {
        formatDirectiveJsonParameters = configObject.formatDirectiveJsonParameters;
    }
    if (typeof configObject.customIfs !== 'undefined' && configObject.customIfs !== null) {
        customIfs = configObject.customIfs;
    }
    if (typeof configObject.useLaravelPint !== 'undefined' && configObject.useLaravelPint !== null) {
        useLaravelPint = configObject.useLaravelPint;
    }
    if (typeof configObject.directives !== 'undefined' && configObject.directives !== null) {
        directives = configObject.directives;
    }
    if (typeof configObject.echoStyle !== 'undefined' && configObject.echoStyle === 'inline') {
        echoStyle = 'inline';
    }
    if (typeof configObject.formatInsideEcho !== 'undefined' && configObject.formatInsideEcho !== null) {
        formatInsideEcho = configObject.formatInsideEcho;
    }
    if (typeof configObject.phpOptions !== 'undefined') {
        phpOptions = configObject.phpOptions;
    }
    if (typeof configObject.attributeJsOptions !== 'undefined') {
        jsOptions = configObject.attributeJsOptions;
    }
    if (typeof configObject.pintCommand !== 'undefined') {
        pintCommand = configObject.pintCommand.trim();
    }
    if (typeof configObject.pintConfig !== 'undefined') {
        pintConfigPath = configObject.pintConfig.trim();
    }
    if (typeof configObject.pintTempDirectory !== 'undefined') {
        pintTempDir = configObject.pintTempDirectory.trim();
    }
    if (typeof configObject.pintCacheDirectory !== 'undefined') {
        pintCacheDir = configObject.pintCacheDirectory.trim();
    }
    if (typeof configObject.pintCacheEnabled !== 'undefined') {
        pintCacheEnabled = configObject.pintCacheEnabled;
    }
    if (typeof configObject.formatJsAttributes !== 'undefined') {
        formatJsAttributes = configObject.formatJsAttributes;
    }
    if (typeof configObject.includeJsAttributes !== 'undefined') {
        includeJsAttributes = configObject.includeJsAttributes;
    }
    if (typeof configObject.excludeJsAttributes !== 'undefined') {
        excludeJsAttributes = configObject.excludeJsAttributes;
    }
    if (typeof configObject.safeWrappingJsAttributes !== 'undefined') {
        safeWrappingJsAttributes = configObject.safeWrappingJsAttributes;
    }
    if (spacesAfterDirective < 0) {
        spacesAfterDirective = 0;
    }
    if (spacesAfterControlDirective < 0) {
        spacesAfterControlDirective = 1;
    }
    if (spacesAfterDirective > 3) {
        spacesAfterDirective = 3;
    }
    if (spacesAfterControlDirective > 3) {
        spacesAfterControlDirective = 3;
    }
    if (typeof configObject.classStrings !== 'undefined' && configObject.classStrings != null) {
        classStrings = (0, classStringsConfig_1.classConfigFromObject)(configObject.classStrings);
    }
    return {
        ignoreDirectives: ignoreDirectives,
        spacesAfterDirective: spacesAfterDirective,
        spacesAfterControlDirective: spacesAfterControlDirective,
        tabSize: tabSize,
        formatDirectivePhpParameters: formatDirectivePhpParameters,
        formatDirectiveJsonParameters: formatDirectiveJsonParameters,
        formatInsideEcho: formatInsideEcho,
        customIfs: customIfs,
        directives: directives,
        phpOptions: phpOptions,
        echoStyle: echoStyle,
        useLaravelPint: useLaravelPint,
        pintCommand: pintCommand,
        pintCacheDirectory: pintCacheDir,
        pintTempDirectory: pintTempDir,
        pintCacheEnabled: pintCacheEnabled,
        pintConfigPath: pintConfigPath,
        classStrings: classStrings,
        attributeJsOptions: jsOptions,
        formatJsAttributes: formatJsAttributes,
        includeJsAttributes: includeJsAttributes,
        excludeJsAttributes: excludeJsAttributes,
        safeWrappingJsAttributes: safeWrappingJsAttributes
    };
}
exports.parseBladeConfigObject = parseBladeConfigObject;
function normalizeFilePath(filePath) {
    const separatorPattern = /[\\/]+/g;
    let normalizedPath = filePath.replace(separatorPattern, '/');
    if (!normalizedPath.endsWith('/')) {
        normalizedPath += '/';
    }
    return normalizedPath;
}
function findSettingsFile(startingDirectory) {
    let searchPath = path.dirname(startingDirectory);
    if (searchPath == '.') {
        searchPath = process.cwd();
    }
    const parts = searchPath.split(path.sep);
    while (parts.length > 0) {
        const newPath = parts.join(path.sep), formatFileCandidate = path.join(newPath, BLADE_CONFIG_FILE);
        if (fs.existsSync(formatFileCandidate)) {
            return formatFileCandidate;
        }
        parts.pop();
    }
    return null;
}
//# sourceMappingURL=optionDiscovery.js.map