"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('Child Nodes', () => {
    test('test it associates child nodes', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@isset
Test
@endisset


@isset


    @isset
    Test
    @endisset

    Test
@endisset

@for
something
@endfor`).getRenderNodes();
        (0, assertions_1.assertCount)(5, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.ConditionNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.ConditionNode, nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[3]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[4]);
        (0, assertions_1.assertLiteralContent)("\n\n\n", nodes[1]);
        (0, assertions_1.assertLiteralContent)("\n\n", nodes[3]);
        const dc1 = nodes[0], dc2 = nodes[2], d1 = dc1.logicBranches[0].head, d2 = dc2.logicBranches[0].head, d3 = nodes[4];
        assert.strictEqual(d1.directiveName, 'isset');
        assert.strictEqual(d1.documentContent, "\nTest\n");
        (0, assertions_1.assertCount)(2, d1.children);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, d1.children[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, d1.children[1]);
        (0, assertions_1.assertLiteralContent)("\nTest\n", d1.children[0]);
        assert.strictEqual(d2.directiveName, 'isset');
        assert.strictEqual(d2.documentContent, "\n\n\n    @isset\n    Test\n    @endisset\n\n    Test\n");
        (0, assertions_1.assertCount)(4, d2.children);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, d2.children[0]);
        (0, assertions_1.assertLiteralContent)("\n\n\n    ", d2.children[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, d2.children[1]);
        const cd2d1 = d2.children[1], d2d1 = cd2d1.logicBranches[0].head;
        assert.strictEqual(d2d1.directiveName, 'isset');
        (0, assertions_1.assertCount)(2, d2d1.children);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, d2d1.children[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, d2d1.children[1]);
        (0, assertions_1.assertLiteralContent)("\n    Test\n    ", d2d1.children[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, d2.children[2]);
        (0, assertions_1.assertLiteralContent)("\n\n    Test\n", d2.children[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, d2.children[3]);
        assert.strictEqual(d3.directiveName, 'for');
        assert.strictEqual(d3.documentContent, "\nsomething\n");
        (0, assertions_1.assertCount)(2, d3.children);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, d3.children[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, d3.children[1]);
        (0, assertions_1.assertLiteralContent)("\nsomething\n", d3.children[0]);
    });
});
//# sourceMappingURL=child_nodes.test.js.map