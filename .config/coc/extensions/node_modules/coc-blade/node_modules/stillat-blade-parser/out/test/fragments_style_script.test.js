"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const bladeDocument_1 = require("../document/bladeDocument");
suite('Fragments Style and Script Labeling', () => {
    test('it labels nodes inside style and script tags', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`
<html>
<style>
    .thing {
        background-color: {{ $color }}
    }
</style>
{{ $color }}
<style>
    .thing {
        background-color: {{ $color }}
    }
</style>
<body>

<script>
var test = @js('something')
</script>
@js('something')
<script>
var test = @js('something')
</script>
</body>

</html>`).getAllNodes();
        const echo1 = nodes[1], echo2 = nodes[3], echo3 = nodes[5], directive1 = nodes[7], directive2 = nodes[9], directive3 = nodes[11];
        assert_1.default.strictEqual(echo1.isInScriptTag, false);
        assert_1.default.strictEqual(echo1.isInStyleTag, true);
        assert_1.default.strictEqual(echo2.isInScriptTag, false);
        assert_1.default.strictEqual(echo2.isInStyleTag, false);
        assert_1.default.strictEqual(echo3.isInScriptTag, false);
        assert_1.default.strictEqual(echo3.isInStyleTag, true);
        assert_1.default.strictEqual(directive1.isInScriptTag, true);
        assert_1.default.strictEqual(directive1.isInStyleTag, false);
        assert_1.default.strictEqual(directive2.isInScriptTag, false);
        assert_1.default.strictEqual(directive2.isInStyleTag, false);
        assert_1.default.strictEqual(directive3.isInScriptTag, true);
        assert_1.default.strictEqual(directive3.isInStyleTag, false);
    });
});
//# sourceMappingURL=fragments_style_script.test.js.map