"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericLanguageStructures = void 0;
class GenericLanguageStructures {
}
exports.GenericLanguageStructures = GenericLanguageStructures;
GenericLanguageStructures.IfStatement = 'if';
GenericLanguageStructures.CallStatement = 'call';
GenericLanguageStructures.TernaryStatement = 'ternary';
GenericLanguageStructures.Addition = 'addition';
GenericLanguageStructures.Substraction = 'subtraction';
GenericLanguageStructures.Multiplication = 'multiplication';
GenericLanguageStructures.Division = 'division';
GenericLanguageStructures.Modulus = 'modulus';
GenericLanguageStructures.Exponentiation = 'exponentiation';
GenericLanguageStructures.BinCompare = 'compare';
GenericLanguageStructures.Concat = 'concat';
GenericLanguageStructures.GreaterThan = 'greater_than';
GenericLanguageStructures.GreaterThanEqual = 'greater_than_equal';
GenericLanguageStructures.LessThan = 'less_than';
GenericLanguageStructures.LessThanEqual = 'less_than_equal';
GenericLanguageStructures.BitwiseAnd = 'bitwise_and';
GenericLanguageStructures.BitwiseOr = 'bitiwse_or';
GenericLanguageStructures.BitwiseXor = 'bitiwse_xor';
GenericLanguageStructures.LeftShift = 'left_shift';
GenericLanguageStructures.RightShift = 'right_shift';
GenericLanguageStructures.Equality = 'equality';
GenericLanguageStructures.Identity = 'identitiy';
GenericLanguageStructures.Inequality = 'inequality';
GenericLanguageStructures.NotIdentity = 'not_identity';
GenericLanguageStructures.CompAnd = 'and';
GenericLanguageStructures.CompOr = 'or';
GenericLanguageStructures.Xor = 'xor';
GenericLanguageStructures.Assignment = 'assign';
GenericLanguageStructures.AdditionAssignment = 'assign_addition';
GenericLanguageStructures.SubtractionAssignment = 'assign_subtraciton';
GenericLanguageStructures.MultiplicationAssignment = 'assign_multiplication';
GenericLanguageStructures.DivisionAssignment = 'assign_division';
GenericLanguageStructures.ModulusAssignment = 'assign_modulus';
GenericLanguageStructures.ConcatenationAssignment = 'assign_concat';
GenericLanguageStructures.BitwiseAndAssignment = 'assign_bitwise_and';
GenericLanguageStructures.BitwiseOrAssignment = 'assign_bitwise_or';
GenericLanguageStructures.BitwiseXorAssignment = 'assign_bitwise_xor';
GenericLanguageStructures.LeftShiftAssignment = 'assign_left_shift';
GenericLanguageStructures.RightShiftAssignment = 'assign_right_shift';
//# sourceMappingURL=genericLanguageStructures.js.map