"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineStringParser = void 0;
const isStartOfString_1 = require("./scanners/isStartOfString");
const skipToEndOfLine_1 = require("./scanners/skipToEndOfLine");
const skipToEndOfMultilineComment_1 = require("./scanners/skipToEndOfMultilineComment");
const skipToEndOfString_1 = require("./scanners/skipToEndOfString");
class InlineStringParser {
    constructor() {
        this.ignoreRanges = [];
        this.strings = [];
        this.nodes = [];
        this.chars = [];
        this.cur = null;
        this.prev = null;
        this.next = null;
        this.currentIndex = 0;
        this.inputLen = 0;
        this.currentContent = [];
        this.nodeIndex = 0;
        this.hasStringNodesInResult = false;
    }
    advance(count) {
        for (let i = 0; i < count; i++) {
            this.currentIndex++;
            this.checkCurrentOffsets();
        }
    }
    encounteredFailure() {
        return;
    }
    updateIndex(index) {
        this.currentIndex = index;
    }
    inputLength() {
        return this.inputLen;
    }
    getCurrentIndex() {
        return this.currentIndex;
    }
    incrementIndex() {
        this.currentIndex += 1;
    }
    getCurrent() {
        return this.cur;
    }
    getNext() {
        return this.next;
    }
    getPrev() {
        return this.prev;
    }
    checkCurrentOffsets() {
        this.cur = this.chars[this.currentIndex];
        this.prev = null;
        this.next = null;
        if (this.currentIndex > 0) {
            this.prev = this.chars[this.currentIndex - 1];
        }
        if ((this.currentIndex + 1) < this.inputLen) {
            this.next = this.chars[this.currentIndex + 1];
        }
    }
    pushChar(value) {
        this.currentContent.push(value);
    }
    getChar(index) {
        return this.chars[index];
    }
    getSeedOffset() {
        return 0;
    }
    getContentSubstring(from, length) {
        return '';
    }
    setIgnoreRanges(ranges) {
        this.ignoreRanges = ranges;
    }
    hasStringNodes() {
        return this.hasStringNodesInResult;
    }
    parse(value) {
        this.nodes = [];
        this.strings = [];
        this.chars = value.split('');
        this.inputLen = this.chars.length;
        for (this.currentIndex = 0; this.currentIndex < this.inputLen; this.currentIndex += 1) {
            this.checkCurrentOffsets();
            if (this.cur == '/' && this.next == '/') {
                (0, skipToEndOfLine_1.skipToEndOfLine)(this, true);
                continue;
            }
            if (this.cur == '/' && this.next == '*') {
                (0, skipToEndOfMultilineComment_1.skipToEndOfMultilineComment)(this, true);
                continue;
            }
            if ((0, isStartOfString_1.isStartOfString)(this.cur)) {
                const stringStart = this.cur, stringStartedOn = this.currentIndex;
                if (this.currentContent.length > 0) {
                    const literalNode = {
                        content: this.currentContent.join(''),
                        type: 'literal',
                        index: this.nodeIndex
                    };
                    this.nodeIndex++;
                    this.nodes.push(literalNode);
                    this.currentContent = [];
                }
                const results = (0, skipToEndOfString_1.skipToEndOfStringTraced)(this);
                // Is this string inside an ingored range?
                let insideIgnoredRange = false;
                for (let i = 0; i < this.ignoreRanges.length; i++) {
                    const range = this.ignoreRanges[i];
                    if (stringStartedOn >= range.start && this.currentIndex <= range.end) {
                        insideIgnoredRange = true;
                        break;
                    }
                }
                if (insideIgnoredRange) {
                    this.currentContent.push(stringStart);
                    for (let i = 0; i < results.value.length; i++) {
                        this.currentContent.push(results.value[i]);
                    }
                    this.currentContent.push(stringStart);
                }
                else {
                    this.strings.push(results.value);
                    const stringNode = {
                        content: stringStart + results.value + stringStart,
                        type: 'string',
                        index: this.nodeIndex,
                    };
                    this.hasStringNodesInResult = true;
                    this.nodeIndex++;
                    this.nodes.push(stringNode);
                }
                this.currentIndex = results.endedOn;
                if (this.currentIndex == this.inputLen - 1) {
                    break;
                }
                continue;
            }
            this.currentContent.push(this.cur);
        }
        if (this.currentContent.length > 0) {
            const literalNode = {
                content: this.currentContent.join(''),
                type: 'literal',
                index: this.nodeIndex
            };
            this.nodeIndex++;
            this.nodes.push(literalNode);
            this.currentContent = [];
        }
    }
    getParsedNodes() {
        return this.nodes;
    }
}
exports.InlineStringParser = InlineStringParser;
//# sourceMappingURL=inlineStringParser.js.map