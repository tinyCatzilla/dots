"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatTagPhp = exports.formatPhp = exports.inlineFormatPhp = exports.formatAsHtmlStrings = exports.formatAsHtml = exports.formatAsJavaScript = exports.setOptions = exports.getOptionsAdjuster = exports.setOptionsAdjuster = exports.formatBladeStringWithPint = exports.formatBladeString = exports.formatJson = exports.getHtmlOptions = exports.cleanOptions = exports.getOriginalOptions = exports.getPhpOptions = exports.getEchoPhpOptions = void 0;
const prettier_1 = __importDefault(require("prettier"));
const plugin = __importStar(require("./plugin"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const standalone_1 = __importDefault(require("@prettier/plugin-php/standalone"));
const lib_1 = require("@stedi/prettier-plugin-jsonata/dist/lib");
const optionDiscovery_1 = require("../optionDiscovery");
const attributeRangeRemover_1 = require("../../document/attributeRangeRemover");
const stringRemover_1 = require("../../parser/stringRemover");
const stringUtilities_1 = require("../../utilities/stringUtilities");
const transformer_1 = require("../../document/transformer");
let phpOptions, htmlOptions, echoPhpOptions, originalOptions;
function getEchoPhpOptions() {
    return echoPhpOptions;
}
exports.getEchoPhpOptions = getEchoPhpOptions;
function getPhpOptions() {
    return phpOptions;
}
exports.getPhpOptions = getPhpOptions;
function getOriginalOptions() {
    return originalOptions;
}
exports.getOriginalOptions = getOriginalOptions;
function cleanOptions(options) {
    [
        "cursorOffset",
        "rangeEnd",
        "rangeStart",
        "locEnd",
        "locStat",
        "printer",
        "originalText",
        "astFormat",
    ].forEach((p) => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        delete options[p];
    });
    return options;
}
exports.cleanOptions = cleanOptions;
function getHtmlOptions() {
    return htmlOptions;
}
exports.getHtmlOptions = getHtmlOptions;
function formatJson(text) {
    return (0, lib_1.formatJsonata)(text, {
        printWidth: 20
    });
}
exports.formatJson = formatJson;
function formatBladeString(text, options = null, prettierOptions = null) {
    // Override settings and disable automatic option discovery. Useful for testing.
    (0, optionDiscovery_1.setEnvSettings)(options);
    if (prettierOptions == null) {
        return prettier_1.default.format(text, {
            parser: 'blade',
            plugins: [plugin],
        });
    }
    return prettier_1.default.format(text, {
        ...prettierOptions,
        parser: 'blade',
        plugins: [plugin],
    });
}
exports.formatBladeString = formatBladeString;
function formatBladeStringWithPint(text, options = null, transformOptions = null, prettierOptions = null) {
    let pintLocation = __dirname + '/../../../pint/pint', pintConfig = __dirname + '/../../../pint/pint.json', pintCacheDirectory = __dirname + '/../../../_test/_cache/', pintTempDirectory = __dirname + '/../../../_test/_temp/', pintCommand = `php ${pintLocation} {file}`;
    if (transformOptions != null) {
        pintCommand = transformOptions.pintCommand;
        pintCacheDirectory = transformOptions.pintCacheDirectory;
        pintTempDirectory = transformOptions.pintTempDirectory;
        pintConfig = transformOptions.pintConfigPath;
    }
    let curOptions = {
        ...optionDiscovery_1.defaultSettings,
        useLaravelPint: true,
        pintCommand: pintCommand,
        pintCacheDirectory: pintCacheDirectory,
        pintTempDirectory: pintTempDirectory,
        pintConfigPath: pintConfig
    };
    if (options != null) {
        curOptions = {
            ...curOptions,
            ...options,
            useLaravelPint: true,
            pintCommand: pintCommand,
            pintCacheDirectory: pintCacheDirectory,
            pintTempDirectory: pintTempDirectory,
            pintConfigPath: pintConfig
        };
    }
    return formatBladeString(text, curOptions, prettierOptions);
}
exports.formatBladeStringWithPint = formatBladeStringWithPint;
let optionsAdjuster = null;
function setOptionsAdjuster(adjuster) {
    optionsAdjuster = adjuster;
}
exports.setOptionsAdjuster = setOptionsAdjuster;
function getOptionsAdjuster() {
    return optionsAdjuster;
}
exports.getOptionsAdjuster = getOptionsAdjuster;
function setOptions(options) {
    originalOptions = options;
    htmlOptions = cleanOptions(Object.assign({}, options, { htmlWhitespaceSensitivity: "ignore", parser: "html", plugins: options.plugins }));
    phpOptions = cleanOptions(Object.assign({}, options, {
        parser: 'php',
        plugins: [standalone_1.default],
    }));
    echoPhpOptions = cleanOptions(Object.assign({}, options, {
        parser: 'php',
        plugins: [standalone_1.default],
        printWidth: Infinity,
    }));
}
exports.setOptions = setOptions;
function formatAsJavaScript(text, transformOptions) {
    if (transformOptions.attributeJsOptions != null) {
        return prettier_1.default.format(text, {
            ...htmlOptions,
            ...transformOptions.attributeJsOptions,
            parser: 'babel',
            singleQuote: true,
            quoteProps: 'preserve'
        });
    }
    return prettier_1.default.format(text, {
        ...htmlOptions,
        parser: 'babel',
        printWidth: 80,
        singleQuote: true,
        quoteProps: 'preserve',
        semi: false,
        trailingComma: 'all',
    });
}
exports.formatAsJavaScript = formatAsJavaScript;
function formatAsHtml(text) {
    if (attributeRangeRemover_1.isAttributeFormatter) {
        let formatText = text, removedStringMap = [];
        try {
            const strRemover = new stringRemover_1.StringRemover(), repMap = new Map();
            strRemover.remove(text);
            removedStringMap = strRemover.getStrings().reverse();
            removedStringMap.forEach((string, index) => {
                const rep = stringUtilities_1.StringUtilities.makeSlug(128);
                repMap.set(rep, string);
                formatText = formatText.replace(`"${string}"`, `"${rep}"`);
            });
            let fResult = prettier_1.default.format(formatText, {
                ...htmlOptions,
                printWidth: 20,
                singleAttributePerLine: true,
                parser: 'html'
            });
            // Make value-less attributes nicer.
            const formattedLines = stringUtilities_1.StringUtilities.breakByNewLine(fResult), newLines = [];
            for (let i = 0; i < formattedLines.length; i++) {
                const line = formattedLines[i];
                if (transformer_1.Transformer.inlineComments.includes(line.trim())) {
                    if (newLines.length > 0) {
                        newLines[newLines.length - 1] = newLines[newLines.length - 1] + ' ' + line.trim();
                        continue;
                    }
                    else {
                        newLines.push(line);
                    }
                }
                if (line.includes('<')) {
                    newLines.push(line);
                }
                else if (line.trim().includes(' ')) {
                    const parts = line.split(' '), leadingWs = line.length - line.trimLeft().length;
                    parts.forEach((part) => {
                        if (part.trim().length == 0) {
                            return;
                        }
                        newLines.push(' '.repeat(leadingWs) + part);
                    });
                }
                else {
                    newLines.push(line);
                }
            }
            fResult = newLines.join("\n");
            repMap.forEach((string, rep) => {
                fResult = fResult.replace(rep, string);
            });
            return fResult;
        }
        catch (err) {
            return text;
        }
    }
    return prettier_1.default.format(text, {
        ...htmlOptions,
        parser: 'html'
    });
}
exports.formatAsHtml = formatAsHtml;
function formatAsHtmlStrings(text) {
    return prettier_1.default.format(text, {
        ...htmlOptions,
        proseWrap: 'never',
        parser: 'html'
    });
}
exports.formatAsHtmlStrings = formatAsHtmlStrings;
function resolvePhpOptions(defaultOptions, transformOptions, options = null) {
    let opts = defaultOptions;
    if (options != null) {
        opts = options;
    }
    if (typeof transformOptions.phpOptions !== 'undefined' && transformOptions.phpOptions != null) {
        let phpOpts = transformOptions.phpOptions;
        opts = {
            ...opts,
            ...phpOpts
        };
    }
    else {
        opts = {
            ...opts,
            "phpVersion": "8.0"
        };
    }
    return opts;
}
function inlineFormatPhp(text, transformOptions, options = null) {
    const opts = resolvePhpOptions(echoPhpOptions, transformOptions, options);
    let result = prettier_1.default.format(text, opts).trim();
    result = result.substring(5);
    if (text.endsWith(';') == false && result.endsWith(';')) {
        result = result.substring(0, result.length - 1);
    }
    return result.trim();
}
exports.inlineFormatPhp = inlineFormatPhp;
function formatPhp(text, transformOptions, options = null) {
    const opts = resolvePhpOptions(phpOptions, transformOptions, options);
    let result = prettier_1.default.format(text, opts).trim();
    result = result.substring(5);
    if (text.endsWith(';') == false && result.endsWith(';')) {
        result = result.substring(0, result.length - 1);
    }
    return result.trim();
}
exports.formatPhp = formatPhp;
function formatTagPhp(text, transformOptions, options = null) {
    const opts = resolvePhpOptions(phpOptions, transformOptions, options);
    const result = prettier_1.default.format(text, opts).trim();
    return result.trim();
}
exports.formatTagPhp = formatTagPhp;
//# sourceMappingURL=utils.js.map