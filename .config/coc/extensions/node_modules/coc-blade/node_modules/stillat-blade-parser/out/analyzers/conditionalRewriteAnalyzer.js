"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionalRewriteAnalyzer = void 0;
const nodes_1 = require("../nodes/nodes");
const bladeKeywords_1 = require("../parser/bladeKeywords");
const pairManager_1 = require("./pairManager");
class ConditionalRewriteAnalyzer {
    static getNewName(node) {
        if (node.name == bladeKeywords_1.BladeKeywords.Unless) {
            return bladeKeywords_1.BladeKeywords.If;
        }
        if (pairManager_1.PairManager.isSpeculativeEndIf(node.directiveName)) {
            return bladeKeywords_1.BladeKeywords.If;
        }
        if (pairManager_1.PairManager.alwaysRewrite.includes(node.name)) {
            return bladeKeywords_1.BladeKeywords.If;
        }
        if (pairManager_1.PairManager.isSpeculativeCondition(node.name)) {
            return bladeKeywords_1.BladeKeywords.If;
        }
        if (pairManager_1.PairManager.customIfs.has(node.name)) {
            const lowerDirectiveName = node.directiveName.toLowerCase();
            if (lowerDirectiveName.startsWith('else')) {
                node.isClosingDirective = true;
                return bladeKeywords_1.BladeKeywords.ElseIf;
            }
            else if (lowerDirectiveName.startsWith('end')) {
                node.isClosingDirective = true;
                return bladeKeywords_1.BladeKeywords.If;
            }
            return bladeKeywords_1.BladeKeywords.If;
        }
        if (node.directiveName == 'auth') {
            return bladeKeywords_1.BladeKeywords.If;
        }
        return node.name;
    }
    static rewrite(nodes) {
        const returnNodes = [];
        nodes.forEach((node) => {
            if (node instanceof nodes_1.DirectiveNode) {
                if (pairManager_1.PairManager.shouldRewrite(node)) {
                    const clone = node.clone();
                    clone.name = this.getNewName(node);
                    returnNodes.push(clone);
                }
                else {
                    returnNodes.push(node);
                }
            }
            else {
                returnNodes.push(node);
            }
        });
        return returnNodes;
    }
}
exports.ConditionalRewriteAnalyzer = ConditionalRewriteAnalyzer;
//# sourceMappingURL=conditionalRewriteAnalyzer.js.map