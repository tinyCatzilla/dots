"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('Fragment Analysis', () => {
    test('it identifies dynamic opening', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`<{{ $tagName }}>

</{{ $tagName }}>`).getAllNodes();
        (0, assertions_1.assertCount)(5, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[3]);
        const echo1 = nodes[1], echo2 = nodes[3];
        assert.strictEqual(echo1.fragmentPosition, nodes_1.FragmentPosition.IsDynamicFragmentName);
        assert.strictEqual(echo2.fragmentPosition, nodes_1.FragmentPosition.IsDynamicFragmentName);
    });
    test('it identifies parameters', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`<div class="something {{ $here }}">

</div>`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[1]);
        const echo = nodes[1];
        assert.strictEqual(echo.fragmentPosition, nodes_1.FragmentPosition.InsideFragmentParameter);
    });
    test('it identifies inside content', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`<div something {{ $here }}>

</div>`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[1]);
        const echo = nodes[1];
        assert.strictEqual(echo.fragmentPosition, nodes_1.FragmentPosition.InsideFragment);
    });
    test('it identifies directive content', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`<div @class([])></div>`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[1]);
        const directive = nodes[1];
        assert.strictEqual(directive.fragmentPosition, nodes_1.FragmentPosition.InsideFragment);
    });
    test('it identifies condition content', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`<div @if(true) yes @endif></div>`).getRenderNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.ConditionNode, nodes[1]);
        const condition = nodes[1];
        assert.strictEqual(condition.fragmentPosition, nodes_1.FragmentPosition.InsideFragment);
    });
});
//# sourceMappingURL=fragment_analysis.test.js.map