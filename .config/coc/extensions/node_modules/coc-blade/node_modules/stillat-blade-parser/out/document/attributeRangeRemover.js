"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributeRangeRemover = exports.isAttributeFormattingEnabled = exports.isAttributeFormatter = exports.canProcessAttributes = exports.enableAttributeProcessing = exports.disableAttributeProcessing = exports.setIsFormattingAttributeContent = exports.setIsAttributeFormattingEnabled = void 0;
const stringUtilities_1 = require("../utilities/stringUtilities");
let canProcessAttributes = true;
exports.canProcessAttributes = canProcessAttributes;
let isAttributeFormatter = false;
exports.isAttributeFormatter = isAttributeFormatter;
let isAttributeFormattingEnabled = true;
exports.isAttributeFormattingEnabled = isAttributeFormattingEnabled;
function setIsAttributeFormattingEnabled(isEnabled) {
    exports.isAttributeFormattingEnabled = isAttributeFormattingEnabled = isEnabled;
}
exports.setIsAttributeFormattingEnabled = setIsAttributeFormattingEnabled;
function setIsFormattingAttributeContent(isAttribute) {
    exports.isAttributeFormatter = isAttributeFormatter = isAttribute;
    setIsAttributeFormattingEnabled(!isAttribute);
}
exports.setIsFormattingAttributeContent = setIsFormattingAttributeContent;
function disableAttributeProcessing() {
    exports.canProcessAttributes = canProcessAttributes = false;
}
exports.disableAttributeProcessing = disableAttributeProcessing;
function enableAttributeProcessing() {
    exports.canProcessAttributes = canProcessAttributes = true;
}
exports.enableAttributeProcessing = enableAttributeProcessing;
class AttributeRangeRemover {
    constructor() {
        this.attributeMapping = new Map();
        this.slugs = [];
    }
    makeSlug(length) {
        const slug = stringUtilities_1.StringUtilities.makeSlug(length);
        if (this.slugs.includes(slug)) {
            return this.makeSlug(length + 1);
        }
        this.slugs.push(slug);
        return slug;
    }
    remove(content, ranges) {
        ranges = ranges.sort((a, b) => a.startedOn - b.startedOn);
        let newContent = '', lastEnd = 0;
        for (let i = 0; i < ranges.length; i++) {
            const range = ranges[i], rangeSlug = this.makeSlug(range.content.length);
            this.attributeMapping.set(rangeSlug, range);
            if (i == 0) {
                const part = content.substring(0, range.startedOn);
                lastEnd = range.startedOn + range.content.length;
                newContent += part;
                newContent += '"' + rangeSlug + '"';
                if (ranges.length == 1) {
                    newContent += content.substring(lastEnd);
                }
            }
            else if (i == ranges.length - 1) {
                if (ranges.length == 1) {
                    const part = content.substring(0, range.startedOn);
                    newContent += part;
                }
                const part = content.substring(lastEnd, range.startedOn);
                lastEnd = range.startedOn + range.content.length;
                newContent += part;
                newContent += '"' + rangeSlug + '"';
                newContent += content.substring(lastEnd);
            }
            else {
                const part = content.substring(lastEnd, range.startedOn);
                lastEnd = range.startedOn + range.content.length;
                newContent += part;
                newContent += '"' + rangeSlug + '"';
            }
        }
        return newContent;
    }
    getRemovedAttributes() {
        return this.attributeMapping;
    }
}
exports.AttributeRangeRemover = AttributeRangeRemover;
//# sourceMappingURL=attributeRangeRemover.js.map