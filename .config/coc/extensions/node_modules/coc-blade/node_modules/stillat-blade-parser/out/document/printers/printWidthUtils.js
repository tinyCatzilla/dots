"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.preparePrettierWorkaround = exports.undoPrettierWorkaround = exports.getPrintWidth = void 0;
const stringUtilities_1 = require("../../utilities/stringUtilities");
function getPrintWidth(content, defaultWidth) {
    if (content.includes("\n") && (content.includes('match') || content.includes('=>') || content.includes('&&') ||
        content.includes(',') || content.includes('('))) {
        const lines = stringUtilities_1.StringUtilities.breakByNewLine(content);
        let maxW = 0;
        lines.forEach((line) => {
            const lineL = line.trim().length;
            if (lineL > maxW) {
                maxW = lineL;
            }
        });
        return maxW + Math.ceil(maxW / 2);
    }
    return defaultWidth;
}
exports.getPrintWidth = getPrintWidth;
function undoPrettierWorkaround(content) {
    const lines = stringUtilities_1.StringUtilities.breakByNewLine(content), newContent = [];
    let alreadyReversed = false;
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        if (line.trimRight().endsWith('//') && !alreadyReversed) {
            newContent.push(line.trimRight().substring(0, line.trimRight().length - 2).trimRight());
            alreadyReversed = true;
            continue;
        }
        newContent.push(line);
    }
    return newContent.join("\n");
}
exports.undoPrettierWorkaround = undoPrettierWorkaround;
function preparePrettierWorkaround(content) {
    const lines = stringUtilities_1.StringUtilities.breakByNewLine(content);
    let newContent = [], addedHack = false, addHack = false, doContinue = true;
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        if (!addedHack && line.trimRight().endsWith('[')) {
            addHack = true;
            newContent.push(line);
            continue;
        }
        if (line.trimRight().endsWith(',') && addHack && !addedHack) {
            if (line.trimRight().endsWith('//')) {
                doContinue = false;
                break;
            }
            else {
                newContent.push(line + '//');
                addedHack = true;
            }
        }
        else {
            newContent.push(line);
        }
    }
    if (!doContinue) {
        return {
            content: content,
            addedHack: false
        };
    }
    return {
        content: newContent.join("\n"),
        addedHack: addedHack
    };
}
exports.preparePrettierWorkaround = preparePrettierWorkaround;
//# sourceMappingURL=printWidthUtils.js.map