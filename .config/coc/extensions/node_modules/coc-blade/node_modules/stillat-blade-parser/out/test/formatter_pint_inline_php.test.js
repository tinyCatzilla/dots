"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../formatting/prettier/utils");
suite('Pint Transformer: Inline PHP', () => {
    test('pint: it can format basic inline PHP', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`
<html>
        <?php

$kernel = $app->                make(Illuminate\\Contracts\\Console\\Kernel::class);

$status =           $kernel->handle(
                                    $input = new Symfony\\Component\\Console\\Input\\ArgvInput,
                                    new Symfony\\Component\\Console\\Output\\ConsoleOutput
);

?>
</html>`).trim(), `<html>
    <?php

    $kernel = $app->make(Illuminate\\Contracts\\Console\\Kernel::class);

    $status = $kernel->handle(
        $input = new Symfony\\Component\\Console\\Input\\ArgvInput,
        new Symfony\\Component\\Console\\Output\\ConsoleOutput
    );

    ?>
</html>`);
    });
    test('pint: it can indent dynamic elements and spans', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`<<?= $element; ?>>
            <?= $inline; ?>
        <p>Text <?= $inline             ; ?> here.</p>
    </<?= $element; ?>>

<<?php echo $element; ?>>
<?php echo $inline; ?>
<p>Text <?php echo $inline             ; ?> here.</p>
</<?php echo $element; ?>>


<h1><?php echo ($that +    $another    - $something) +    $thing   ?></h1>`).trim(), `<<?= $element ?>>
    <?= $inline; ?>

    <p>Text <?= $inline ?> here.</p>
</<?= $element ?>>

<<?php echo $element; ?>>
    <?php echo $inline; ?>

    <p>Text <?php echo $inline; ?> here.</p>
</<?php echo $element; ?>>

<h1><?php echo $that + $another - $something + $thing; ?></h1>`);
    });
    test('pint: it preserves invalid PHP', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`<<?php echo $element; ?>>
            <?php echo $inline----  $$$$$; ?>
            <p>Text <?php echo $inline             ; ?> here.</p>
            </<?php echo $element; ?>>
            
                            <<?= echo $element; ?>>
                                    <?= echo $inline  ; ?>
                    <p>Text <?= echo $inline             ; ?> here.</p>
                </<?= echo $element; ?>>`).trim(), `<<?php echo $element; ?>>
    <?php echo $inline----  $$$$$; ?>

    <p>Text <?php echo $inline; ?> here.</p>
</<?php echo $element; ?>>

<<?= echo $element; ?>>
    <?= echo $inline  ; ?>

    <p>Text <?= echo $inline             ; ?> here.</p>
</<?= echo $element; ?>>`);
    });
});
//# sourceMappingURL=formatter_pint_inline_php.test.js.map