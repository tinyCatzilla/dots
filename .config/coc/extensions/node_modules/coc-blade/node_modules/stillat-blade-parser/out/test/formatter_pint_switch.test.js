"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../formatting/prettier/utils");
suite('Pint Transformer: Switch Statements', () => {
    test('pint: it can format simple switch statements', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`
@switch($i)
    @case(1)
        First case...
        @break
    @case(2)
        Second case...
        @break
    @default



        Default case...
@endswitch`).trim(), `@switch($i)
    @case(1)
        First case...

        @break
    @case(2)
        Second case...

        @break
    @default
        Default case...
@endswitch`);
    });
    test('pint: it can format leading switch nodes', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`
@switch($i)
{{-- Leading node test. --}}

<p>Test {{ $title}} 
</p>
@case(1)
First case...
@break
@case(2)
Second case...
@break
@default



Default case...
@endswitch`).trim(), `@switch($i)
    {{-- Leading node test. --}}

    <p>Test {{ $title }}</p>
    @case(1)
        First case...

        @break
    @case(2)
        Second case...

        @break
    @default
        Default case...
@endswitch`);
    });
    test('pint: it can format switch with embedded HTML', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`
            @switch($i)
            {{-- Leading node test. --}}
            
            <p>Test {{ $title}} 
            </p>
            @case(1)
            <p>First case...</p>
            @break
            @case(2)
            <p>Second case...</p>
            @break
            @default
            
            
            
            <p>Default case...</p>
            @endswitch`).trim(), `@switch($i)
    {{-- Leading node test. --}}

    <p>Test {{ $title }}</p>
    @case(1)
        <p>First case...</p>

        @break
    @case(2)
        <p>Second case...</p>

        @break
    @default
        <p>Default case...</p>
@endswitch`);
    });
    test('pint: it can format switch without breaks', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`
            @switch($i)
            
            @case(1)
            <p>First case...</p>
            @case(2)
            <p>Second case...</p>
            @default
            
            <p>Default case...</p>
            @endswitch`).trim(), `@switch($i)
    @case(1)
        <p>First case...</p>
    @case(2)
        <p>Second case...</p>
    @default
        <p>Default case...</p>
@endswitch`);
    });
    test('pint: it can format switch without default', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`
            @switch($i)
            
            @case(1)
            <p>First case...</p>
            @case(2)
            <p>Second case...</p>
            @endswitch`).trim(), `@switch($i)
    @case(1)
        <p>First case...</p>
    @case(2)
        <p>Second case...</p>
@endswitch`);
    });
    test('pint: it can format switch with no cases', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`
            @switch($i)
            <div>
            <p>Just testing
            </p>
            </div>
            @endswitch`).trim(), `@switch($i)
    <div>
        <p>Just testing</p>
    </div>
@endswitch`);
    });
    test('pint: it can format switch with just default', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`
            @switch($i)
            
                                    @default
                                        <p>Default case...</p>
            @endswitch`).trim(), `@switch($i)
    @default
        <p>Default case...</p>
@endswitch`);
    });
    test('pint: it can wrap to next line', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`@switch($i)
            {{-- Leading node test. --}}
            
            <p>Test {{ $title}} 
            </p>
            @case(1) <p>First case...</p> @break
            @case(2) <p>Second case...</p>
            @break @default 
            
            
            <p>Default case...</p>
            @endswitch`).trim(), `@switch($i)
    {{-- Leading node test. --}}

    <p>Test {{ $title }}</p>
    @case(1)
        <p>First case...</p>

        @break
    @case(2)
        <p>Second case...</p>

        @break 
    @default
        <p>Default case...</p>
@endswitch`);
    });
});
//# sourceMappingURL=formatter_pint_switch.test.js.map