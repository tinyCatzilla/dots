"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('For Else Nodes', () => {
    test('it can parse forelse with empty', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@forelse ($users as $user)
<li>{{ $user->name }}</li>
@empty
<p>No users</p>
@endforelse`).getRenderNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.ForElseNode, nodes[0]);
        const forElse = nodes[0];
        (0, assertions_1.assertNotNull)(forElse.elseNode);
        (0, assertions_1.assertCount)(3, forElse.truthNodes);
        (0, assertions_1.assertCount)(1, forElse.falseNodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, forElse.falseNodes[0]);
        (0, assertions_1.assertLiteralContent)("\n<p>No users</p>\n", forElse.falseNodes[0]);
        const truthNodes = forElse.truthNodes;
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, truthNodes[0]);
        (0, assertions_1.assertLiteralContent)("\n<li>", truthNodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, truthNodes[1]);
        const tDirective = truthNodes[1];
        assert.strictEqual(tDirective.content, " $user->name ");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, truthNodes[2]);
        (0, assertions_1.assertLiteralContent)("</li>\n", truthNodes[2]);
    });
    test('it parses without empty', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@forelse ($users as $user)
<li>{{ $user->name }}</li>
<p>No users</p>
@endforelse`).getRenderNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.ForElseNode, nodes[0]);
        const forElse = nodes[0];
        (0, assertions_1.assertNull)(forElse.elseNode);
        (0, assertions_1.assertCount)(0, forElse.falseNodes);
        (0, assertions_1.assertCount)(3, forElse.truthNodes);
        const children = forElse.truthNodes;
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, children[0]);
        (0, assertions_1.assertLiteralContent)("\n<li>", children[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, children[1]);
        const bladeEcho = children[1];
        assert.strictEqual(bladeEcho.sourceContent, "{{ $user->name }}");
        assert.strictEqual(bladeEcho.content, " $user->name ");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, children[2]);
        (0, assertions_1.assertLiteralContent)("</li>\n<p>No users</p>\n", children[2]);
    });
    test('nested forelse', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`
@forelse ($users as $user)
<li>{{ $user->name }}</li>

    @forelse ($users2 as $user2)
    <li>{{ $user2->name }}</li>
    @empty
    <p>No users2</p>
    @endforelse

@empty
<p>No users</p>
@endforelse`).getRenderNodes();
        (0, assertions_1.assertCount)(2, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertLiteralContent)("\n", nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.ForElseNode, nodes[1]);
        const forElseOne = nodes[1];
        (0, assertions_1.assertCount)(1, forElseOne.falseNodes);
        (0, assertions_1.assertCount)(11, forElseOne.truthNodes);
        (0, assertions_1.assertNotNull)(forElseOne.falseDocument);
        (0, assertions_1.assertNotNull)(forElseOne.truthDocument);
        const truthDocument = forElseOne.truthDocument;
        (0, assertions_1.assertCount)(5, truthDocument.renderNodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, truthDocument.renderNodes[0]);
        (0, assertions_1.assertLiteralContent)("\n<li>", truthDocument.renderNodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, truthDocument.renderNodes[1]);
        const echoOne = truthDocument.renderNodes[1];
        assert.strictEqual(echoOne.sourceContent, "{{ $user->name }}");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, truthDocument.renderNodes[2]);
        (0, assertions_1.assertLiteralContent)("</li>\n\n    ", truthDocument.renderNodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.ForElseNode, truthDocument.renderNodes[3]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, truthDocument.renderNodes[4]);
        (0, assertions_1.assertLiteralContent)("\n", truthDocument.renderNodes[4]);
        const forElseTwo = truthDocument.renderNodes[3];
        (0, assertions_1.assertCount)(1, forElseTwo.falseNodes);
        (0, assertions_1.assertCount)(3, forElseTwo.truthNodes);
        (0, assertions_1.assertNotNull)(forElseTwo.truthDocument);
        (0, assertions_1.assertNotNull)(forElseTwo.falseDocument);
        const truthDocument2 = forElseTwo.truthDocument, falseDocument2 = forElseTwo.falseDocument;
        (0, assertions_1.assertCount)(1, falseDocument2.renderNodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, falseDocument2.renderNodes[0]);
        (0, assertions_1.assertLiteralContent)("\n    <p>No users2</p>\n    ", falseDocument2.renderNodes[0]);
        (0, assertions_1.assertCount)(3, truthDocument2.renderNodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, truthDocument2.renderNodes[0]);
        (0, assertions_1.assertLiteralContent)("\n    <li>", truthDocument2.renderNodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, truthDocument2.renderNodes[1]);
        const echo2 = truthDocument2.renderNodes[1];
        assert.strictEqual(echo2.sourceContent, "{{ $user2->name }}");
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, truthDocument2.renderNodes[2]);
        (0, assertions_1.assertLiteralContent)("</li>\n    ", truthDocument2.renderNodes[2]);
    });
});
//# sourceMappingURL=forelse.test.js.map