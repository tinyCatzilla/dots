"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FragmentPositionAnalyzer = void 0;
const nodes_1 = require("../nodes/nodes");
class FragmentPositionAnalyzer {
    constructor(document, fragments) {
        this.documentParser = document;
        this.fragmentsParser = fragments;
    }
    doesContainFragments(directive) {
        var _a, _b, _c, _d, _e;
        const startIndex = (_b = (_a = directive.endPosition) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : 0, endIndex = (_e = (_d = (_c = directive.isClosedBy) === null || _c === void 0 ? void 0 : _c.startPosition) === null || _d === void 0 ? void 0 : _d.index) !== null && _e !== void 0 ? _e : 0;
        return this.fragmentsParser.getFragmentsBetween(startIndex, endIndex).length > 0;
    }
    analyze() {
        const allNodes = this.documentParser.getNodes();
        if (!this.fragmentsParser.hasFragments()) {
            return;
        }
        this.fragmentsParser.getFragments().forEach((fragment) => {
            const lowerName = fragment.name.toLowerCase();
            if (fragment.isClosingFragment == false && fragment.isSelfClosing == false && (lowerName == 'script' || lowerName == 'style')) {
                const closingFragment = this.fragmentsParser.getClosingFragmentAfter(fragment);
                if (closingFragment == null) {
                    return;
                }
                if (fragment.endPosition != null && closingFragment.startPosition != null) {
                    const containedNodes = this.documentParser.getNodesBetween(fragment.endPosition, closingFragment.startPosition);
                    containedNodes.forEach((node) => {
                        if (node instanceof nodes_1.ConditionNode ||
                            node instanceof nodes_1.ForElseNode ||
                            node instanceof nodes_1.BladeComponentNode ||
                            node instanceof nodes_1.SwitchStatementNode) {
                            fragment.containsStructures = true;
                        }
                        else if (node instanceof nodes_1.DirectiveNode) {
                            if (node.isClosedBy != null) {
                                fragment.containsStructures = true;
                            }
                        }
                        if (lowerName == 'style') {
                            node.isInStyleTag = true;
                        }
                        else {
                            node.isInScriptTag = true;
                        }
                    });
                }
            }
        });
        allNodes.forEach((node) => {
            var _a, _b, _c, _d, _e, _f;
            if (node instanceof nodes_1.LiteralNode) {
                return;
            }
            if (node.startPosition == null) {
                return;
            }
            if (node instanceof nodes_1.DirectiveNode && !node.isClosingDirective && node.isClosedBy != null) {
                node.containsAnyFragments = this.doesContainFragments(node);
            }
            const fragment = this.fragmentsParser.getFragmentContaining(node.startPosition);
            if (fragment == null) {
                return;
            }
            node.fragment = fragment;
            const startDelta = node.startPosition.index - ((_b = (_a = fragment.startPosition) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : 0);
            if (startDelta <= 3) {
                node.fragmentPosition = nodes_1.FragmentPosition.IsDynamicFragmentName;
                return;
            }
            if (fragment.parameters.length == 0) {
                node.fragmentPosition = nodes_1.FragmentPosition.InsideFragment;
                return;
            }
            let resolvedParam = false;
            for (let i = 0; i < fragment.parameters.length; i++) {
                const thisParam = fragment.parameters[i];
                if (((_d = (_c = thisParam.startPosition) === null || _c === void 0 ? void 0 : _c.index) !== null && _d !== void 0 ? _d : 0) < node.startPosition.index && ((_f = (_e = thisParam.endPosition) === null || _e === void 0 ? void 0 : _e.index) !== null && _f !== void 0 ? _f : 0) > node.startPosition.index) {
                    node.fragmentPosition = nodes_1.FragmentPosition.InsideFragmentParameter;
                    resolvedParam = true;
                    break;
                }
            }
            if (!resolvedParam) {
                node.fragmentPosition = nodes_1.FragmentPosition.InsideFragment;
            }
        });
    }
}
exports.FragmentPositionAnalyzer = FragmentPositionAnalyzer;
//# sourceMappingURL=fragmentPositionAnalyzer.js.map