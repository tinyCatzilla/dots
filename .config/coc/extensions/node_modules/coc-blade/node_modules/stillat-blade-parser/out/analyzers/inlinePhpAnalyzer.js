"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlinePhpAnalyzer = void 0;
const nodes_1 = require("../nodes/nodes");
const stringUtilities_1 = require("../utilities/stringUtilities");
class InlinePhpAnalyzer {
    static analyze(nodes) {
        nodes.forEach((node) => {
            var _a, _b;
            if (node instanceof nodes_1.InlinePhpNode) {
                if (((_a = node.startPosition) === null || _a === void 0 ? void 0 : _a.line) != ((_b = node.endPosition) === null || _b === void 0 ? void 0 : _b.line)) {
                    return;
                }
                let isRightInline = false, isLeftInline = false;
                if (node.nextNode == null) {
                    isRightInline = true;
                }
                else if (node.nextNode instanceof nodes_1.LiteralNode) {
                    const firstLine = stringUtilities_1.StringUtilities.getFirstLine(node.nextNode.content);
                    if (stringUtilities_1.StringUtilities.trimLeft(firstLine, " \t").startsWith("\n") == false && firstLine.trim().length > 0) {
                        isRightInline = true;
                    }
                }
                if (node.prevNode == null) {
                    isLeftInline = true;
                }
                else if (node.prevNode instanceof nodes_1.LiteralNode) {
                    const lastLine = stringUtilities_1.StringUtilities.getLastLine(node.prevNode.content);
                    if (stringUtilities_1.StringUtilities.trimRight(lastLine, " \t").endsWith("\n") == false && lastLine.trim().length > 0) {
                        isLeftInline = true;
                    }
                }
                node.isInline = (isRightInline && isLeftInline);
            }
        });
    }
}
exports.InlinePhpAnalyzer = InlinePhpAnalyzer;
//# sourceMappingURL=inlinePhpAnalyzer.js.map