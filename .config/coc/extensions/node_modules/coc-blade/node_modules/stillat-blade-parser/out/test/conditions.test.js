"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('Conditions Test', () => {
    test('it can parse basic conditions', () => {
        var _a, _b, _c;
        const nodes = bladeDocument_1.BladeDocument.fromText(`before
@if (count($records) === 1)
    I have one record!
@elseif (count($records) > 1)
    I have multiple records!
@else
    I don't have any records!
@endif after`).getRenderNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.ConditionNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)("before\n", nodes[0]);
        (0, assertions_1.assertLiteralContent)("after", nodes[2]);
        const condition = nodes[1];
        (0, assertions_1.assertCount)(3, condition.chain);
        assert.strictEqual(condition.chain[0], 1);
        assert.strictEqual(condition.chain[1], 3);
        assert.strictEqual(condition.chain[2], 5);
        (0, assertions_1.assertCount)(3, condition.logicBranches);
        (0, assertions_1.assertInstanceOf)(nodes_1.ExecutionBranchNode, condition.logicBranches[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.ExecutionBranchNode, condition.logicBranches[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.ExecutionBranchNode, condition.logicBranches[2]);
        const branch1 = condition.logicBranches[0], branch2 = condition.logicBranches[1], branch3 = condition.logicBranches[2];
        (0, assertions_1.assertNotNull)(branch1.head);
        (0, assertions_1.assertNotNull)(branch2.head);
        (0, assertions_1.assertNotNull)(branch3.head);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, branch1.head);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, branch2.head);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, branch3.head);
        const c1 = (_a = branch1.head) === null || _a === void 0 ? void 0 : _a.children, c2 = (_b = branch2.head) === null || _b === void 0 ? void 0 : _b.children, c3 = (_c = branch3.head) === null || _c === void 0 ? void 0 : _c.children;
        (0, assertions_1.assertCount)(2, c1);
        (0, assertions_1.assertCount)(2, c2);
        (0, assertions_1.assertCount)(2, c3);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c1[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, c1[1]);
        (0, assertions_1.assertLiteralContent)("\n    I have one record!\n", c1[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c2[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, c2[1]);
        (0, assertions_1.assertLiteralContent)("\n    I have multiple records!\n", c2[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c3[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, c3[1]);
        (0, assertions_1.assertLiteralContent)("\n    I don't have any records!\n", c3[0]);
    });
    test('it can detect custom conditions', () => {
        var _a, _b, _c;
        const nodes = bladeDocument_1.BladeDocument.fromText(`@disk('local')
<!-- The application is using the local disk... -->
@elsedisk('s3')
<!-- The application is using the s3 disk... -->
@else
<!-- The application is using some other disk... -->
@enddisk`).getRenderNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.ConditionNode, nodes[0]);
        const condition = nodes[0];
        (0, assertions_1.assertCount)(3, condition.chain);
        assert.strictEqual(condition.chain[0], 0);
        assert.strictEqual(condition.chain[1], 2);
        assert.strictEqual(condition.chain[2], 4);
        const branch1 = condition.logicBranches[0], branch2 = condition.logicBranches[1], branch3 = condition.logicBranches[2];
        (0, assertions_1.assertNotNull)(branch1.head);
        (0, assertions_1.assertNotNull)(branch2.head);
        (0, assertions_1.assertNotNull)(branch3.head);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, branch1.head);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, branch2.head);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, branch3.head);
        const c1 = (_a = branch1.head) === null || _a === void 0 ? void 0 : _a.children, c2 = (_b = branch2.head) === null || _b === void 0 ? void 0 : _b.children, c3 = (_c = branch3.head) === null || _c === void 0 ? void 0 : _c.children;
        (0, assertions_1.assertCount)(2, c1);
        (0, assertions_1.assertCount)(2, c2);
        (0, assertions_1.assertCount)(2, c3);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c1[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, c1[1]);
        (0, assertions_1.assertLiteralContent)("\n<!-- The application is using the local disk... -->\n", c1[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c2[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, c2[1]);
        (0, assertions_1.assertLiteralContent)("\n<!-- The application is using the s3 disk... -->\n", c2[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, c3[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, c3[1]);
        (0, assertions_1.assertLiteralContent)("\n<!-- The application is using some other disk... -->\n", c3[0]);
    });
    test('it can parse unless', () => {
        var _a;
        const nodes = bladeDocument_1.BladeDocument.fromText(`@unless (Auth::check())
You are not signed in.
@endunless`).getRenderNodes();
        (0, assertions_1.assertCount)(1, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.ConditionNode, nodes[0]);
        const cond = nodes[0];
        (0, assertions_1.assertCount)(1, cond.logicBranches);
        const branchOne = cond.logicBranches[0];
        (0, assertions_1.assertCount)(2, branchOne.nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, branchOne.nodes[0]);
        (0, assertions_1.assertLiteralContent)("\nYou are not signed in.\n", branchOne.nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, branchOne.nodes[1]);
        (0, assertions_1.assertNotNull)(branchOne.childDocument);
        assert.strictEqual((_a = branchOne.childDocument) === null || _a === void 0 ? void 0 : _a.content, "\nYou are not signed in.\n");
    });
});
//# sourceMappingURL=conditions.test.js.map