"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentFormatter = void 0;
const bladeDocument_1 = require("../document/bladeDocument");
class DocumentFormatter {
    constructor() {
        this.filePath = '';
        this.formattingOptions = null;
        this.transformOptions = null;
        this.htmlFormatter = null;
        this.phpFormatter = null;
        this.blockPhpFormatter = null;
        this.phpTagFormatter = null;
        this.jsonFormatter = null;
        this.preFormatter = null;
        this.removedAttributes = new Map();
    }
    withRemovedAttributes(attributes) {
        this.removedAttributes = attributes;
        return this;
    }
    withTransformOptions(options) {
        this.transformOptions = options;
        return this;
    }
    withFilePath(filePath) {
        this.filePath = filePath;
        return this;
    }
    withFormattingOptions(options) {
        this.formattingOptions = options;
        return this;
    }
    withPreFormatter(formatter) {
        this.preFormatter = formatter;
        return this;
    }
    withHtmlFormatter(formatter) {
        this.htmlFormatter = formatter;
        return this;
    }
    withPhpFormatter(formatter) {
        this.phpFormatter = formatter;
        return this;
    }
    withBlockPhpFormatter(formatter) {
        this.blockPhpFormatter = formatter;
        return this;
    }
    withPhpTagFormatter(formatter) {
        this.phpTagFormatter = formatter;
        return this;
    }
    withJsonFormatter(formatter) {
        this.jsonFormatter = formatter;
        return this;
    }
    formatText(text) {
        return this.formatDocument(bladeDocument_1.BladeDocument.fromText(text));
    }
    formatDocument(document, shadowDocument = null) {
        if (this.preFormatter != null) {
            const preformatResult = this.preFormatter(document);
            if (preformatResult != null) {
                return preformatResult;
            }
        }
        if (this.htmlFormatter == null || document.isValid() == false) {
            return document.getOriginalContent();
        }
        document.transform()
            .withShadowDocument(shadowDocument)
            .withFilePath(this.filePath)
            .withBlockPhpFormatter(this.blockPhpFormatter)
            .withPhpFormatter(this.phpFormatter)
            .withPhpTagFormatter(this.phpTagFormatter)
            .withJsonFormatter(this.jsonFormatter)
            .withRemovedAttributes(this.removedAttributes);
        document.transform().setFormattingOptions(this.formattingOptions);
        if (this.transformOptions != null) {
            document.transform().withOptions(this.transformOptions);
        }
        const structure = document.transform().toStructure(), formatted = this.htmlFormatter(structure);
        return document.transform().fromStructure(formatted);
    }
}
exports.DocumentFormatter = DocumentFormatter;
//# sourceMappingURL=documentFormatter.js.map