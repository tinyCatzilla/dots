"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: tables_resources_views_components_actions_action_blade_php', () => {
    test('pint: it can format tables_resources_views_components_actions_action_blade_php', () => {
        const input = `@props([
    'action',
    'component',
    'icon' => null,
])

@php
    $isDisabled = $action->isDisabled();
    $url = $action->getUrl();
@endphp

<x-dynamic-component
    :component="$component"
    :attributes="\\Filament\\Support\\prepare_inherited_attributes($attributes)->merge($action->getExtraAttributes(), escape: false)"
    :tag="$url ? 'a' : 'button'"
    :wire:click="$action->getLivewireClickHandler()"
    :href="$isDisabled ? null : $url"
    :target="($url && $action->shouldOpenUrlInNewTab()) ? '_blank' : null"
    :disabled="$isDisabled"
    :color="$action->getColor()"
    :tooltip="$action->getTooltip()"
    :icon="$icon ?? $action->getIcon()"
    :size="$action->getSize()"
    dusk="filament.tables.action.{{ $action->getName() }}"
>
    {{ $slot }}
</x-dynamic-component>
`;
        const output = `@props([
    'action',
    'component',
    'icon' => null,
])

@php
    $isDisabled = $action->isDisabled();
    $url = $action->getUrl();
@endphp

<x-dynamic-component
    :component="$component"
    :attributes="\\Filament\\Support\\prepare_inherited_attributes($attributes)->merge($action->getExtraAttributes(), escape: false)"
    :tag="$url ? 'a' : 'button'"
    :wire:click="$action->getLivewireClickHandler()"
    :href="$isDisabled ? null : $url"
    :target="($url && $action->shouldOpenUrlInNewTab()) ? '_blank' : null"
    :disabled="$isDisabled"
    :color="$action->getColor()"
    :tooltip="$action->getTooltip()"
    :icon="$icon ?? $action->getIcon()"
    :size="$action->getSize()"
    dusk="filament.tables.action.{{ $action->getName() }}"
>
    {{ $slot }}
</x-dynamic-component>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=tables_resources_views_components_actions_action_blade_php.test.js.map