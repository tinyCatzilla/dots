"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('Basic Directive Pairing', () => {
    test('it can pair directives', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@isset
Test
@endisset


@isset


    @isset
    Test
    @endisset

    Test
@endisset

@for
something
@endfor`).getAllNodes();
        (0, assertions_1.assertCount)(15, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[3]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[4]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[5]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[6]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[7]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[8]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[9]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[10]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[11]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[12]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[13]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[14]);
        const d1 = nodes[0], // isset
        d2 = nodes[2], // endisset
        d3 = nodes[4], // isset
        d4 = nodes[6], // isset
        d5 = nodes[8], // endisset
        d6 = nodes[10], // endisset
        d7 = nodes[12], // for
        d8 = nodes[14]; //endfor
        assert.strictEqual(d1.isClosedBy, d2);
        assert.strictEqual(d2.isOpenedBy, d1);
        assert.strictEqual(d3.isClosedBy, d6);
        assert.strictEqual(d6.isOpenedBy, d3);
        assert.strictEqual(d4.isClosedBy, d5);
        assert.strictEqual(d5.isOpenedBy, d4);
        assert.strictEqual(d7.isClosedBy, d8);
        assert.strictEqual(d8.isOpenedBy, d7);
    });
});
//# sourceMappingURL=basic_pairing.test.js.map