"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const phpCompiler_1 = require("../compiler/phpCompiler");
suite('Blade Echo', () => {
    test('echos are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('{!!$name!!}'), '<?php echo $name; ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('{!! $name !!}'), '<?php echo $name; ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`{!!  
                $name
                    !!}`), '<?php echo $name; ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('{{{$name}}}'), '<?php echo e($name); ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('{{$name}}'), '<?php echo e($name); ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('{{ $name }}'), '<?php echo e($name); ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`{{
                    $name
                }}`), '<?php echo e($name); ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('{{ \\$name }}'), '<?php echo e(\\$name); ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('{{ "Hello world or foo" }}'), '<?php echo e("Hello world or foo"); ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('{{"Hello world or foo"}}'), '<?php echo e("Hello world or foo"); ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('{{$foo + $or + $baz}}'), '<?php echo e($foo + $or + $baz); ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`{{
                    "Hello world or foo"
            }}`), '<?php echo e("Hello world or foo"); ?>');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`{{ myFunc('foo or bar') }}`), `<?php echo e(myFunc('foo or bar')); ?>`);
    });
    test('escaped with at echos are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('@{{$name}}'), '{{$name}}');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('@{{ $name }}'), '{{ $name }}');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@{{ 
                $name 
            }}`), `{{ 
                $name 
            }}`);
    });
});
//# sourceMappingURL=compiler_echo.test.js.map