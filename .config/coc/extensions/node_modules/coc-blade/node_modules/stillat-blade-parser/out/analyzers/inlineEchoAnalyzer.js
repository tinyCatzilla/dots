"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InlineEchoAnalyzer = void 0;
const nodes_1 = require("../nodes/nodes");
const stringUtilities_1 = require("../utilities/stringUtilities");
class InlineEchoAnalyzer {
    static analyze(nodes) {
        nodes.forEach((node) => {
            var _a, _b, _c, _d;
            if (node instanceof nodes_1.BladeEchoNode) {
                let isRightInline = false, isLeftInline = false;
                if (node.nextNode == null) {
                    isRightInline = true;
                }
                else if (node.nextNode instanceof nodes_1.LiteralNode) {
                    const firstLine = stringUtilities_1.StringUtilities.getFirstLine(node.nextNode.content);
                    if (stringUtilities_1.StringUtilities.trimLeft(firstLine, " \t").startsWith("\n") == false && firstLine.trim().length > 0) {
                        isRightInline = true;
                    }
                    else {
                        if (node.nextNode.nextNode instanceof nodes_1.BladeEchoNode) {
                            if (((_a = node.nextNode.nextNode.startPosition) === null || _a === void 0 ? void 0 : _a.line) == ((_b = node.endPosition) === null || _b === void 0 ? void 0 : _b.line)) {
                                isRightInline = true;
                            }
                        }
                    }
                }
                else if (node.nextNode instanceof nodes_1.BladeEchoNode) {
                    isRightInline = true;
                }
                if (node.prevNode == null) {
                    isLeftInline = true;
                }
                else if (node.prevNode instanceof nodes_1.LiteralNode) {
                    const lastLine = stringUtilities_1.StringUtilities.getLastLine(node.prevNode.content);
                    if (stringUtilities_1.StringUtilities.trimRight(lastLine, " \t").endsWith("\n") == false && lastLine.trim().length > 0) {
                        isLeftInline = true;
                    }
                    else {
                        if (node.prevNode.prevNode instanceof nodes_1.BladeEchoNode) {
                            if (((_c = node.prevNode.prevNode.endPosition) === null || _c === void 0 ? void 0 : _c.line) == ((_d = node.startPosition) === null || _d === void 0 ? void 0 : _d.line)) {
                                isLeftInline = true;
                            }
                        }
                    }
                }
                else if (node.prevNode instanceof nodes_1.BladeEchoNode) {
                    isLeftInline = true;
                }
                node.isInlineEcho = (isRightInline || isLeftInline);
            }
        });
    }
}
exports.InlineEchoAnalyzer = InlineEchoAnalyzer;
//# sourceMappingURL=inlineEchoAnalyzer.js.map