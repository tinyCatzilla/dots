"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatBladeFilesInDirecetory = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const optionDiscovery_1 = require("../formatting/optionDiscovery");
const utils_1 = require("../formatting/prettier/utils");
function getBladePhpFiles(directory) {
    const bladePhpFiles = [];
    function traverseDirectory(dir) {
        const files = fs.readdirSync(dir);
        for (const file of files) {
            const filePath = path.join(dir, file);
            const fileStat = fs.statSync(filePath);
            if (fileStat.isDirectory()) {
                traverseDirectory(filePath);
            }
            else if (file.endsWith('.blade.php')) {
                bladePhpFiles.push(filePath);
            }
        }
    }
    traverseDirectory(directory);
    return bladePhpFiles;
}
function formatBladeFilesInDirecetory(directory) {
    const bladeFiles = getBladePhpFiles(directory);
    let formatted = 0;
    bladeFiles.forEach((file) => {
        try {
            formatted += 1;
            console.log(`Formatting ${formatted}/${bladeFiles.length}: ${file}`);
            const contents = fs.readFileSync(file, { encoding: 'utf8' });
            (0, optionDiscovery_1.setPrettierFilePath)(file);
            fs.writeFileSync(file, (0, utils_1.formatBladeStringWithPint)(contents), { encoding: 'utf8' });
        }
        catch (err) {
            console.error(err);
        }
    });
}
exports.formatBladeFilesInDirecetory = formatBladeFilesInDirecetory;
//# sourceMappingURL=validationUtilities.js.map