"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../formatting/prettier/utils");
suite('Pint Transformer: Conditional Element Echo', () => {
    test('pint: it detects and formats conditional elements', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`                        <{{ $element }} class="something">
            <div><p>SOme {{ $element }} text</p>
        </div>
                </{{ $element }}>`).trim(), `<{{ $element }} class="something">
    <div><p>SOme {{ $element }} text</p></div>
</{{ $element }}>`);
    });
    test('pint: it can format nested conditional elements', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`                        <{{ $element }} class="something">
            <div><p>SOme {{ $element }} text</p>
                                    <{{ $element }} class="something">
            <div><p>SOme {{ $element }} text</p>
        </div>
                </{{ $element }}>
        </div>
                </{{ $element }}>`).trim(), `<{{ $element }} class="something">
    <div>
        <p>SOme {{ $element }} text</p>
        <{{ $element }} class="something">
            <div><p>SOme {{ $element }} text</p></div>
        </{{ $element }}>
    </div>
</{{ $element }}>`);
    });
    test('pint: it can format dynamic elements with {{{', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`                        <{{{ $element }}} class="something">
            <div><p>SOme {{{ $element }}} text</p>
                                    <{{{ $element }}} class="something">
            <div><p>SOme {{{ $element }}} text</p>
        </div>
                </{{{ $element }}}>
        </div>
                </{{{ $element }}}>`).trim(), `<{{{ $element }}} class="something">
    <div>
        <p>SOme {{{ $element }}} text</p>
        <{{{ $element }}} class="something">
            <div><p>SOme {{{ $element }}} text</p></div>
        </{{{ $element }}}>
    </div>
</{{{ $element }}}>`);
    });
    test('pint: it can format dynamic elements with {!!', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`                        <{!! $element !!} class="something">
    <div><p>SOme {!! $element !!} text</p>
                            <{!! $element !!} class="something">
    <div><p>SOme {!! $element !!} text</p>
</div>
        </{!! $element !!}>
</div>
        </{!! $element !!}>`).trim(), `<{!! $element !!} class="something">
    <div>
        <p>SOme {!! $element !!} text</p>
        <{!! $element !!} class="something">
            <div><p>SOme {!! $element !!} text</p></div>
        </{!! $element !!}>
    </div>
</{!! $element !!}>`);
    });
});
//# sourceMappingURL=formatter_pint_conditional_element_echo.test.js.map