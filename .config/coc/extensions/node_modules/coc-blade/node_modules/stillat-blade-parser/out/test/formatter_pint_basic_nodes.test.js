"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../formatting/prettier/utils");
suite('Pint Transformer: Basic Nodes', () => {
    test('pint: it formats echos', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)('{{ $title }}').trim(), "{{ $title }}");
    });
    test('pint: it formats echo variant', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)('{{{ $title }}}').trim(), "{{{ $title }}}");
    });
    test('pint: it formats escaped echos', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)('{!! $title !!}').trim(), "{!! $title !!}");
    });
    test('pint: it formats simple comments', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)('{{-- Comment. --}}').trim(), "{{-- Comment. --}}");
    });
    test('pint: it formats block comments', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`{{--
                Block Comment. --}}`).trim(), `{{--
    Block Comment.
--}}`);
    });
    test('pint: it formats block comments with', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`{{--
 Block Comment.
 with many lines and with <stuff></stuff> --}}`), `{{--
    Block Comment.
    with many lines and with <stuff></stuff>
--}}
`);
    });
    test('pint: block comments inside a div', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeStringWithPint)(`<div>
        {{--
 Block Comment.
 with many lines and with <stuff></stuff> --}}
        </div>`).trim(), `<div>
    {{--
        Block Comment.
        with many lines and with <stuff></stuff>
    --}}
</div>`);
    });
});
//# sourceMappingURL=formatter_pint_basic_nodes.test.js.map