"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: notifications_resources_views_components_icon_blade_php', () => {
    test('pint: it can format notifications_resources_views_components_icon_blade_php', () => {
        const input = `@props([
    'icon',
    'color',
])

<x-dynamic-component
    :component="$icon"
    :class="\\Illuminate\\Support\\Arr::toCssClasses([
        'filament-notifications-icon h-6 w-6',
        match ($color) {
            'success' => 'text-success-400',
            'warning' => 'text-warning-400',
            'danger' => 'text-danger-400',
            'primary' => 'text-primary-400',
            'secondary' => 'text-gray-400',
        },
    ])"
/>
`;
        const output = `@props([
    'icon',
    'color',
])

<x-dynamic-component
    :component="$icon"
    :class="
        \\Illuminate\\Support\\Arr::toCssClasses([
            'filament-notifications-icon h-6 w-6',
            match ($color) {
                'success' => 'text-success-400',
                'warning' => 'text-warning-400',
                'danger' => 'text-danger-400',
                'primary' => 'text-primary-400',
                'secondary' => 'text-gray-400',
            },
        ])
    "
/>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=notifications_resources_views_components_icon_blade_php.test.js.map