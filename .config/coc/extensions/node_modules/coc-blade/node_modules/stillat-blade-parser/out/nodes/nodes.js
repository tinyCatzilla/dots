"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrayNode = exports.ArrayElementNode = exports.ArrayKeyValueNode = exports.ArrayElementSeparatorNode = exports.ArrayEndNode = exports.ArrayStartNode = exports.OperatorNode = exports.BladeVerbatimNode = exports.BladeStaticNode = exports.BladePhpNode = exports.BladeEntitiesEchoNode = exports.BladeEscapedEchoNode = exports.BladeEchoNode = exports.ForElseNode = exports.SwitchCaseNode = exports.SwitchStatementNode = exports.ConditionNode = exports.ExecutionBranchNode = exports.DirectiveNode = exports.ShorthandInlinePhpNode = exports.InlinePhpNode = exports.BladeCommentNode = exports.LiteralNode = exports.BladeComponentNode = exports.ComponentNameNode = exports.ParameterNode = exports.ParameterType = exports.AbstractNode = exports.FragmentParameterNode = exports.FragmentNode = exports.FragmentPosition = void 0;
const uuid_1 = require("uuid");
const stringUtilities_1 = require("../utilities/stringUtilities");
function newRefId() {
    return stringUtilities_1.StringUtilities.replaceAllInString((0, uuid_1.v4)(), '-', '_');
}
var FragmentPosition;
(function (FragmentPosition) {
    FragmentPosition[FragmentPosition["IsDynamicFragmentName"] = 0] = "IsDynamicFragmentName";
    FragmentPosition[FragmentPosition["InsideFragmentParameter"] = 1] = "InsideFragmentParameter";
    FragmentPosition[FragmentPosition["InsideFragment"] = 2] = "InsideFragment";
    FragmentPosition[FragmentPosition["Unresolved"] = 3] = "Unresolved";
})(FragmentPosition = exports.FragmentPosition || (exports.FragmentPosition = {}));
class FragmentNode {
    constructor() {
        this.startPosition = null;
        this.endPosition = null;
        this.index = 0;
        this.embeddedIndex = 0;
        this.refId = null;
        this.parameters = [];
        this.isSelfClosing = false;
        this.isClosingFragment = false;
        this.name = '';
        this.containsStructures = false;
        this.refId = newRefId();
    }
}
exports.FragmentNode = FragmentNode;
class FragmentParameterNode {
    constructor() {
        this.startPosition = null;
        this.endPosition = null;
    }
}
exports.FragmentParameterNode = FragmentParameterNode;
class AbstractNode {
    constructor() {
        this.parser = null;
        this.refId = null;
        this.startPosition = null;
        this.endPosition = null;
        this.sourceContent = '';
        this.index = 0;
        this.parentIndex = -1;
        this.parentTypeIndex = -1;
        this.parent = null;
        this.originalAbstractNode = null;
        this.fragment = null;
        this.fragmentPosition = FragmentPosition.Unresolved;
        this.containsAnyFragments = false;
        this.containsChildStructures = false;
        this.offset = null;
        this.errors = [];
        this.isInScriptTag = false;
        this.isInStyleTag = false;
        this.prevNode = null;
        this.nextNode = null;
        this.refId = newRefId();
    }
    isPartOfHtmlTag() {
        return this.fragmentPosition == FragmentPosition.InsideFragment ||
            this.fragmentPosition == FragmentPosition.InsideFragmentParameter ||
            this.fragmentPosition == FragmentPosition.IsDynamicFragmentName;
    }
    isEmbedded() {
        return this.isInScriptTag || this.isInStyleTag;
    }
    hasNeighborsOnLine() {
        if (this.prevNode == null && this.nextNode == null) {
            return false;
        }
        if (this.prevNode == null || this.nextNode == null) {
            return true;
        }
        if (!(this.prevNode instanceof LiteralNode)) {
            return true;
        }
        if (!(this.nextNode instanceof LiteralNode)) {
            return true;
        }
        const prevContent = this.prevNode.content, nextContent = this.nextNode.content, prevLines = stringUtilities_1.StringUtilities.breakByNewLine(prevContent), nextLines = stringUtilities_1.StringUtilities.breakByNewLine(nextContent);
        if (prevLines.length > 0 && prevLines[prevLines.length - 1].trim().length > 0) {
            return true;
        }
        if (nextLines.length > 0 && nextLines[0].trim().length > 0) {
            return true;
        }
        return false;
    }
    getErrors() {
        return this.errors;
    }
    pushError(error) {
        if (this.parent != null) {
            this.parent.pushError(error);
        }
        else {
            if (this.parser != null) {
                this.parser.pushError(error);
            }
        }
        this.errors.push(error);
    }
    relativeOffset(offset) {
        var _a, _b;
        return offset + ((_b = (_a = this.startPosition) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : 0);
    }
    withParser(parser) {
        this.parser = parser;
        return this;
    }
    getParser() {
        return this.parser;
    }
}
exports.AbstractNode = AbstractNode;
var ParameterType;
(function (ParameterType) {
    ParameterType[ParameterType["Parameter"] = 0] = "Parameter";
    ParameterType[ParameterType["Directive"] = 1] = "Directive";
    ParameterType[ParameterType["Attribute"] = 2] = "Attribute";
    ParameterType[ParameterType["InlineEcho"] = 3] = "InlineEcho";
    ParameterType[ParameterType["Comment"] = 4] = "Comment";
})(ParameterType = exports.ParameterType || (exports.ParameterType = {}));
class ParameterNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.cachedHasValidPhp = null;
        this.cachedPhpLastError = null;
        this.name = '';
        this.realName = '';
        this.value = '';
        this.terminatorStyle = '"';
        this.wrappedValue = '';
        this.content = '';
        this.type = ParameterType.Parameter;
        this.directive = null;
        this.inlineEcho = null;
        this.inlineComment = null;
        this.namePosition = null;
        this.valuePosition = null;
        this.isEscapedExpression = false;
        this.isExpression = false;
        this.overrideValue = '';
    }
    hasValidPhpExpression() {
        var _a;
        if (this.cachedHasValidPhp == null) {
            const validator = (_a = this.getParser()) === null || _a === void 0 ? void 0 : _a.getPhpValidator();
            if (validator != null) {
                this.cachedHasValidPhp = validator.isValid(this.value, false);
                this.cachedPhpLastError = validator.getLastError();
            }
            else {
                this.cachedHasValidPhp = false;
            }
        }
        return this.cachedHasValidPhp;
    }
}
exports.ParameterNode = ParameterNode;
class ComponentNameNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.name = '';
        this.inlineName = '';
    }
}
exports.ComponentNameNode = ComponentNameNode;
class BladeComponentNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.name = null;
        this.isClosingTag = false;
        this.isSelfClosing = false;
        this.innerContent = '';
        this.parameterContent = '';
        this.receivesAttributeBag = false;
        this.hasParameters = false;
        this.parameters = [];
        this.isOpenedBy = null;
        this.isClosedBy = null;
        this.isShorthandSlot = false;
    }
    getComponentName() {
        if (this.name == null) {
            return '';
        }
        let name = this.name.name.trim();
        if (this.name.inlineName.trim().length > 0) {
            name += ':' + this.name.inlineName.trim();
        }
        return name;
    }
    hasParameter(name) {
        for (let i = 0; i < this.parameters.length; i++) {
            if (this.parameters[i].realName == name) {
                return true;
            }
        }
        return false;
    }
    getParameter(name) {
        for (let i = 0; i < this.parameters.length; i++) {
            if (this.parameters[i].realName == name) {
                return this.parameters[i];
            }
        }
        return null;
    }
    getParametersExcept(parameters) {
        return this.parameters.filter((param) => {
            return !parameters.includes(param.realName);
        });
    }
}
exports.BladeComponentNode = BladeComponentNode;
class LiteralNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.content = '';
    }
    getOutputContent() {
        let content = stringUtilities_1.StringUtilities.replaceAllInString(this.content, '@{', '{');
        content = stringUtilities_1.StringUtilities.replaceAllInString(content, '@@', '@');
        return content;
    }
}
exports.LiteralNode = LiteralNode;
class BladeCommentNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.innerContentPosition = null;
        this.innerContent = '';
    }
    isMultiline() {
        return this.sourceContent.includes("\n");
    }
}
exports.BladeCommentNode = BladeCommentNode;
class InlinePhpNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.cachedHasValidPhp = null;
        this.cachedPhpLastError = null;
        this.isInline = false;
        this.overrideContent = null;
    }
    hasValidPhp() {
        var _a;
        if (this.cachedHasValidPhp == null) {
            const validator = (_a = this.getParser()) === null || _a === void 0 ? void 0 : _a.getPhpValidator();
            if (validator != null) {
                this.cachedHasValidPhp = validator.isValid(this.sourceContent, false);
                this.cachedPhpLastError = validator.getLastError();
            }
            else {
                this.cachedHasValidPhp = false;
            }
        }
        return this.cachedHasValidPhp;
    }
    getPhpError() {
        return this.cachedPhpLastError;
    }
}
exports.InlinePhpNode = InlinePhpNode;
class ShorthandInlinePhpNode extends InlinePhpNode {
}
exports.ShorthandInlinePhpNode = ShorthandInlinePhpNode;
class DirectiveNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.name = '';
        this.directiveName = '';
        this.namePosition = null;
        this.hasDirectiveParameters = false;
        this.directiveParameters = '';
        this.overrideParams = null;
        this.directiveParametersPosition = null;
        this.children = [];
        this.childrenDocument = null;
        this.childTypeCounts = new Map();
        this._conditionParserAbandonPairing = false;
        this.hasJsonParameters = false;
        this.ref = 0;
        this.isClosedBy = null;
        this.isOpenedBy = null;
        this.isClosingDirective = false;
        this.innerContent = '';
        this.documentContent = '';
        this.nodeContent = '';
        this.cachedHasValidJson = null;
        this.cachedHasValidPhp = null;
        this.cachedPhpLastError = null;
    }
    hasValidJson() {
        if (this.hasJsonParameters == false) {
            this.cachedHasValidJson = false;
        }
        if (this.cachedHasValidJson == null) {
            try {
                let params = this.getPhpContent().trim();
                if (params.startsWith('(') && params.endsWith(')')) {
                    params = params.substring(1);
                    params = params.substring(0, params.length - 1);
                }
                JSON.parse(params);
                this.cachedHasValidJson = true;
            }
            catch (err) {
                this.cachedHasValidJson = false;
            }
        }
        return this.cachedHasValidJson;
    }
    hasValidPhp() {
        var _a;
        if (this.hasJsonParameters) {
            this.cachedHasValidPhp = false;
        }
        if (this.cachedHasValidPhp == null) {
            const validator = (_a = this.getParser()) === null || _a === void 0 ? void 0 : _a.getPhpValidator();
            if (validator != null) {
                this.cachedHasValidPhp = validator.isValid(this.getPhpContent(), true);
                this.cachedPhpLastError = validator.getLastError();
            }
            else {
                this.cachedHasValidPhp = false;
            }
        }
        return this.cachedHasValidPhp;
    }
    getPhpError() {
        return this.cachedPhpLastError;
    }
    isFirstOfType() {
        return this.parentTypeIndex == 1;
    }
    hasInnerExpression() {
        if (!this.hasDirectiveParameters) {
            return false;
        }
        return this.getInnerContent().length > 0;
    }
    getInnerContent() {
        let params = this.directiveParameters.trim().substring(1);
        params = params.substring(0, params.length - 1);
        return params;
    }
    getImmediateChildren() {
        var _a;
        const immediateChildren = [];
        for (let i = 0; i < this.children.length; i++) {
            const node = this.children[i];
            if (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.refId) == this.refId) {
                if (node == this.isClosedBy) {
                    break;
                }
                immediateChildren.push(node);
            }
        }
        return immediateChildren;
    }
    getPhpContent() {
        if (this.directiveName.toLowerCase() == 'forelse') {
            return 'foreach (' + this.getInnerContent() + '):endforeach;';
        }
        return this.directiveParameters;
    }
    getChildren() {
        if (this.isClosedBy == null) {
            return [];
        }
        const newChildren = [];
        for (let i = 0; i < this.children.length; i++) {
            const child = this.children[i];
            if (child instanceof DirectiveNode && child.refId == this.isClosedBy.refId) {
                break;
            }
            newChildren.push(child);
        }
        return newChildren;
    }
    hasChildDirectiveOfType(name) {
        const ofType = this.findFirstChildDirectiveOfType(name);
        return ofType != null;
    }
    findFirstChildDirectiveOfType(name) {
        for (let i = 0; i < this.children.length; i++) {
            const child = this.children[i];
            if (child instanceof DirectiveNode && child.directiveName == name) {
                return child;
            }
        }
        return null;
    }
    findFirstDirectChildDirectiveOfType(name) {
        for (let i = 0; i < this.children.length; i++) {
            const child = this.children[i];
            if (child instanceof DirectiveNode && child.directiveName == name) {
                if (child.parent != null && child.parent.refId == this.refId) {
                    return child;
                }
            }
        }
        return null;
    }
    findDirectivesOfType(name) {
        const directives = [];
        this.children.forEach((node) => {
            if (node instanceof DirectiveNode && node.directiveName == name) {
                directives.push(node);
            }
        });
        return directives;
    }
    findDirectChildDirectivesOfType(name) {
        const directives = [];
        this.children.forEach((node) => {
            if (node instanceof DirectiveNode && node.directiveName == name) {
                if (node.parent != null && node.parent.refId == this.refId) {
                    directives.push(node);
                }
            }
        });
        return directives;
    }
    clone() {
        const clone = new DirectiveNode();
        clone.children = [...this.children];
        clone.directiveName = this.directiveName;
        clone.directiveParameters = this.directiveParameters;
        clone.directiveParametersPosition = this.directiveParametersPosition;
        clone.documentContent = this.documentContent;
        clone.endPosition = this.endPosition;
        clone.hasDirectiveParameters = this.hasDirectiveParameters;
        clone.index = this.index;
        clone.innerContent = this.innerContent;
        clone.isClosedBy = this.isClosedBy;
        clone.isClosingDirective = this.isClosingDirective;
        clone.isOpenedBy = this.isOpenedBy;
        clone.name = this.name;
        clone.namePosition = this.namePosition;
        clone.parent = this.parent;
        clone.refId = this.refId;
        clone.sourceContent = this.sourceContent;
        clone.startPosition = this.startPosition;
        clone.overrideParams = this.overrideParams;
        const parser = this.getParser();
        if (parser != null) {
            clone.withParser(parser);
        }
        clone.originalAbstractNode = this;
        clone.containsAnyFragments = this.containsAnyFragments;
        clone.containsChildStructures = this.containsChildStructures;
        clone.isInScriptTag = this.isInScriptTag;
        clone.isInStyleTag = this.isInStyleTag;
        return clone;
    }
    getFinalClosingDirective() {
        if (this.isClosedBy == null) {
            return this;
        }
        return this.isClosedBy.getFinalClosingDirective();
    }
}
exports.DirectiveNode = DirectiveNode;
class ExecutionBranchNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.head = null;
        this.tail = null;
        this.nodes = [];
        this.childDocument = null;
        this.documentContent = '';
        this.innerContent = '';
        this.innerOffset = null;
    }
}
exports.ExecutionBranchNode = ExecutionBranchNode;
class ConditionNode extends DirectiveNode {
    constructor() {
        super(...arguments);
        this.constructedFrom = null;
        this.nodeContent = '';
        this.logicBranches = [];
        this.chain = [];
    }
    getParent() {
        if (this.logicBranches.length > 0) {
            if (this.logicBranches[0].head != null) {
                if (this.logicBranches[0].head.parent != null && this.logicBranches[0].head.parent instanceof DirectiveNode) {
                    return this.logicBranches[0].head.parent;
                }
            }
        }
        return null;
    }
}
exports.ConditionNode = ConditionNode;
class SwitchStatementNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.constructedFrom = null;
        this.nodeContent = '';
        this.originalNode = null;
        this.tail = null;
        this.cases = [];
    }
}
exports.SwitchStatementNode = SwitchStatementNode;
class SwitchCaseNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.order = 0;
        this.leadingNodes = [];
        this.leadingDocument = null;
        this.head = null;
        this.children = [];
        this.isDefault = false;
        this.isClosedBy = null;
        this.childDocument = null;
        this.documentContent = '';
        this.innerContent = '';
        this.innerOffset = null;
    }
}
exports.SwitchCaseNode = SwitchCaseNode;
class ForElseNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.constructedFrom = null;
        this.nodeContent = '';
        this.originalNode = null;
        this.truthNodes = [];
        this.elseNode = null;
        this.falseNodes = [];
        this.tailNode = null;
        this.truthDocument = null;
        this.falseDocument = null;
        this.documentContent = '';
        this.truthDocumentContent = '';
        this.truthInnerContent = '';
        this.truthDocumentOffset = null;
        this.truthInnerOffset = null;
        this.falseDocumentContent = '';
        this.falseInnerContent = '';
        this.falseDocumentOffset = null;
        this.falseInnerOffset = null;
    }
}
exports.ForElseNode = ForElseNode;
class BladeEchoNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.content = '';
        this.cachedHasValidPhp = null;
        this.cachedPhpLastError = null;
        this.isInlineEcho = false;
        this.overrideContent = null;
    }
    hasValidPhp() {
        var _a;
        if (this.cachedHasValidPhp == null) {
            const validator = (_a = this.getParser()) === null || _a === void 0 ? void 0 : _a.getPhpValidator();
            if (validator != null) {
                this.cachedHasValidPhp = validator.isValid(this.content, true);
                this.cachedPhpLastError = validator.getLastError();
            }
            else {
                this.cachedHasValidPhp = false;
            }
        }
        return this.cachedHasValidPhp;
    }
    getPhpError() {
        return this.cachedPhpLastError;
    }
}
exports.BladeEchoNode = BladeEchoNode;
class BladeEscapedEchoNode extends BladeEchoNode {
}
exports.BladeEscapedEchoNode = BladeEscapedEchoNode;
class BladeEntitiesEchoNode extends BladeEchoNode {
}
exports.BladeEntitiesEchoNode = BladeEntitiesEchoNode;
class BladePhpNode extends AbstractNode {
}
exports.BladePhpNode = BladePhpNode;
class BladeStaticNode extends AbstractNode {
}
exports.BladeStaticNode = BladeStaticNode;
class BladeVerbatimNode extends AbstractNode {
}
exports.BladeVerbatimNode = BladeVerbatimNode;
class OperatorNode extends AbstractNode {
}
exports.OperatorNode = OperatorNode;
class ArrayStartNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.tokenLength = 0;
    }
}
exports.ArrayStartNode = ArrayStartNode;
class ArrayEndNode extends AbstractNode {
}
exports.ArrayEndNode = ArrayEndNode;
class ArrayElementSeparatorNode extends AbstractNode {
}
exports.ArrayElementSeparatorNode = ArrayElementSeparatorNode;
class ArrayKeyValueNode extends AbstractNode {
}
exports.ArrayKeyValueNode = ArrayKeyValueNode;
class ArrayElementNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.key = null;
        this.value = null;
        this.isLast = false;
    }
}
exports.ArrayElementNode = ArrayElementNode;
class ArrayNode extends AbstractNode {
    constructor() {
        super(...arguments);
        this.elements = [];
        this.containsKeys = false;
        this.maxKeyLength = 0;
    }
}
exports.ArrayNode = ArrayNode;
//# sourceMappingURL=nodes.js.map