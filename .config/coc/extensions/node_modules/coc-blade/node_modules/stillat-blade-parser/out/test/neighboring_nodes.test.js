"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('Neighboring Blade Nodes', () => {
    test('it parses simple neighboring nodes', () => {
        const document = bladeDocument_1.BladeDocument.fromText('{{ $one }}{{ $two }}{{ $three }}'), nodes = document.getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[2]);
        const echoOne = nodes[0], echoTwo = nodes[1], echoThree = nodes[2];
        (0, assertions_1.assertEchoContent)(echoOne, ' $one ', '{{ $one }}');
        (0, assertions_1.assertEchoContent)(echoTwo, ' $two ', '{{ $two }}');
        (0, assertions_1.assertEchoContent)(echoThree, ' $three ', '{{ $three }}');
    });
    test('it parses simple neighboring nodes with literals', () => {
        const document = bladeDocument_1.BladeDocument.fromText('a{{ $one }}b{{ $two }}c{{ $three }}d'), nodes = document.getAllNodes();
        (0, assertions_1.assertCount)(7, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[3]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[4]);
        (0, assertions_1.assertInstanceOf)(nodes_1.BladeEchoNode, nodes[5]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[6]);
        const echoOne = nodes[1], echoTwo = nodes[3], echoThree = nodes[5];
        (0, assertions_1.assertLiteralContent)('a', nodes[0]);
        (0, assertions_1.assertEchoContent)(echoOne, ' $one ', '{{ $one }}');
        (0, assertions_1.assertLiteralContent)('b', nodes[2]);
        (0, assertions_1.assertEchoContent)(echoTwo, ' $two ', '{{ $two }}');
        (0, assertions_1.assertLiteralContent)('c', nodes[4]);
        (0, assertions_1.assertEchoContent)(echoThree, ' $three ', '{{ $three }}');
        (0, assertions_1.assertLiteralContent)('d', nodes[6]);
    });
});
//# sourceMappingURL=neighboring_nodes.test.js.map