import { BladeError } from '../errors/bladeError';
import { AbstractNode } from '../nodes/nodes';
import { Position } from '../nodes/position';
import { DocumentIndex } from './documentIndex';
import { FragmentsParser } from './fragmentsParser';
import { IndexRange } from './indexRange';
import { ParserOptions } from './parserOptions';
import { PhpValidator } from './php/phpValidator';
import { StringIterator } from './stringIterator';
export declare class DocumentParser implements StringIterator {
    static readonly K_CHAR = "char";
    static readonly K_LINE = "line";
    static readonly NewLine = "\n";
    static readonly AtChar = "@";
    static readonly Punctuation_Colon = ":";
    static readonly Punctuation_QuestionMark = "?";
    static readonly LeftParen = "(";
    static readonly RightParen = ")";
    static readonly LeftBrace = "{";
    static readonly RightBrace = "}";
    static readonly String_Terminator_DoubleQuote = "\"";
    static readonly String_Terminator_SingleQuote = "'";
    static readonly Punctuation_LessThan = "<";
    static readonly Punctuation_GreaterThan = ">";
    static readonly Punctuation_Equals = "=";
    static readonly Punctuation_Exclamation = "!";
    static readonly LeftBracket = "[";
    static readonly RightBracket = "]";
    static readonly Punctuation_Comma = ",";
    static readonly Punctuation_Minus = "-";
    static readonly Punctuation_Asterisk = "*";
    static readonly Punctuation_ForwardSlash = "/";
    static readonly Punctuation_Underscore = "_";
    static readonly String_EscapeCharacter = "\\";
    private componentParser;
    private nodes;
    private renderNodes;
    private chars;
    private currentIndex;
    private currentContent;
    private cur;
    private next;
    private prev;
    private charLen;
    private inputLen;
    private maxLine;
    private chunkSize;
    private currentChunkOffset;
    private parsingOffset;
    private isVerbatim;
    private isPhpNode;
    private bladeStartIndex;
    private bladeStartPositionIndex;
    private lastBladeEndIndex;
    private lastNode;
    private documentOffsets;
    private lineIndex;
    private lastDocumentOffsetKey;
    private content;
    private originalContent;
    private seedOffset;
    private seedStartLine;
    private shiftLine;
    private isParsingComponent;
    private shouldIgnoreStructures;
    private fragmentsParser;
    private fragmentsAnalyzer;
    private pushedErrors;
    private errors;
    private structureErrors;
    private doesHaveUnclosedIfStructures;
    private doesHaveUnclosedSwitchStructures;
    private doesHaveUnclosedComments;
    private doesHaveUnclosedRegions;
    private parserOptions;
    private phpValidator;
    private didRecoveryLogic;
    private parseFragments;
    private hasPairedStructures;
    private hasComponents;
    private hasPhpContent;
    constructor();
    advance(count: number): void;
    encounteredFailure(): void;
    withPhpValidator(validator: PhpValidator | null): this;
    getPhpValidator(): PhpValidator | null;
    withParserOptions(options: ParserOptions): this;
    getParserOptions(): ParserOptions;
    hasUnclosedIfStructures(): boolean;
    hasUnclosedSwitchStructures(): boolean;
    hasUnclosedComments(): boolean;
    hasUnclosedRegions(): boolean;
    hasUnclosedStructures(): boolean;
    getErrors(): BladeError[];
    getStructureErrors(): BladeError[];
    updateIndex(index: number): void;
    inputLength(): number;
    incrementIndex(): void;
    getCurrentIndex(): number;
    getCurrent(): string | null;
    getNext(): string | null;
    getPrev(): string | null;
    getChar(index: number): string;
    pushChar(value: string): void;
    getSeedOffset(): number;
    getContentSubstring(from: number, length: number): string;
    protected resetIntermediateState(): void;
    setSeedPosition(position: Position | null): this;
    resetState(): void;
    getHasPhpContent(): boolean;
    getDidRecovery(): boolean;
    private isStartingPhp;
    private isStartingShorthandPhp;
    private isStartingDirective;
    private isClosingComponent;
    private isStartingClosingComponentTag;
    private isStartingOpeningComponentTag;
    private isStartingEscapedEcho;
    private isStartingBladeNodeStructure;
    private hasEncounteredAnotherStructure;
    private endsWithTld;
    private processInputText;
    private breakPreFetch;
    private fetchAt;
    private shouldSkipForward;
    private unclosedRegionErrors;
    setParseFragments(parseFragments: boolean): void;
    pushError(error: BladeError): void;
    getContent(): string;
    getOriginalContent(): string;
    getFragments(): import("../nodes/nodes").FragmentNode[];
    getFragmentsParser(): FragmentsParser;
    getFragmentsContainingStructures(): import("../nodes/nodes").StructuralFragment[];
    charLeftAt(position: Position | null): string | null;
    charLeftAtCursor(line: number, char: number): string | null;
    charRightAt(position: Position | null): string | null;
    charRightAtCursor(line: number, char: number): string | null;
    punctuationLeftAt(position: Position | null, tabSize?: number): string | null;
    punctuationLeftAtCursor(line: number, char: number, tabSize?: number): string | null;
    punctuationRightAt(position: Position | null, tabSize?: number): string | null;
    punctuationRightAtCursor(line: number, char: number, tabSize?: number): string | null;
    wordRightAt(position: Position | null, tabSize?: number): string | null;
    wordRightAtCursor(line: number, char: number, tabSize?: number): string | null;
    wordLeftAt(position: Position | null, tabSize?: number): string | null;
    wordLeftAtCursor(line: number, char: number, tabSize?: number): string | null;
    wordAt(position: Position | null, tabSize?: number): string | null;
    getLineText(lineNumber: number): string | null;
    wordAtCursor(line: number, char: number, tabSize?: number): string | null;
    charAt(position: Position | null): string | null;
    getLinesAround(line: number): Map<number, string>;
    charAtCursor(line: number, char: number): string | null;
    getLineIndex(line: number): DocumentIndex | null;
    getHasPairedStructures(): boolean;
    getHasComponents(): boolean;
    positionFromCursor(line: number, char: number): Position | null;
    parse(text: string): AbstractNode[];
    getNodeIndexRanges(): IndexRange[];
    private createChildDocuments;
    checkCurrentOffsets(): void;
    private parseIntermediateText;
    private peek;
    private peekRelative;
    private scanToEndOfPhp;
    private scanToEndOfComponentTag;
    private scanToEndOfEscapedEcho;
    private scanToEndOfComment;
    private scanToEndOfBladeEntitiesEcho;
    private scanToEndOfBladeEcho;
    private makeDirective;
    private makeDirectiveWithParameters;
    private scanToEndOfDirective;
    getText(start: number, end: number): string;
    getNodeText(nodes: AbstractNode[]): string;
    getNodes(): AbstractNode[];
    getNodesBetween(start: Position, end: Position): AbstractNode[];
    getRenderNodes(): AbstractNode[];
    private prepareLiteralContent;
    positionFromOffset(offset: number, index: number, isRelativeOffset?: boolean): Position;
}
//# sourceMappingURL=documentParser.d.ts.map