import { BladeComponentNode } from '../nodes/nodes';
import { DocumentParser } from './documentParser';
import { StringIterator } from './stringIterator';
export declare class ComponentParser implements StringIterator {
    private document;
    private content;
    private inputLen;
    private chars;
    private currentContent;
    private prev;
    private cur;
    private next;
    private currentIndex;
    private hasFoundName;
    private nameStartsOn;
    private nameEndsOn;
    private name;
    private parameterContent;
    private activeComponent;
    constructor(document: DocumentParser);
    advance(count: number): void;
    encounteredFailure(): void;
    pushChar(value: string): void;
    updateIndex(index: number): void;
    inputLength(): number;
    incrementIndex(): void;
    getCurrentIndex(): number;
    getCurrent(): string | null;
    getNext(): string | null;
    getPrev(): string | null;
    getChar(index: number): string;
    getSeedOffset(): number;
    getContentSubstring(from: number, length: number): string;
    private resetState;
    checkCurrentOffsets(): void;
    private makeDirective;
    private getComponentOffset;
    private makeDirectiveWithParameters;
    private prepare;
    private peek;
    private peekRelative;
    private scanToEndOfComment;
    private scanToEndOfDirective;
    private nextPunctuation;
    private scanToEndOfBladeEcho;
    parse(node: BladeComponentNode): void;
    private makeComponentName;
}
//# sourceMappingURL=componentParser.d.ts.map