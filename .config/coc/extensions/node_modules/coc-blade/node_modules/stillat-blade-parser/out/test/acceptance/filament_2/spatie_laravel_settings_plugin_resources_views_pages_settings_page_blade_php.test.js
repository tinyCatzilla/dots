"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: spatie_laravel_settings_plugin_resources_views_pages_settings_page_blade_php', () => {
    test('pint: it can format spatie_laravel_settings_plugin_resources_views_pages_settings_page_blade_php', () => {
        const input = `<x-filament::page>
    <x-filament::form wire:submit.prevent="save">
        {{ $this->form }}

        <x-filament::form.actions
            :actions="$this->getCachedFormActions()"
            :full-width="$this->hasFullWidthFormActions()"
        />
    </x-filament::form>
</x-filament::page>
`;
        const output = `<x-filament::page>
    <x-filament::form wire:submit.prevent="save">
        {{ $this->form }}

        <x-filament::form.actions
            :actions="$this->getCachedFormActions()"
            :full-width="$this->hasFullWidthFormActions()"
        />
    </x-filament::form>
</x-filament::page>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=spatie_laravel_settings_plugin_resources_views_pages_settings_page_blade_php.test.js.map