"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: widgets_resources_views_stats_overview_widget_blade_php', () => {
    test('pint: it can format widgets_resources_views_stats_overview_widget_blade_php', () => {
        const input = `<x-filament-widgets::widget class="filament-stats-overview-widget">
    <div @if ($pollingInterval = $this->getPollingInterval()) wire:poll.{{ $pollingInterval }} @endif>
        @php
            $columns = $this->getColumns();
        @endphp

        <div @class([
            'filament-stats grid gap-4 lg:gap-8',
            'md:grid-cols-3' => $columns === 3,
            'md:grid-cols-1' => $columns === 1,
            'md:grid-cols-2' => $columns === 2,
            'md:grid-cols-2 xl:grid-cols-4' => $columns === 4,
        ])>
            @foreach ($this->getCachedCards() as $card)
                {{ $card }}
            @endforeach
        </div>
    </div>
</x-filament-widgets::widget>
`;
        const output = `<x-filament-widgets::widget class="filament-stats-overview-widget">
    <div
        @if ($pollingInterval = $this->getPollingInterval()) wire:poll.{{ $pollingInterval }} @endif
    >
        @php
            $columns = $this->getColumns();
        @endphp

        <div
            @class([
                'filament-stats grid gap-4 lg:gap-8',
                'md:grid-cols-3' => $columns === 3,
                'md:grid-cols-1' => $columns === 1,
                'md:grid-cols-2' => $columns === 2,
                'md:grid-cols-2 xl:grid-cols-4' => $columns === 4,
            ])
        >
            @foreach ($this->getCachedCards() as $card)
                {{ $card }}
            @endforeach
        </div>
    </div>
</x-filament-widgets::widget>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=widgets_resources_views_stats_overview_widget_blade_php.test.js.map