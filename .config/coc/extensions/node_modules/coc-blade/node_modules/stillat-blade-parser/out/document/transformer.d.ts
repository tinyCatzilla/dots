import { FormattingOptions } from '../formatting/formattingOptions';
import { AbstractNode, DirectiveNode } from '../nodes/nodes';
import { IExtractedAttribute } from '../parser/extractedAttribute';
import { BladeDocument } from './bladeDocument';
import { BlockPhpFormatter, JsonFormatter, PhpFormatter, PhpTagFormatter } from './formatters';
import { PintTransformer } from './pintTransformer';
import { TransformOptions } from './transformOptions';
export declare class Transformer {
    private isInsideIgnoreFormatter;
    private ignoredLiteralBlocks;
    private activeLiteralSlug;
    private doc;
    private shadowDoc;
    private inlineDirectiveBlocks;
    private contentDirectives;
    private dynamicEchoBlocks;
    private dynamicAttributeEchoBlocks;
    private pairedDirectives;
    private dynamicInlineDirectives;
    private inlineDirectives;
    private attachedDirectives;
    private inlineEchos;
    private spanEchos;
    private inlinePhpNodes;
    private echoBlockSlugs;
    private parentTransformer;
    private forElseWithEmpty;
    private forElseNoEmpty;
    private conditions;
    private switchStatements;
    private removeLines;
    private virtualStructureOpens;
    private virtualStructureClose;
    private inlineComments;
    private htmlTagComments;
    private blockComments;
    private blockPhpNodes;
    private breakDirectives;
    private htmlTagDirectives;
    private dynamicElementDirectives;
    private dynamicElementDirectiveNodes;
    private dynamicElementConditions;
    private dynamicElementConditionNodes;
    private dynamicElementSwitch;
    private dynamicElementSwitchNodes;
    private dynamicElementForElse;
    private dynamicElementForElseNodes;
    private dynamicElementPhpNodes;
    private dynamicElementPhp;
    private embeddedEchos;
    private embeddedDirectives;
    private structureLines;
    private directiveParameters;
    private expressionParameters;
    private echoParameters;
    private commentParameters;
    private slugs;
    private extractedEmbeddedDocuments;
    private propDirectives;
    private useLaravelPint;
    private pintTransformer;
    private filePath;
    private formattingOptions;
    private didPintFail;
    private removedAttributes;
    private shorthandSlotAttributes;
    private shorthandSlotAttributeReference;
    private phpFormatter;
    private blockPhpFormatter;
    private phpTagFormatter;
    private jsonFormatter;
    static sharedPintTransformer: PintTransformer | null;
    static rootTransformer: Transformer | null;
    static inlineComments: string[];
    private transformOptions;
    constructor(doc: BladeDocument);
    withShadowDocument(shadow?: BladeDocument | null): this;
    getPintTransformer(): PintTransformer | null;
    setPintTransformer(transformer: PintTransformer | null): void;
    setUsingLaravelPint(usingPint: boolean): void;
    getUsingLaravelPint(): boolean;
    withRemovedAttributes(attributes: Map<string, IExtractedAttribute>): this;
    setParentTransformer(transformer: Transformer): this;
    cloneOptions(transformer: Transformer): this;
    getFormattingOptions(): FormattingOptions | null;
    setFormattingOptions(formattingOptions: FormattingOptions | null): this;
    withJsonFormatter(formatter: JsonFormatter | null): this;
    getJsonFormatter(): JsonFormatter | null;
    withFilePath(path: string): this;
    withBlockPhpFormatter(formatter: BlockPhpFormatter | null): this;
    getBlockPhpFormatter(): BlockPhpFormatter | null;
    withPhpTagFormatter(formatter: PhpTagFormatter | null): this;
    getPhpTagFormatter(): BlockPhpFormatter | null;
    withPhpFormatter(formatter: PhpFormatter | null): this;
    getPhpFormatter(): PhpFormatter | null;
    /**
     * Returns a document with Blade removed.
     * @returns string
     */
    removeBlade(): string;
    private close;
    private open;
    private selfClosing;
    private pair;
    private printDirective;
    private makeSlug;
    private registerDirectiveParameter;
    private registerShorthandSlot;
    private getSlotSlug;
    private registerCommentParameter;
    private registerEchoParameter;
    private registerExpressionParameter;
    private registerCondition;
    private registerSwitchStatement;
    private registerPairedDirective;
    private registerAttachedDirective;
    private registerInlineDirectiveBlock;
    private registerContentDirective;
    private registerComment;
    private registerDynamicDirective;
    private prepareConditionalDirective;
    private prepareInlineBlockDirective;
    private prepareContentDirective;
    private registerPhpBlock;
    private registerConditionalPhpBlock;
    private prepareConditionalPhpBlock;
    private registerInlinePhpBlock;
    private prepareInlinePhpBlock;
    private transformComponentSlots;
    private preparePhpBlock;
    private transformPhpBlock;
    private printInlinePhp;
    private shouldCreateVirutal;
    private preparePairedDirective;
    private registerForElseWithEmpty;
    private prepareForElse;
    private registerBreak;
    private registerProps;
    private preparePropsDirective;
    private prepareBreakDirective;
    private registerEmbeddedDirective;
    prepareHtmlTagDirective(directive: DirectiveNode): string;
    private registerEmbeddedDocument;
    private prepareDirective;
    private registerVirtualComment;
    private registerHtmlTagComment;
    private prepareComment;
    private registerDynamicFragmentEcho;
    private registerDynamicAttributeFragmentEcho;
    private registerInlineEcho;
    private prepareComponent;
    private registerEmbeddedEcho;
    private prepareEcho;
    private prepareSwitch;
    private registerDynamicElementSwitch;
    private registerDynamicElementCondition;
    private registerDynamicElementForElse;
    private containsComponents;
    private containsBladeStructures;
    private isAllInlineNodes;
    private prepareConditions;
    toStructure(): string;
    withOptions(options: TransformOptions): this;
    private transformInlineDirectives;
    private transformHtmlTagDirectives;
    private transformContentDirectives;
    private transformDynamicEcho;
    private transformDynamicDirectives;
    private transformBlockPhp;
    private removeLeadingWhitespace;
    private findNewLeadingStart;
    private transformPairedDirectives;
    private transformForElseWithNoEmpty;
    private transformForElseWithEmpty;
    private transformInlineEcho;
    pushStartLiteralBlock(slug: string, node: AbstractNode): void;
    pushLiteralBlock(slug: string, node: AbstractNode): void;
    private transformConditions;
    private transformSwitchStatements;
    private transformProps;
    private transformBreaks;
    private transformComments;
    private indentLevel;
    private transformVirtualComments;
    private adjustAttributeFormattingResults;
    private transformDynamicElementForElse;
    private removeTrailingWhitespaceAfterSubstring;
    private transformDynamicElementConditions;
    private transformDynamicElementSwitch;
    private transformDirectiveParameters;
    private transformExpressionParameters;
    private transformEchoParameters;
    private transformEmbeddedEcho;
    private transformEmbeddedDirectives;
    private transformExtractedDocuments;
    private removeVirtualStructures;
    private forceCleanLines;
    private shouldCleanAfter;
    private shouldCleanLine;
    cleanVirtualStructures(content: string): string;
    private reflowSlugs;
    private transformRemovedAttibutes;
    fromStructure(content: string): string;
    containsRemovedAttributes(content: string): boolean;
    transformStructures(content: string): string;
    private dumpPreservedNodes;
}
//# sourceMappingURL=transformer.d.ts.map