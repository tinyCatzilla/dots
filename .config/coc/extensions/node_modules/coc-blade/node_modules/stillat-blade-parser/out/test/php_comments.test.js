"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('PHP Comments', () => {
    test('it can handle line comments', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@isset(
        $records // @isset())2
        )
// $records is defined and is not null...
@endisset`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)("\n// $records is defined and is not null...\n", nodes[1]);
        const directiveOne = nodes[0], directiveTwo = nodes[2];
        assert.strictEqual(directiveOne.directiveName, 'isset');
        assert.strictEqual(directiveOne.directiveParameters, "(\n        $records // @isset())2\n        )");
        assert.strictEqual(directiveOne.sourceContent, "@isset(\n        $records // @isset())2\n        )");
        assert.strictEqual(directiveOne.hasDirectiveParameters, true);
        assert.strictEqual(directiveTwo.directiveName, 'endisset');
        assert.strictEqual(directiveTwo.directiveParameters, '');
        assert.strictEqual(directiveTwo.sourceContent, '@endisset');
        assert.strictEqual(directiveTwo.hasDirectiveParameters, false);
    });
    test('it can handle multi-line comments', () => {
        const nodes = bladeDocument_1.BladeDocument.fromText(`@isset(
        $records /* @isset())2
        @isset(
            $records /* @isset())2
            )
    // $records is defined and is not null...
    @endisset
    */
        a)b
// $records is defined and is not null...
@endisset`).getAllNodes();
        (0, assertions_1.assertCount)(3, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[2]);
        (0, assertions_1.assertLiteralContent)("b\n// $records is defined and is not null...\n", nodes[1]);
        const directiveOne = nodes[0], directiveTwo = nodes[2];
        assert.strictEqual(directiveOne.directiveName, 'isset');
        assert.strictEqual(directiveOne.directiveParameters, "(\n        $records /* @isset())2\n        @isset(\n            $records /* @isset())2\n            )\n    // $records is defined and is not null...\n    @endisset\n    */\n        a)");
        assert.strictEqual(directiveOne.sourceContent, "@isset(\n        $records /* @isset())2\n        @isset(\n            $records /* @isset())2\n            )\n    // $records is defined and is not null...\n    @endisset\n    */\n        a)");
        assert.strictEqual(directiveOne.hasDirectiveParameters, true);
        assert.strictEqual(directiveTwo.directiveName, 'endisset');
        assert.strictEqual(directiveTwo.directiveParameters, '');
        assert.strictEqual(directiveTwo.sourceContent, '@endisset');
        assert.strictEqual(directiveTwo.hasDirectiveParameters, false);
    });
});
//# sourceMappingURL=php_comments.test.js.map