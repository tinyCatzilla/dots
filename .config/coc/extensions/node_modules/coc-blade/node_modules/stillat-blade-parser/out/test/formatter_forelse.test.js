"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../formatting/prettier/utils");
suite('Forelse Formatting', () => {
    test('it indents forelse', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`<div>
        @forelse ($users as $user)
<li>{{ $user->name }}</li>
@empty
<p>No users</p>
@endforelse
            </div>`).trim(), `<div>
    @forelse ($users as $user)
        <li>{{ $user->name }}</li>
    @empty
        <p>No users</p>
    @endforelse
</div>`);
    });
    test('it can unwrap forelse from a single line', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`<div> @forelse ($users as $user) <li>{{ $user->name }}</li> @empty <p>No users</p> @endforelse</div> `).trim(), `<div>
    @forelse ($users as $user)
        <li>{{ $user->name }}</li>
    @empty
        <p>No users</p>
    @endforelse
</div>`);
    });
    test('it can format forelse without an empty directive', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`<div>
        @forelse ($users as $user)
<li>{{ $user->name }}</li>
@endforelse
            </div>



        @forelse ($users as $user)
    <li>{{ $user->name }}
    </li>
@endforelse`).trim(), `<div>
    @forelse ($users as $user)
        <li>{{ $user->name }}</li>
    @endforelse
</div>

@forelse ($users as $user)
    <li>{{ $user->name }}</li>
@endforelse`);
    });
    test('it formats valid PHP inside forelse', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`<div>
        @forelse ($users as                  $user)
<li>{{ $user->name }}</li>
@empty
<p>No users</p>
@endforelse
            </div>`).trim(), `<div>
    @forelse ($users as $user)
        <li>{{ $user->name }}</li>
    @empty
        <p>No users</p>
    @endforelse
</div>`);
    });
    test('it ignores invalid PHP inside forelse', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`<div>
        @forelse ($users as       ++++$           $user)
<li>{{ $user->name }}</li>
@empty
<p>No users</p>
@endforelse
            </div>`).trim(), `<div>
    @forelse ($users as       ++++$           $user)
        <li>{{ $user->name }}</li>
    @empty
        <p>No users</p>
    @endforelse
</div>`);
    });
});
//# sourceMappingURL=formatter_forelse.test.js.map