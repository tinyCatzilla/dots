"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PairManager = void 0;
const nodes_1 = require("../nodes/nodes");
class PairManager {
    static clearSpeculativeConditions() {
        this.speculativeConditions.clear();
    }
    static clearSpeculativeEndIfs() {
        this.speculativeEndIfs.clear();
    }
    static getSpeculativeConditions() {
        return this.speculativeConditions;
    }
    static getSpeculativeEndIfs() {
        return this.speculativeEndIfs;
    }
    static isSpeculativeCondition(name) {
        return this.speculativeConditions.has(name);
    }
    static isSpeculativeEndIf(name) {
        return this.speculativeEndIfs.has(name);
    }
    static registerSpeculativeCondition(name) {
        this.speculativeConditions.set(name, 1);
    }
    static registerSpeculativeEndIf(name) {
        this.speculativeEndIfs.set(name, 1);
    }
    static canClose(directive) {
        const checkName = 'end' + directive.directiveName.toLowerCase();
        return this.possibleClosingNode.has(checkName);
    }
    static shouldRewrite(node) {
        if (this.customIfs.has(node.name)) {
            return true;
        }
        if (this.alwaysRewrite.includes(node.name)) {
            return true;
        }
        if (this.speculativeEndIfs.has(node.directiveName)) {
            return true;
        }
        if (this.speculativeConditions.has(node.name)) {
            return true;
        }
        return false;
    }
    static determineCandidates(nodes) {
        const allNonClosingCandidates = new Map();
        nodes.forEach((node) => {
            if ((node instanceof nodes_1.DirectiveNode) == false) {
                return;
            }
            const directive = node;
            if (!directive.directiveName.toLowerCase().startsWith('end')) {
                allNonClosingCandidates.set(directive.directiveName.toLowerCase(), 1);
            }
        });
        nodes.forEach((node) => {
            if ((node instanceof nodes_1.DirectiveNode) == false) {
                return;
            }
            const directive = node;
            if (directive.directiveName.toLowerCase().startsWith('unless')) {
                const checkName = directive.directiveName.substring(6);
                if (checkName.length > 0) {
                    this.speculativeConditions.set(directive.directiveName, 1);
                    this.speculativeEndIfs.set('end' + checkName, 1);
                }
            }
            if (this.speculativeEndIfs.has(directive.directiveName)) {
                directive.isClosingDirective = true;
            }
            if (directive.directiveName.toLowerCase().startsWith('else')) {
                const checkName = directive.directiveName.substring(4);
                if (checkName != 'if' && checkName.length > 0) {
                    this.speculativeConditions.set(checkName, 1);
                }
            }
            if (directive.directiveName.toLowerCase().startsWith('end')) {
                const checkName = directive.directiveName.substring(3).toLowerCase();
                if (allNonClosingCandidates.has(checkName)) {
                    this.possibleClosingNode.set(directive.directiveName.toLowerCase(), 1);
                    directive.isClosingDirective = true;
                }
            }
        });
    }
}
exports.PairManager = PairManager;
PairManager.possibleClosingNode = new Map();
// A list of all Blade directives that act like a beginning if statement.
PairManager.alwaysRewrite = [
    'unless',
    'sectionMissing',
    'hasSection',
    'can',
    'auth',
    'env',
    'isset',
    'guest',
    'cannot',
    'canany',
    'hasSection',
    'production',
];
PairManager.customIfs = new Map();
PairManager.speculativeConditions = new Map();
PairManager.speculativeEndIfs = new Map();
//# sourceMappingURL=pairManager.js.map