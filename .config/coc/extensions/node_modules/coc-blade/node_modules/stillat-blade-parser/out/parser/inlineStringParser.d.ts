import { ILabeledRange } from '../nodes/labeledRange';
import { StringIterator } from './stringIterator';
export interface IStringParserNode {
    content: string;
    type: string;
    index: number;
}
export declare class InlineStringParser implements StringIterator {
    private ignoreRanges;
    private strings;
    private nodes;
    private chars;
    private cur;
    private prev;
    private next;
    private currentIndex;
    private inputLen;
    private currentContent;
    private nodeIndex;
    private hasStringNodesInResult;
    advance(count: number): void;
    encounteredFailure(): void;
    updateIndex(index: number): void;
    inputLength(): number;
    getCurrentIndex(): number;
    incrementIndex(): void;
    getCurrent(): string | null;
    getNext(): string | null;
    getPrev(): string | null;
    checkCurrentOffsets(): void;
    pushChar(value: string): void;
    getChar(index: number): string;
    getSeedOffset(): number;
    getContentSubstring(from: number, length: number): string;
    setIgnoreRanges(ranges: ILabeledRange[]): void;
    hasStringNodes(): boolean;
    parse(value: string): void;
    getParsedNodes(): IStringParserNode[];
}
//# sourceMappingURL=inlineStringParser.d.ts.map