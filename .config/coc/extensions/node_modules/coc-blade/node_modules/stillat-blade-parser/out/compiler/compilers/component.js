"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentCompiler = void 0;
const isStartOfString_1 = require("../../parser/scanners/isStartOfString");
const stringSplitter_1 = require("../../parser/stringSplitter");
const stringUtilities_1 = require("../../utilities/stringUtilities");
const sha1 = require('sha1');
class ComponentCompiler {
    constructor() {
        this.hashStack = [];
    }
    getClassHash() {
        if (this.hashStack.length == 0) {
            return '';
        }
        return this.hashStack[this.hashStack.length - 1];
    }
    pushHash(hash) {
        this.hashStack.push(hash);
    }
    popHash() {
        this.hashStack.pop();
    }
    static newComponentHash(component) {
        return sha1(component);
    }
    compile(node) {
        const directive = node, params = directive.getInnerContent(), parts = stringSplitter_1.StringSplitter.fromText(params);
        if (parts.length > 0) {
            if ((0, isStartOfString_1.isStartOfString)(parts[0].substr(0, 1))) {
                const stringValue = stringUtilities_1.StringUtilities.unwrapString(parts[0]);
                if (stringValue.endsWith('::class')) {
                    const componentHash = sha1(stringValue), componentName = parts[1].trim(), componentArgs = parts[2].trim();
                    this.hashStack.push(componentHash);
                    return `<?php if (isset($component)) { $__componentOriginal${componentHash} = $component; } ?>
<?php $component = $__env->getContainer()->make(${stringValue}, ${componentArgs} + (isset($attributes) ? (array) $attributes->getIterator() : [])); ?>
<?php $component->withName(${componentName}); ?>
<?php if ($component->shouldRender()): ?>
<?php $__env->startComponent($component->resolveView(), $component->data()); ?>`;
                }
            }
        }
        return `<?php $__env->startComponent(${params}); ?>`;
    }
}
exports.ComponentCompiler = ComponentCompiler;
//# sourceMappingURL=component.js.map