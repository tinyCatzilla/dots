"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PintCache = void 0;
const crypto_1 = __importDefault(require("crypto"));
const fs = __importStar(require("fs"));
class PintCache {
    constructor(cacheDir) {
        this.cacheDir = '';
        this.cacheVersion = '5';
        this.cacheDir = cacheDir;
    }
    generateSHA1Hash(input) {
        const hash = crypto_1.default.createHash('sha1');
        hash.update(input);
        return '_pint' + this.cacheVersion + '_' + hash.digest('hex');
    }
    getCachePath(path) {
        return this.cacheDir + this.generateSHA1Hash(path) + '.json';
    }
    canCache(path) {
        if (typeof path == 'undefined') {
            return false;
        }
        return path.trim().length > 0;
    }
    has(path) {
        if (typeof path == 'undefined') {
            return false;
        }
        return fs.existsSync(this.getCachePath(path));
    }
    serializeMap(map) {
        return JSON.stringify(Array.from(map.entries()));
    }
    unserializeMap(serializedMap) {
        const entries = JSON.parse(serializedMap);
        return new Map(entries);
    }
    put(path, resultMapping, contentMapping) {
        const cachePath = this.getCachePath(path), cacheEntry = {
            resultMapping: this.serializeMap(resultMapping),
            contentMapping: this.serializeMap(contentMapping)
        };
        fs.writeFileSync(cachePath, JSON.stringify(cacheEntry));
    }
    get(path) {
        const cacheContent = fs.readFileSync(this.getCachePath(path), { encoding: 'utf8' }), decodedContent = JSON.parse(cacheContent);
        return {
            contentMapping: this.unserializeMap(decodedContent.contentMapping),
            resultMapping: this.unserializeMap(decodedContent.resultMapping)
        };
    }
    isValid(cachedContent, templateContent) {
        if (cachedContent.size !== templateContent.size) {
            return false;
        }
        // Iterate over the entries and compare key-value pairs
        for (const [key, value] of cachedContent.entries()) {
            if (!templateContent.has(key) || templateContent.get(key) !== value) {
                return false;
            }
        }
        return true;
    }
}
exports.PintCache = PintCache;
//# sourceMappingURL=pintCache.js.map