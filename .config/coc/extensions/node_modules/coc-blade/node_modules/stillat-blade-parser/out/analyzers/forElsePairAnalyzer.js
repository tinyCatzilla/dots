"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForElsePairAnalyzer = void 0;
const bladeDocument_1 = require("../document/bladeDocument");
const helpers_1 = require("../nodes/helpers");
const nodes_1 = require("../nodes/nodes");
const bladeKeywords_1 = require("../parser/bladeKeywords");
class ForElsePairAnalyzer {
    static associate(nodes, document) {
        const reduced = [];
        nodes.forEach((node) => {
            if (node instanceof nodes_1.DirectiveNode && node.name.toLowerCase() == bladeKeywords_1.BladeKeywords.ForElse && node.directiveName.toLowerCase() != bladeKeywords_1.BladeKeywords.EndForElse) {
                reduced.push(this.createForElseNode(node, document));
            }
            else {
                reduced.push(node);
            }
        });
        return reduced;
    }
    static createForElseNode(node, parser) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;
        const forElseNode = new nodes_1.ForElseNode();
        forElseNode.withParser(parser);
        forElseNode.originalNode = node;
        forElseNode.startPosition = node.startPosition;
        forElseNode.endPosition = node.getFinalClosingDirective().endPosition;
        forElseNode.constructedFrom = node;
        const elseNode = node.findFirstDirectChildDirectiveOfType('empty');
        if (elseNode == null) {
            forElseNode.tailNode = node.children.pop();
            forElseNode.truthNodes = node.children;
            const truthStart = ((_b = (_a = node.startPosition) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : 0) - 1, truthEnd = ((_e = (_d = (_c = node.isClosedBy) === null || _c === void 0 ? void 0 : _c.startPosition) === null || _d === void 0 ? void 0 : _d.index) !== null && _e !== void 0 ? _e : 0) - 1, truthLength = truthEnd - truthStart, truthInnerStart = ((_g = (_f = node.endPosition) === null || _f === void 0 ? void 0 : _f.index) !== null && _g !== void 0 ? _g : 0) + 1, truthInnerEnd = ((_k = (_j = (_h = node.isClosedBy) === null || _h === void 0 ? void 0 : _h.startPosition) === null || _j === void 0 ? void 0 : _j.index) !== null && _k !== void 0 ? _k : 0) - 1, truthInnerLength = truthInnerEnd - truthInnerStart;
            forElseNode.truthDocumentContent = parser.getText(truthStart, truthEnd);
            forElseNode.truthDocumentOffset = {
                start: truthStart,
                end: truthEnd,
                length: truthLength
            };
            forElseNode.truthInnerContent = parser.getText(truthInnerStart, truthInnerEnd);
            forElseNode.truthInnerOffset = {
                start: truthInnerStart,
                end: truthInnerEnd,
                length: truthInnerLength
            };
        }
        else {
            const children = node.children, truthNodes = [];
            let falseNodes = [];
            forElseNode.elseNode = elseNode;
            for (let i = 0; i < children.length; i++) {
                const child = children[i];
                if (child.refId == elseNode.refId) {
                    falseNodes = children.slice(i + 1);
                    break;
                }
                else {
                    truthNodes.push(child);
                }
            }
            forElseNode.truthNodes = truthNodes;
            if (falseNodes.length > 0) {
                forElseNode.tailNode = falseNodes.pop();
            }
            forElseNode.falseNodes = falseNodes;
            const truthStart = ((_m = (_l = node.startPosition) === null || _l === void 0 ? void 0 : _l.index) !== null && _m !== void 0 ? _m : 0) - 1, truthEnd = ((_p = (_o = elseNode.startPosition) === null || _o === void 0 ? void 0 : _o.index) !== null && _p !== void 0 ? _p : 0) - 1, truthLength = truthEnd - truthStart, truthInnerStart = ((_r = (_q = node.endPosition) === null || _q === void 0 ? void 0 : _q.index) !== null && _r !== void 0 ? _r : 0) + 1, truthInnerEnd = ((_t = (_s = elseNode.startPosition) === null || _s === void 0 ? void 0 : _s.index) !== null && _t !== void 0 ? _t : 0) - 1, truthInnerLength = truthInnerEnd - truthInnerStart;
            forElseNode.truthDocumentContent = parser.getText(truthStart, truthEnd);
            forElseNode.truthDocumentOffset = {
                start: truthStart,
                end: truthEnd,
                length: truthLength
            };
            forElseNode.truthInnerContent = parser.getText(truthInnerStart, truthInnerEnd);
            forElseNode.truthInnerOffset = {
                start: truthInnerStart,
                end: truthInnerEnd,
                length: truthInnerLength
            };
            const falseStart = ((_v = (_u = elseNode.startPosition) === null || _u === void 0 ? void 0 : _u.index) !== null && _v !== void 0 ? _v : 0) - 1, falseEnd = ((_y = (_x = (_w = node.isClosedBy) === null || _w === void 0 ? void 0 : _w.startPosition) === null || _x === void 0 ? void 0 : _x.index) !== null && _y !== void 0 ? _y : 0) - 1, falseLength = falseEnd - falseStart, falseInnerStart = ((_0 = (_z = elseNode.endPosition) === null || _z === void 0 ? void 0 : _z.index) !== null && _0 !== void 0 ? _0 : 0) + 1, falseInnerEnd = ((_3 = (_2 = (_1 = node.isClosedBy) === null || _1 === void 0 ? void 0 : _1.startPosition) === null || _2 === void 0 ? void 0 : _2.index) !== null && _3 !== void 0 ? _3 : 0) - 1, falseInnerLength = falseInnerEnd - falseInnerStart;
            forElseNode.falseDocumentContent = parser.getText(falseStart, falseEnd);
            forElseNode.falseDocumentOffset = {
                start: falseStart,
                end: falseEnd,
                length: falseLength
            };
            forElseNode.falseInnerContent = parser.getText(falseInnerStart, falseInnerEnd);
            forElseNode.falseInnerOffset = {
                start: falseInnerStart,
                end: falseInnerEnd,
                length: falseInnerLength
            };
        }
        forElseNode.truthDocument = bladeDocument_1.BladeDocument.childFromText(parser.getNodeText(forElseNode.truthNodes), parser, (0, helpers_1.getStartPosition)(forElseNode.truthNodes));
        forElseNode.falseDocument = bladeDocument_1.BladeDocument.childFromText(parser.getNodeText(forElseNode.falseNodes), parser, (0, helpers_1.getStartPosition)(forElseNode.falseNodes));
        const forElseStart = ((_5 = (_4 = node.startPosition) === null || _4 === void 0 ? void 0 : _4.index) !== null && _5 !== void 0 ? _5 : 0) - 1, forElseEnd = (_8 = (_7 = (_6 = node.isClosedBy) === null || _6 === void 0 ? void 0 : _6.endPosition) === null || _7 === void 0 ? void 0 : _7.index) !== null && _8 !== void 0 ? _8 : 0 - ((_10 = (_9 = node.startPosition) === null || _9 === void 0 ? void 0 : _9.index) !== null && _10 !== void 0 ? _10 : 0), forElseLength = forElseEnd - forElseStart;
        forElseNode.nodeContent = parser.getText(forElseStart, forElseEnd);
        forElseNode.documentContent = parser.getText(forElseStart, forElseEnd);
        forElseNode.offset = {
            start: forElseStart,
            end: forElseEnd,
            length: forElseLength
        };
        return forElseNode;
    }
}
exports.ForElsePairAnalyzer = ForElsePairAnalyzer;
//# sourceMappingURL=forElsePairAnalyzer.js.map