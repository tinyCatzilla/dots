import prettier, { ParserOptions } from "prettier";
import { FormattingOptions } from '../formattingOptions';
import { TransformOptions } from '../../document/transformOptions';
export declare function getEchoPhpOptions(): prettier.ParserOptions<any>;
export declare function getPhpOptions(): prettier.ParserOptions<any>;
export declare function getOriginalOptions(): prettier.ParserOptions<any>;
export declare function cleanOptions(options: ParserOptions): ParserOptions;
export declare function getHtmlOptions(): ParserOptions;
export declare function formatJson(text: string): string;
export declare function formatBladeString(text: string, options?: FormattingOptions | null, prettierOptions?: ParserOptions | null): string;
export declare function formatBladeStringWithPint(text: string, options?: FormattingOptions | null, transformOptions?: TransformOptions | null, prettierOptions?: ParserOptions | null): string;
declare type PrettierOptionsAdjuster = (options: ParserOptions) => ParserOptions;
export declare function setOptionsAdjuster(adjuster: PrettierOptionsAdjuster | null): void;
export declare function getOptionsAdjuster(): PrettierOptionsAdjuster | null;
export declare function setOptions(options: ParserOptions): void;
export declare function formatAsJavaScript(text: string, transformOptions: TransformOptions): string;
export declare function formatAsHtml(text: string): string;
export declare function formatAsHtmlStrings(text: string): string;
export declare function inlineFormatPhp(text: string, transformOptions: TransformOptions, options?: ParserOptions | null): string;
export declare function formatPhp(text: string, transformOptions: TransformOptions, options?: ParserOptions | null): string;
export declare function formatTagPhp(text: string, transformOptions: TransformOptions, options?: ParserOptions | null): string;
export {};
//# sourceMappingURL=utils.d.ts.map