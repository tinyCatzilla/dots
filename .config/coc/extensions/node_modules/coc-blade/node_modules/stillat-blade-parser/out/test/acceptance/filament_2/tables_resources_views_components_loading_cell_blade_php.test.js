"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: tables_resources_views_components_loading_cell_blade_php', () => {
    test('pint: it can format tables_resources_views_components_loading_cell_blade_php', () => {
        const input = `<td {{ $attributes->class(['w-full px-4 py-4 animate-pulse']) }}>
    <div @class([
        'h-4 bg-gray-300 rounded-md',
        'dark:bg-gray-600' => config('tables.dark_mode'),
    ])></div>
</td>
`;
        const output = `<td {{ $attributes->class(['w-full animate-pulse px-4 py-4']) }}>
    <div
        @class([
            'h-4 rounded-md bg-gray-300',
            'dark:bg-gray-600' => config('tables.dark_mode'),
        ])
    ></div>
</td>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=tables_resources_views_components_loading_cell_blade_php.test.js.map