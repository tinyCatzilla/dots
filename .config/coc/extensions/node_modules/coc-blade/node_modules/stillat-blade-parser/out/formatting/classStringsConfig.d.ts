import { BladeDocument } from '../document/bladeDocument';
import { BladeEchoNode, DirectiveNode, InlinePhpNode } from '../nodes/nodes';
export interface IClassRuleset {
    includeWhen: string[];
    excludeWhen: string[];
}
export interface IClassStringConfiguration {
    enabled: boolean;
    directivesEnabled: boolean;
    excludedDirectives: string[];
    directives: IClassRuleset[];
    allowedMethodNames: string[];
    bladePhpEnabled: boolean;
    phpTagsEnabled: boolean;
    phpTagRules: IClassRuleset[];
    ignoredLanguageStructures: string[];
    bladeEchoEnabled: boolean;
    bladeEchoRules: IClassRuleset[];
    documentRules: IClassRuleset;
    stringRules: IClassRuleset;
}
export declare function getDefaultClassStringConfig(): IClassStringConfiguration;
export declare function classConfigFromObject(config: any): IClassStringConfiguration;
export declare class ClassStringRuleEngine {
    private config;
    private directiveExcludeRules;
    private directiveIncludeRules;
    private phpTagExcludeRules;
    private phpTagIncludeRules;
    private echoExcludeRules;
    private echoIncludeRules;
    private documentExcludeRules;
    private documentIncludeRules;
    private stringExcludeRules;
    private stringIncludeRules;
    constructor(config: IClassStringConfiguration);
    private getIncludeRules;
    private getExcludeRules;
    private passes;
    canTransformDocument(document: BladeDocument): boolean;
    canTransformString(content: string): boolean;
    private canTransform;
    canTransformBladeEcho(echo: BladeEchoNode): boolean;
    canTransformBladePhp(bladePhp: DirectiveNode): boolean;
    canTransformInlinePhp(inlinePhp: InlinePhpNode): boolean;
    canTransformDirective(directiveNode: DirectiveNode): boolean;
}
//# sourceMappingURL=classStringsConfig.d.ts.map