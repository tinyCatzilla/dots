"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const phpCompiler_1 = require("../compiler/phpCompiler");
suite('Blade PHP Statements', () => {
    test('php statements with expressions are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@php($set = true)`), '<?php ($set = true); ?>');
    });
    test('php statements without expression are ignored', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('@php'), '@php');
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`{{ "Ignore: @php" }}`), `<?php echo e("Ignore: @php"); ?>`);
    });
    test('php statements dont parse blade code', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@php echo "{{ This is a blade tag }}" @endphp`), `<?php echo "{{ This is a blade tag }}" ?>`);
    });
    test('verbatim and php statements dont get mixed up', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@verbatim {{ Hello, I'm not blade! }}
@php echo 'And I'm not PHP!' @endphp
@endverbatim {{ 'I am Blade' }}
@php echo 'I am PHP {{ not Blade }}' @endphp`), ` {{ Hello, I'm not blade! }}
@php echo 'And I'm not PHP!' @endphp
 <?php echo e('I am Blade'); ?>
<?php echo 'I am PHP {{ not Blade }}' ?>`);
    });
    test('strings with parenthesis', () => {
        // Note: The Laravel test suite expects this to _not_ work.
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@php($data = ['test' => ')'])`), `<?php ($data = ['test' => ')']); ?>`);
    });
    test('string with empty string data value', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString("@php($data = ['test' => ''])"), `<?php ($data = ['test' => '']); ?>`);
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString("@php($data = ['test' => \"\"])"), `<?php ($data = ['test' => ""]); ?>`);
    });
    test('strings with escaping data value', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString("@php($data = ['test' => 'won\\'t break'])"), `<?php ($data = ['test' => 'won\\'t break']); ?>`);
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString("@php($data = ['test' => \"\\\"escaped\\\"\"])"), `<?php ($data = ['test' => "\\"escaped\\""]); ?>`);
    });
});
//# sourceMappingURL=compiler_php.test.js.map