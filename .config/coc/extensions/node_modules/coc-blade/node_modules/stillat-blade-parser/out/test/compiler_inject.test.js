"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const phpCompiler_1 = require("../compiler/phpCompiler");
suite('Blade Inject', () => {
    test('dependencies injected as strings are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString("Foo @inject('baz', 'SomeNamespace\\SomeClass') bar"), "Foo <?php $baz = app('SomeNamespace\\SomeClass'); ?> bar");
    });
    test('dependencies injected as strings are compiled injected with double quotes', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('Foo @inject("baz", "SomeNamespace\\SomeClass") bar'), 'Foo <?php $baz = app("SomeNamespace\\SomeClass"); ?> bar');
    });
    test('dependencies are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString("Foo @inject('baz', SomeNamespace\\SomeClass::class) bar"), "Foo <?php $baz = app(SomeNamespace\\SomeClass::class); ?> bar");
    });
    test('dependencies are compiled with double quotes', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString('Foo @inject("baz", SomeNamespace\\SomeClass::class) bar'), "Foo <?php $baz = app(SomeNamespace\\SomeClass::class); ?> bar");
    });
});
//# sourceMappingURL=compiler_inject.test.js.map