"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeScanner = void 0;
const nodes_1 = require("../../nodes/nodes");
const nodeQueries_1 = require("./nodeQueries");
class NodeScanner {
    constructor(doc) {
        this.doc = doc;
    }
    firstDirectiveOfType(name) {
        const nodes = this.doc.getAllNodes();
        for (let i = 0; i < nodes.length; i++) {
            const thisNode = nodes[i];
            if (thisNode instanceof nodes_1.DirectiveNode && thisNode.directiveName == name) {
                return thisNode;
            }
        }
        return null;
    }
    getNodeAt(position) {
        return nodeQueries_1.NodeQueries.findNodeAtPosition(position, this.doc.getParser().getNodes());
    }
    getNodesBefore(position) {
        return nodeQueries_1.NodeQueries.findNodesBeforePosition(position, this.doc.getParser().getNodes());
    }
    getNodeBefore(position) {
        return nodeQueries_1.NodeQueries.findNodeBeforePosition(position, this.doc.getParser().getNodes());
    }
    getNodeAfter(position) {
        return nodeQueries_1.NodeQueries.findNodeAfterPosition(position, this.doc.getParser().getNodes());
    }
    getNodesAfter(position) {
        return nodeQueries_1.NodeQueries.findNodesAfterPosition(position, this.doc.getParser().getNodes());
    }
    filter(predicate) {
        return this.doc.getParser().getNodes().filter(predicate);
    }
    getComments() {
        const nodes = [];
        this.doc.getAllNodes().forEach((node) => {
            if (node instanceof nodes_1.BladeCommentNode) {
                nodes.push(node);
            }
        });
        return nodes;
    }
    /**
     * Retrieves all literal and escaped content nodes in the document.
     */
    getAllLiteralNodes() {
        const nodes = [];
        this.doc.getAllNodes().forEach((node) => {
            if (node instanceof nodes_1.LiteralNode) {
                nodes.push(node);
            }
        });
        return nodes;
    }
}
exports.NodeScanner = NodeScanner;
//# sourceMappingURL=nodeScanner.js.map