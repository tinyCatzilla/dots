"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const bladeDocument_1 = require("../document/bladeDocument");
const nodes_1 = require("../nodes/nodes");
const assertions_1 = require("./testUtils/assertions");
suite('Verbatim Nodes', () => {
    test('verbatim does not create additional nodes', () => {
        const template = `
start @verbatim start

start
{{-- comment!!! --}}3
s1@props-two(['color' => (true ?? 'gray')])
s2@directive
@directive something
s3@props-three  (['color' => (true ?? 'gray')])
@props(['color' => 'gray'])
{!! $dooblyDoo !!}1
<ul {{ $attributes->merge(['class' => 'bg-'.$color.'-200']) }}>
{{ $slot }}
</ul>

end @endverbatim end

`, document = bladeDocument_1.BladeDocument.fromText(template), nodes = document.getAllNodes();
        (0, assertions_1.assertCount)(4, nodes);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[0]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[1]);
        (0, assertions_1.assertInstanceOf)(nodes_1.DirectiveNode, nodes[2]);
        (0, assertions_1.assertInstanceOf)(nodes_1.LiteralNode, nodes[3]);
        const verbatimOpen = nodes[1], verbatimClose = nodes[2];
        assert.strictEqual(verbatimOpen.directiveName, 'verbatim');
        assert.strictEqual(verbatimOpen.sourceContent, '@verbatim');
        assert.strictEqual(verbatimClose.directiveName, 'endverbatim');
        assert.strictEqual(verbatimClose.sourceContent, '@endverbatim');
        assert.strictEqual(verbatimOpen.innerContent, " start\n\nstart\n{{-- comment!!! --}}3\ns1@props-two(['color' => (true ?? 'gray')])\ns2@directive\n@directive something\ns3@props-three  (['color' => (true ?? 'gray')])\n@props(['color' => 'gray'])\n{!! $dooblyDoo !!}1\n<ul {{ $attributes->merge(['class' => 'bg-'.$color.'-200']) }}>\n{{ $slot }}\n</ul>\n\nend ");
        (0, assertions_1.assertLiteralContent)("\nstart ", nodes[0]);
        (0, assertions_1.assertLiteralContent)("end\n\n", nodes[3]);
    });
});
//# sourceMappingURL=verbatim.test.js.map