"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: notifications_resources_views_components_database_modal_heading_blade_php', () => {
    test('pint: it can format notifications_resources_views_components_database_modal_heading_blade_php', () => {
        const input = `@props([
    'unreadNotificationsCount',
])

<x-notifications::modal.heading class="relative">
    <span>
        {{ __('notifications::database.modal.heading') }}
    </span>

    @if ($unreadNotificationsCount)
        <span @class([
            'inline-flex absolute items-center justify-center top-0 ml-1 min-w-[1rem] h-4 rounded-full text-xs text-primary-700 bg-primary-500/10',
            'dark:text-primary-500' => config('tables.dark_mode'),
        ])>
            {{ $unreadNotificationsCount }}
        </span>
    @endif
</x-notifications::modal.heading>
`;
        const output = `@props([
    'unreadNotificationsCount',
])

<x-notifications::modal.heading class="relative">
    <span>
        {{ __('notifications::database.modal.heading') }}
    </span>

    @if ($unreadNotificationsCount)
        <span
            @class([
                'text-primary-700 bg-primary-500/10 absolute top-0 ml-1 inline-flex h-4 min-w-[1rem] items-center justify-center rounded-full text-xs',
                'dark:text-primary-500' => config('tables.dark_mode'),
            ])
        >
            {{ $unreadNotificationsCount }}
        </span>
    @endif
</x-notifications::modal.heading>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=notifications_resources_views_components_database_modal_heading_blade_php.test.js.map