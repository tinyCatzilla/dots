"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../formatting/prettier/utils");
suite('Verbatim Formatting', () => {
    test('it indents verbatim', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`<div>
@verbatim


    <div class="container">
        Hello, {{ name }}.
    </div>

    
@endverbatim
</div>`).trim(), `<div>
    @verbatim
        <div class="container">
            Hello, {{ name }}.
        </div>
    @endverbatim
</div>`);
    });
    test('it ignores blade-like things inside verbatim', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`<div>
@verbatim


    <div class="container">
        Hello, {{
                     name        }}.
    </div>


@endverbatim
</div>`).trim(), `<div>
    @verbatim
        <div class="container">
            Hello, {{
                         name        }}.
        </div>
    @endverbatim
</div>`);
    });
    test('verbatim content is not lost', () => {
        const template = `@if (true)
        @if (false)
        @if ('something')
        @verbatim
            some content.
    @endverbatim
        @endif
        @endif
    @endif
    
    `;
        const out = `@if (true)
    @if (false)
        @if ("something")
            @verbatim
                some content.
            @endverbatim
        @endif
    @endif
@endif
`;
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(template), out);
    });
});
//# sourceMappingURL=formatter_verbatim.test.js.map