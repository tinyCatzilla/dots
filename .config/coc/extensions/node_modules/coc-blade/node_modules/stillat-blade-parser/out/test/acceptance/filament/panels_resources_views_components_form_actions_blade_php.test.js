"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: panels_resources_views_components_form_actions_blade_php', () => {
    test('pint: it can format panels_resources_views_components_form_actions_blade_php', () => {
        const input = `@props([
    'actions',
    'alignment' => null,
    'fullWidth' => false,
])

@if (count($actions))
    <div
        @if ($this->areFormActionsSticky())
            x-data="{

                isSticky: false,

                evaluatePageScrollPosition: function() {
                    this.isSticky = (window.scrollY + (window.innerHeight * 2)) <= document.body.scrollHeight
                },

            }"
            x-init="evaluatePageScrollPosition"
            x-on:scroll.window="evaluatePageScrollPosition"
            x-bind:class="{
                'filament-form-actions-sticky-panel sticky bottom-0 -mx-4 transform bg-white p-4 shadow-lg transition ring-1 ring-gray-950/5 md:-translate-y-4 md:rounded-xl dark:bg-gray-800 dark:ring-white/20': isSticky,
            }"
        @endif
    >
        <x-filament-actions::actions
            :actions="$actions"
            :alignment="$alignment ?? $this->getFormActionsAlignment()"
            :full-width="$fullWidth"
            class="filament-form-actions"
        />
    </div>
@endif
`;
        const output = `@props([
    'actions',
    'alignment' => null,
    'fullWidth' => false,
])

@if (count($actions))
    <div
        @if ($this->areFormActionsSticky())
            x-data="{
                isSticky: false,

                evaluatePageScrollPosition: function () {
                    this.isSticky =
                        window.scrollY + window.innerHeight * 2 <=
                        document.body.scrollHeight
                },
            }"
            x-init="evaluatePageScrollPosition"
            x-on:scroll.window="evaluatePageScrollPosition"
            x-bind:class="{
                'filament-form-actions-sticky-panel sticky bottom-0 -mx-4 transform bg-white p-4 shadow-lg transition ring-1 ring-gray-950/5 md:-translate-y-4 md:rounded-xl dark:bg-gray-800 dark:ring-white/20':
                    isSticky,
            }"
        @endif
    >
        <x-filament-actions::actions
            :actions="$actions"
            :alignment="$alignment ?? $this->getFormActionsAlignment()"
            :full-width="$fullWidth"
            class="filament-form-actions"
        />
    </div>
@endif
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=panels_resources_views_components_form_actions_blade_php.test.js.map