"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const phpCompiler_1 = require("../compiler/phpCompiler");
suite('Blade Environment Statements', () => {
    test('env statements are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@env('staging')
breeze
@else
boom
@endenv`), `<?php if(app()->environment('staging')): ?>
breeze
<?php else: ?>
boom
<?php endif; ?>`);
    });
    test('env statements with multiple string params are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@env('staging', 'production')
breeze
@else
boom
@endenv`), `<?php if(app()->environment('staging', 'production')): ?>
breeze
<?php else: ?>
boom
<?php endif; ?>`);
    });
    test('env statements with array param are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@env(['staging', 'production'])
breeze
@else
boom
@endenv`), `<?php if(app()->environment(['staging', 'production'])): ?>
breeze
<?php else: ?>
boom
<?php endif; ?>`);
    });
    test('production statements are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@production
breeze
@else
boom
@endproduction`), `<?php if(app()->environment('production')): ?>
breeze
<?php else: ?>
boom
<?php endif; ?>`);
    });
});
//# sourceMappingURL=compiler_environment.test.js.map