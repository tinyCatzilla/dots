"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const phpCompiler_1 = require("../compiler/phpCompiler");
suite('Break Statements', () => {
    test('break statements are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@for ($i = 0; $i < 10; $i++)
test
@break
@endfor`), `<?php for($i = 0; $i < 10; $i++): ?>
test
<?php break; ?>
<?php endfor; ?>`);
    });
    test('break statements with expression are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@for ($i = 0; $i < 10; $i++)
test
@break(TRUE)
@endfor`), `<?php for($i = 0; $i < 10; $i++): ?>
test
<?php if(TRUE) break; ?>
<?php endfor; ?>`);
    });
    test('break statements with argument are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@for ($i = 0; $i < 10; $i++)
test
@break(2)
@endfor`), `<?php for($i = 0; $i < 10; $i++): ?>
test
<?php break 2; ?>
<?php endfor; ?>`);
    });
    test('break statements with spaced argument are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@for ($i = 0; $i < 10; $i++)
test
@break( 2 )
@endfor`), `<?php for($i = 0; $i < 10; $i++): ?>
test
<?php break 2; ?>
<?php endfor; ?>`);
    });
    test('break statements with faulty argument are compiled', () => {
        assert_1.default.strictEqual(phpCompiler_1.PhpCompiler.compileString(`@for ($i = 0; $i < 10; $i++)
test
@break(-2)
@endfor`), `<?php for($i = 0; $i < 10; $i++): ?>
test
<?php break 1; ?>
<?php endfor; ?>`);
    });
});
//# sourceMappingURL=compiler_break.test.js.map