import { AbstractNode, DirectiveNode } from '../nodes/nodes';
export declare class ConditionPairAnalyzer {
    static isConditionalStructure(node: AbstractNode): boolean;
    protected static requiresClose(node: DirectiveNode): boolean;
    /**
     * A list of valid closing names for common conditional node types.
     */
    protected static conditionClosingPairs: string[];
    /**
     * Returns a list of valid closing node names for the provided node.
     *
     * @param current The current node's name.
     * @returns
     */
    protected static getValidClosingPairs(current: string): string[];
    /**
    * Descends through the nodes to find the closest logical
    * closing node for each opening conditional node type.
    *
    * @param nodes  The nodes to analyze.
    * @param node The primary node.
    * @param index  The primary node starting index.
    */
    protected static findClosestStructurePair(nodes: AbstractNode[], node: DirectiveNode, index: number): void;
    static pairConditionals(nodes: AbstractNode[]): AbstractNode[];
}
//# sourceMappingURL=conditionPairAnalyzer.d.ts.map