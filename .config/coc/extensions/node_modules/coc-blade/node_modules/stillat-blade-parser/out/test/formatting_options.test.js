"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../formatting/prettier/utils");
const optionDiscovery_1 = require("../formatting/optionDiscovery");
suite('Formatting Options', () => {
    test('formatting inside echos can be disabled', () => {
        const template = `{{ ! $foo }}`;
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(template, {
            ...optionDiscovery_1.defaultSettings,
            formatInsideEcho: false
        }).trim(), template);
    });
    test('formatting of directive args can be disabled', () => {
        const template = `@class([
    'foo' => true
])`;
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(template, {
            ...optionDiscovery_1.defaultSettings,
            formatDirectivePhpParameters: false,
        }).trim(), template);
    });
    test('formatting props args can be disabled', () => {
        let template = `@props([
    'foo' => [],
])`;
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(template, {
            ...optionDiscovery_1.defaultSettings,
            formatDirectivePhpParameters: false,
        }).trim(), template);
        template = `@props([
    'some' => null,
    'property' => null,
])`;
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(template, {
            ...optionDiscovery_1.defaultSettings,
            formatDirectivePhpParameters: false,
        }).trim(), template);
    });
    test('it continues to format the document even with certain things disabled', () => {
        // Note: the spacing on 'foo4' is intentional.
        const template = `@extends('layouts.master')

@props([
    'foo' => [],
    'foo1' => [],
    'foo2' => [],
    'foo3' => [],
    'foo4'      => [],
    'foo5' => [],
    'foo6' => [],
    'foo7' => [
        'foo' => [],
        'foo1' => [],
        'foo2' => [],
        'foo3' => [],
        'foo4' => [],
        'foo5' => [],
        'foo6' => [],
        'foo7' => [],
    ],
])

@section('title', 'Dashboard')

<div @class([
    'foo' => true
])>
    Something
</div>

@section('content')
<h1>Dashboard</h1>

@if(Auth::check())
<p>Welcome back, {{ Auth::user()->name }}!</p>

@if(Auth::user()->isAdmin())
<p>You have <a href="">admin</a> privileges.</p>
@else
<p>You are a regular user.</p>
@endif
@else
<p>Please <a href="{{ route('login') }}">log in</a> to continue.</p>
@endif
@endsection`;
        const out = `@extends('layouts.master')

@props([
    'foo' => [],
    'foo1' => [],
    'foo2' => [],
    'foo3' => [],
    'foo4'      => [],
    'foo5' => [],
    'foo6' => [],
    'foo7' => [
        'foo' => [],
        'foo1' => [],
        'foo2' => [],
        'foo3' => [],
        'foo4' => [],
        'foo5' => [],
        'foo6' => [],
        'foo7' => [],
    ],
])

@section('title', 'Dashboard')

<div @class([
    'foo' => true
])>Something</div>

@section('content')
    <h1>Dashboard</h1>

    @if (Auth::check())
        <p>Welcome back, {{ Auth::user()->name }}!</p>

        @if (Auth::user()->isAdmin())
            <p>
                You have
                <a href="">admin</a>
                privileges.
            </p>
        @else
            <p>You are a regular user.</p>
        @endif
    @else
        <p>
            Please
            <a href="{{ route('login') }}">log in</a>
            to continue.
        </p>
    @endif
@endsection
`;
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(template, {
            ...optionDiscovery_1.defaultSettings,
            formatInsideEcho: false,
            formatDirectivePhpParameters: false,
        }), out);
    });
    test('custom prettier options can be set', () => {
        const input = `{{
    someFunction(
        "foobarbaz",
        "barbazfoo",
        "baz",
    )
}}
`;
        const output = `{{
    someFunction(
        'foobarbaz',
        'barbazfoo',
        'baz',
    )
}}
`;
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(input, {
            ...optionDiscovery_1.defaultSettings,
            phpOptions: {
                singleQuote: true,
                phpVersion: "8.0"
            }
        }), output);
        const output2 = `{{
    someFunction(
        "foobarbaz",
        "barbazfoo",
        "baz",
    )
}}
`;
        // PHP 8 should now be the default.
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(input), output2);
    });
});
//# sourceMappingURL=formatting_options.test.js.map