"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../../../formatting/prettier/utils");
const stringUtilities_1 = require("../../../utilities/stringUtilities");
suite('Pint Transformer Acceptance: infolists_resources_views_components_entry_wrapper_label_blade_php', () => {
    test('pint: it can format infolists_resources_views_components_entry_wrapper_label_blade_php', () => {
        const input = `@props([
    'prefix' => null,
    'suffix' => null,
])

<dt {{ $attributes->class(['filament-infolists-entry-wrapper-label inline-flex items-center space-x-3 rtl:space-x-reverse']) }}>
    {{ $prefix }}

    <span class="text-sm text-gray-500 font-medium leading-4 dark:text-gray-400">
        {{ $slot }}
    </span>

    {{ $suffix }}
</dt>
`;
        const output = `@props([
    'prefix' => null,
    'suffix' => null,
])

<dt
    {{ $attributes->class(['filament-infolists-entry-wrapper-label inline-flex items-center space-x-3 rtl:space-x-reverse']) }}
>
    {{ $prefix }}

    <span
        class="text-sm font-medium leading-4 text-gray-500 dark:text-gray-400"
    >
        {{ $slot }}
    </span>

    {{ $suffix }}
</dt>
`;
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(input).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
        assert_1.default.strictEqual(stringUtilities_1.StringUtilities.normalizeLineEndings((0, utils_1.formatBladeStringWithPint)(output).trim()), stringUtilities_1.StringUtilities.normalizeLineEndings(output.trim()));
    }).timeout(30000);
});
//# sourceMappingURL=infolists_resources_views_components_entry_wrapper_label_blade_php.test.js.map