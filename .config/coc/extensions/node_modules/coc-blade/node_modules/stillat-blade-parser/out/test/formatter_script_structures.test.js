"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../formatting/prettier/utils");
suite('<script> tag containing structures test', () => {
    test('it can apply relative indent levels on <script> tags', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`<html>
            @directive($test)
            
                    @enddirective
            
                <style>
                                            
                                .thing {
                                    background-color: @foreach ($something as $somethingElse)
                                        {{ $thing}}
                                    @endforeach
                                }
                
                                </style>
            
                <style></style>
                <body>
            
            @if ($true)
                <style>
                            
            
            
            
            .thing {
                background-color: @foreach ($something as $somethingElse)
                    {{ $thing}}
                @endforeach
            }
            
                </style>
            
            @endif
            
                    <script>
            
            var app = '@if ($something) something @else something-else @endif'.trim();
            
            if (something) {
              // Do something.
            } else {
              // Do something else.
            }
                    
                    </script>
            
                    <script></script>
                </body>
            </html>`).trim(), `<html>
    @directive($test)
        
    @enddirective

    <style>
        .thing {
            background-color: @foreach ($something as $somethingElse)
                {{ $thing }}
            @endforeach
        }
    </style>

    <style></style>
    <body>
        @if ($true)
            <style>
                .thing {
                    background-color: @foreach ($something as $somethingElse)
                        {{ $thing }}
                    @endforeach
                }
            </style>
        @endif

        <script>
            var app = '@if ($something) something @else something-else @endif'.trim();

            if (something) {
              // Do something.
            } else {
              // Do something else.
            }
        </script>

        <script></script>
    </body>
</html>`);
    });
});
//# sourceMappingURL=formatter_script_structures.test.js.map