{
  "version": 3,
  "sources": ["../src/main.ts", "../src/errors/formatError.ts", "../src/formatter.ts", "../src/comment.ts", "../src/constants.ts", "../src/indent.ts", "../src/regex.ts", "../src/space.ts", "../src/util.ts", "../src/vsctm.ts", "../src/runtimeConfig.ts"],
  "sourcesContent": ["import ignore from 'ignore';\n\nimport chalk from 'chalk';\nimport findConfig from 'find-config';\nimport fs from 'fs';\nimport glob from 'glob';\nimport _ from 'lodash';\nimport nodepath from 'path';\nimport process from 'process';\nimport { Config as TailwindConfig } from 'tailwindcss/types/config';\nimport nodeutil from 'util';\nimport FormatError from './errors/formatError';\nimport Formatter from './formatter';\nimport {\n  EndOfLine,\n  RuntimeConfig,\n  SortHtmlAttributes,\n  WrapAttributes,\n  findRuntimeConfig,\n  readRuntimeConfig,\n} from './runtimeConfig';\nimport * as util from './util';\n\nexport type CLIOption = {\n  write?: boolean;\n  diff?: boolean;\n  checkFormatted?: boolean;\n  progress?: boolean;\n  ignoreFilePath?: string;\n  runtimeConfigPath?: string;\n};\n\nexport type FormatterOption = {\n  indentSize?: number;\n  wrapLineLength?: number;\n  wrapAttributes?: WrapAttributes;\n  wrapAttributesMinAttrs?: number;\n  indentInnerHtml?: boolean;\n  endWithNewline?: boolean;\n  endOfLine?: EndOfLine;\n  useTabs?: boolean;\n  sortTailwindcssClasses?: true;\n  tailwindcssConfigPath?: string;\n  tailwindcssConfig?: TailwindConfig;\n  sortHtmlAttributes?: SortHtmlAttributes;\n  customHtmlAttributesOrder?: string[] | string;\n  noMultipleEmptyLines?: boolean;\n  noPhpSyntaxCheck?: boolean;\n  noSingleQuote?: boolean;\n  extraLiners?: string[];\n};\n\nexport type BladeFormatterOption = CLIOption & FormatterOption;\n\nclass BladeFormatter {\n  diffs: any;\n\n  errors: any;\n\n  formattedFiles: any;\n\n  ignoreFile: any;\n\n  options: FormatterOption & CLIOption;\n\n  outputs: any;\n\n  currentTargetPath: string;\n\n  paths: any;\n\n  targetFiles: any;\n\n  fulFillFiles: any;\n\n  static targetFiles: any;\n\n  runtimeConfigPath: string | null;\n\n  runtimeConfigCache: RuntimeConfig;\n\n  constructor(options: BladeFormatterOption = {}, paths: any = []) {\n    this.currentTargetPath = '.';\n    this.paths = paths;\n    this.options = options;\n    this.targetFiles = [];\n    this.errors = [];\n    this.diffs = [];\n    this.outputs = [];\n    this.formattedFiles = [];\n    this.ignoreFile = '';\n    this.fulFillFiles = [];\n    this.targetFiles = [];\n    this.runtimeConfigPath = options.runtimeConfigPath ?? null;\n    this.runtimeConfigCache = {};\n  }\n\n  async format(content: any, opts: BladeFormatterOption = {}) {\n    this.options = this.options || opts;\n    const target = nodepath.resolve(process.cwd(), 'target');\n    await this.readIgnoreFile(target);\n    await this.findTailwindConfig(target);\n    await this.readRuntimeConfig(target);\n    return new Formatter(this.options).formatContent(content).catch((err) => {\n      throw new FormatError(err);\n    });\n  }\n\n  async formatFromCLI() {\n    try {\n      this.printPreamble();\n      await this.readIgnoreFile(process.cwd());\n      await this.processPaths();\n      this.printResults();\n    } catch (error) {\n      // do nothing\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  fileExists(filepath: string) {\n    return fs.promises\n      .access(filepath, fs.constants.F_OK)\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  async readIgnoreFile(filePath: string) {\n    const configFilename = '.bladeignore';\n\n    let configFilePath: string | null;\n    const worakingDir = nodepath.dirname(filePath);\n\n    if (this.options.ignoreFilePath) {\n      configFilePath = this.options.ignoreFilePath;\n    } else {\n      configFilePath = findConfig(configFilename, { cwd: worakingDir });\n    }\n\n    if (!configFilePath) {\n      return;\n    }\n\n    try {\n      this.ignoreFile = (await fs.promises.readFile(configFilePath)).toString();\n    } catch (err) {\n      // do nothing\n    }\n  }\n\n  async findTailwindConfig(filePath: string) {\n    if (!this.options.sortTailwindcssClasses) {\n      return;\n    }\n\n    const configFilename = 'tailwind.config.js';\n\n    let configFilePath: string | null | undefined;\n\n    if (this.options.tailwindcssConfigPath) {\n      if (this.runtimeConfigPath) {\n        const workingDir = nodepath.dirname(this.runtimeConfigPath);\n        configFilePath = nodepath.resolve(workingDir, this.options.tailwindcssConfigPath);\n      } else if (nodepath.isAbsolute(this.options.tailwindcssConfigPath)) {\n        configFilePath = nodepath.resolve(this.options.tailwindcssConfigPath);\n      } else {\n        configFilePath = nodepath.resolve(this.options.tailwindcssConfigPath);\n      }\n    } else {\n      // lookup tailwind config\n      const workingDir = nodepath.dirname(filePath);\n      configFilePath = findConfig(configFilename, { cwd: workingDir });\n    }\n\n    if (!configFilePath) {\n      return;\n    }\n\n    this.options.tailwindcssConfigPath = configFilePath;\n  }\n\n  async readRuntimeConfig(filePath: string): Promise<RuntimeConfig | undefined> {\n    if (_.isEmpty(this.runtimeConfigCache)) {\n      this.options = _.merge(this.options, this.runtimeConfigCache);\n    }\n\n    let configFile: string | null;\n\n    if (this.options.runtimeConfigPath) {\n      configFile = this.options.runtimeConfigPath;\n    } else {\n      configFile = findRuntimeConfig(filePath);\n    }\n\n    if (_.isNull(configFile)) {\n      return;\n    }\n\n    this.runtimeConfigPath = configFile;\n\n    try {\n      const options = await readRuntimeConfig(configFile);\n\n      this.options = _.mergeWith(this.options, options, (obj, src) => {\n        if (!_.isNil(src)) {\n          return src;\n        }\n\n        return obj;\n      });\n\n      this.runtimeConfigCache = this.options;\n\n      if (this.options.sortTailwindcssClasses) {\n        await this.findTailwindConfig(filePath);\n      }\n    } catch (error: any) {\n      if (error instanceof SyntaxError) {\n        process.stdout.write(chalk.red.bold('\\nBlade Formatter JSON Syntax Error: \\n\\n'));\n        process.stdout.write(nodeutil.format(error));\n        process.exit(1);\n      }\n\n      process.stdout.write(chalk.red.bold(`\\nBlade Formatter Config Error: ${nodepath.basename(configFile)}\\n\\n`));\n      process.stdout.write(`\\`${error.errors[0].instancePath.replace('/', '')}\\` ${error.errors[0].message}\\n\\n`);\n      if (error.errors[0].params?.allowedValues) {\n        console.log(error.errors[0].params?.allowedValues);\n      }\n      process.exit(1);\n    }\n  }\n\n  async processPaths() {\n    await Promise.all(_.map(this.paths, async (path: any) => this.processPath(path)));\n  }\n\n  async processPath(path: any) {\n    await BladeFormatter.globFiles(path)\n      .then((paths: any) => _.map(paths, (target: any) => nodepath.relative('.', target)))\n      .then((paths) => this.filterFiles(paths))\n      .then(this.fulFillFiles)\n      .then((paths) => this.formatFiles(paths));\n  }\n\n  static globFiles(path: any) {\n    return new Promise((resolve, reject) => {\n      glob(path, (error: any, matches: any) => (error ? reject(error) : resolve(matches)));\n    });\n  }\n\n  async filterFiles(paths: any) {\n    if (this.ignoreFile === '') {\n      return paths;\n    }\n\n    const REGEX_FILES_NOT_IN_CURRENT_DIR = /^\\.\\.*/;\n    const filesOutsideTargetDir = _.filter(paths, (path: any) =>\n      REGEX_FILES_NOT_IN_CURRENT_DIR.test(nodepath.relative('.', path)),\n    );\n\n    const filesUnderTargetDir = _.xor(paths, filesOutsideTargetDir);\n\n    const filteredFiles = ignore().add(this.ignoreFile).filter(filesUnderTargetDir);\n\n    return _.concat(filesOutsideTargetDir, filteredFiles);\n  }\n\n  static fulFillFiles(paths: any) {\n    this.targetFiles.push(paths);\n\n    return Promise.resolve(paths);\n  }\n\n  async formatFiles(paths: any) {\n    await Promise.all(_.map(paths, async (path: any) => this.formatFile(path)));\n  }\n\n  async formatFile(path: any) {\n    await this.findTailwindConfig(path);\n    await this.readRuntimeConfig(path);\n\n    await util\n      .readFile(path)\n      .then((data: any) => Promise.resolve(data.toString('utf-8')))\n      .then((content) => new Formatter(this.options).formatContent(content))\n      .then((formatted) => this.checkFormatted(path, formatted))\n      .then((formatted) => this.writeToFile(path, formatted))\n      .catch((err) => {\n        this.handleError(path, err);\n      });\n  }\n\n  async checkFormatted(path: any, formatted: any) {\n    this.printFormattedOutput(path, formatted);\n\n    const originalContent = fs.readFileSync(path, 'utf-8');\n\n    const originalLines = util.splitByLines(originalContent);\n    const formattedLines = util.splitByLines(formatted);\n\n    const diff = util.generateDiff(path, originalLines, formattedLines);\n    this.diffs.push(diff);\n    this.outputs.push(formatted);\n\n    if (diff.length > 0) {\n      if (this.options.progress || this.options.write) {\n        process.stdout.write(chalk.green('F'));\n      }\n\n      if (this.options.checkFormatted) {\n        process.stdout.write(`${path}\\n`);\n        process.exitCode = 1;\n      }\n\n      this.formattedFiles.push(path);\n    }\n\n    if (diff.length === 0) {\n      if (this.options.progress || this.options.write) {\n        process.stdout.write(chalk.green('.'));\n      }\n    }\n\n    return Promise.resolve(formatted);\n  }\n\n  printFormattedOutput(path: any, formatted: any) {\n    if (this.options.write || this.options.checkFormatted) {\n      return;\n    }\n\n    process.stdout.write(`${formatted}`);\n\n    const isLastFile = _.last(this.paths) === path || _.last(this.targetFiles) === path;\n\n    if (isLastFile) {\n      return;\n    }\n\n    // write divider to stdout\n    if (this.paths.length > 1 || this.targetFiles.length > 1) {\n      process.stdout.write('\\n');\n    }\n  }\n\n  writeToFile(path: any, content: any) {\n    if (!this.options.write) {\n      return;\n    }\n\n    if (this.options.checkFormatted) {\n      return;\n    }\n\n    // preserve original content\n    if (content.length === 0 || _.isNull(content) || _.isEmpty(content)) {\n      return;\n    }\n\n    fs.writeFile(path, content, (err: any) => {\n      if (err) {\n        process.stdout.write(`${chalk.red(err.message)}\\n`);\n        process.exit(1);\n      }\n    });\n  }\n\n  handleError(path: any, error: any) {\n    if (this.options.progress || this.options.write) {\n      process.stdout.write(chalk.red('E'));\n    }\n\n    process.exitCode = 1;\n    this.errors.push({ path, message: error.message, error });\n  }\n\n  printPreamble() {\n    if (this.options.checkFormatted) {\n      process.stdout.write('Check formatting... \\n');\n    }\n  }\n\n  async printResults() {\n    this.printDescription();\n    this.printDifferences();\n    this.printFormattedFiles();\n    this.printErrors();\n  }\n\n  printDescription() {\n    if (!this.options.write) {\n      return;\n    }\n\n    const returnLine = '\\n\\n';\n    process.stdout.write(returnLine);\n    process.stdout.write(chalk.bold.green('Fixed: F\\n'));\n    process.stdout.write(chalk.bold.red('Errors: E\\n'));\n    process.stdout.write(chalk.bold('Not Changed: ') + chalk.bold.green('.\\n'));\n  }\n\n  printFormattedFiles() {\n    if (this.formattedFiles.length === 0) {\n      if (this.options.checkFormatted) {\n        process.stdout.write(chalk.bold('\\nAll matched files are formatted! \\n'));\n      }\n\n      return;\n    }\n\n    if (!this.options.write) {\n      if (this.options.checkFormatted) {\n        process.stdout.write(\n          '\\nAbove file(s) are formattable. Forgot to run formatter? ' +\n            `Use ${chalk.bold('--write')} option to overwrite.\\n`,\n        );\n      }\n\n      return;\n    }\n\n    process.stdout.write(chalk.bold('\\nFormatted Files: \\n'));\n    _.each(this.formattedFiles, (path: any) => process.stdout.write(`${chalk.bold(path)}\\n`));\n  }\n\n  printDifferences() {\n    if (!this.options.diff) {\n      return;\n    }\n\n    process.stdout.write(chalk.bold('\\nDifferences: \\n\\n'));\n\n    if (_.filter(this.diffs, (diff: any) => diff.length > 0).length === 0) {\n      process.stdout.write(chalk('No changes found. \\n\\n'));\n\n      return;\n    }\n\n    _.each(this.diffs, (diff: any) => util.printDiffs(diff));\n  }\n\n  printErrors() {\n    if (_.isEmpty(this.errors)) {\n      return;\n    }\n\n    process.stdout.write(chalk.red.bold('\\nErrors: \\n\\n'));\n\n    _.each(this.errors, (error: any) => process.stdout.write(`${nodeutil.format(error)}\\n`));\n  }\n}\n\nexport { BladeFormatter, Formatter };\n", "export default class FormatError extends Error {}\n", "/* eslint-disable class-methods-use-this */\n\nimport { sortClasses } from '@shufo/tailwindcss-class-sorter';\nimport Aigle from 'aigle';\nimport detectIndent from 'detect-indent';\nimport { sortAttributes } from 'html-attribute-sorter';\nimport beautify, { JSBeautifyOptions } from 'js-beautify';\nimport _ from 'lodash';\nimport * as vscodeTmModule from 'vscode-textmate';\nimport xregexp from 'xregexp';\nimport { formatPhpComment } from './comment';\nimport constants from './constants';\nimport {\n  conditionalTokens,\n  cssAtRuleTokens,\n  directivePrefix,\n  hasStartAndEndToken,\n  indentElseTokens,\n  indentEndTokens,\n  indentStartAndEndTokens,\n  indentStartOrElseTokens,\n  indentStartTokens,\n  indentStartTokensWithoutPrefix,\n  inlineFunctionTokens,\n  inlinePhpDirectives,\n  optionalStartWithoutEndTokens,\n  phpKeywordEndTokens,\n  phpKeywordStartTokens,\n  tokenForIndentStartOrElseTokens,\n  unbalancedStartTokens,\n} from './indent';\nimport { BladeFormatterOption, CLIOption, FormatterOption } from './main';\nimport { nestedParenthesisRegex } from './regex';\nimport { SortHtmlAttributes } from './runtimeConfig';\nimport { adjustSpaces } from './space';\nimport * as util from './util';\nimport * as vsctm from './vsctm';\n\nexport default class Formatter {\n  argumentCheck: any;\n\n  bladeBraces: any;\n\n  bladeComments: any;\n\n  bladeDirectives: any;\n\n  htmlAttributes: Array<string>;\n\n  currentIndentLevel: number;\n\n  diffs: any;\n\n  indentCharacter: any;\n\n  indentSize: any;\n\n  inlineDirectives: any;\n\n  conditions: any;\n\n  inlinePhpDirectives: any;\n\n  isInsideCommentBlock: any;\n\n  oniguruma: any;\n\n  options: FormatterOption & CLIOption;\n\n  rawBladeBraces: any;\n\n  ignoredLines: any;\n\n  curlyBracesWithJSs: any;\n\n  rawBlocks: any;\n\n  rawPhpTags: any;\n\n  rawPropsBlocks: any;\n\n  result: any;\n\n  nonnativeScripts: Array<string>;\n\n  scripts: any;\n\n  xData: any;\n\n  xInit: any;\n\n  htmlTags: Array<string>;\n\n  shouldBeIndent: any;\n\n  stack: any;\n\n  templatingStrings: any;\n\n  stringLiteralInPhp: Array<string>;\n\n  shorthandBindings: Array<string>;\n\n  componentAttributes: Array<string>;\n\n  customDirectives: Array<string>;\n\n  directivesInScript: Array<string>;\n\n  unbalancedDirectives: Array<string>;\n\n  escapedBladeDirectives: Array<string>;\n\n  phpComments: Array<string>;\n\n  vsctm: any;\n\n  wrapAttributes: any;\n\n  wrapLineLength: any;\n\n  defaultPhpFormatOption: util.FormatPhpOption;\n\n  endOfLine: string;\n\n  bladeDirectivesInStyle: Array<string>;\n\n  constructor(options: BladeFormatterOption) {\n    this.options = {\n      ...{\n        noPhpSyntaxCheck: false,\n        printWidth: options.wrapLineLength || constants.defaultPrintWidth,\n      },\n      ...options,\n    };\n    this.vsctm = util.optional(this.options).vsctm || vscodeTmModule;\n    this.oniguruma = util.optional(this.options).oniguruma;\n    this.indentCharacter = util.optional(this.options).useTabs ? '\\t' : ' ';\n    this.indentSize = util.optional(this.options).indentSize || 4;\n    this.wrapLineLength = util.optional(this.options).wrapLineLength || constants.defaultPrintWidth;\n    this.wrapAttributes = util.optional(this.options).wrapAttributes || 'auto';\n    this.currentIndentLevel = 0;\n    this.shouldBeIndent = false;\n    this.isInsideCommentBlock = false;\n    this.stack = [];\n    this.ignoredLines = [];\n    this.curlyBracesWithJSs = [];\n    this.rawBlocks = [];\n    this.rawPhpTags = [];\n    this.inlineDirectives = [];\n    this.conditions = [];\n    this.inlinePhpDirectives = [];\n    this.rawPropsBlocks = [];\n    this.bladeDirectives = [];\n    this.bladeDirectivesInStyle = [];\n    this.bladeComments = [];\n    this.phpComments = [];\n    this.bladeBraces = [];\n    this.rawBladeBraces = [];\n    this.nonnativeScripts = [];\n    this.scripts = [];\n    this.htmlAttributes = [];\n    this.xData = [];\n    this.xInit = [];\n    this.htmlTags = [];\n    this.templatingStrings = [];\n    this.stringLiteralInPhp = [];\n    this.shorthandBindings = [];\n    this.componentAttributes = [];\n    this.customDirectives = [];\n    this.directivesInScript = [];\n    this.unbalancedDirectives = [];\n    this.escapedBladeDirectives = [];\n    this.result = [];\n    this.diffs = [];\n    this.defaultPhpFormatOption = { noPhpSyntaxCheck: this.options.noPhpSyntaxCheck, printWidth: this.wrapLineLength };\n    this.endOfLine = util.getEndOfLine(util.optional(this.options).endOfLine);\n  }\n\n  formatContent(content: any) {\n    return new Promise((resolve) => resolve(content))\n      .then((target) => this.preserveIgnoredLines(target))\n      .then((target) => this.preserveNonnativeScripts(target))\n      .then((target) => this.preserveCurlyBraceForJS(target))\n      .then((target) => this.preserveRawPhpTags(target))\n      .then((target) => this.preserveEscapedBladeDirective(target))\n      .then((target) => util.formatAsPhp(target, this.options))\n      .then((target) => this.preserveBladeComment(target))\n      .then((target) => this.preserveBladeBrace(target))\n      .then((target) => this.preserveRawBladeBrace(target))\n      .then((target) => this.preserveConditions(target))\n      .then((target) => this.preserveInlineDirective(target))\n      .then((target) => this.preserveInlinePhpDirective(target))\n      .then((target) => this.preserveBladeDirectivesInScripts(target))\n      .then((target) => this.preserveBladeDirectivesInStyles(target))\n      .then((target) => this.preserveCustomDirective(target))\n      .then((target) => this.preserveUnbalancedDirective(target))\n      .then((target) => this.breakLineBeforeAndAfterDirective(target))\n      .then(async (target) => {\n        this.bladeDirectives = await this.formatPreservedBladeDirectives(this.bladeDirectives);\n        return target;\n      })\n      .then((target) => this.preserveScripts(target))\n      .then((target) => this.sortTailwindcssClasses(target))\n      .then((target) => this.formatXInit(target))\n      .then((target) => this.formatXData(target))\n      .then((target) => this.preserveComponentAttribute(target))\n      .then((target) => this.preserveShorthandBinding(target))\n      .then((target) => this.sortHtmlAttributes(target))\n      .then((target) => this.preservePhpBlock(target))\n      .then((target) => this.preserveHtmlAttributes(target))\n      .then((target) => this.preserveHtmlTags(target))\n      .then((target) => this.formatAsHtml(target))\n      .then((target) => this.formatAsBlade(target))\n      .then((target) => this.restoreHtmlTags(target))\n      .then((target) => this.restoreHtmlAttributes(target))\n      .then((target) => this.restorePhpBlock(target))\n      .then((target) => this.restoreShorthandBinding(target))\n      .then((target) => this.restoreComponentAttribute(target))\n      .then((target) => this.restoreXData(target))\n      .then((target) => this.restoreXInit(target))\n      .then((target) => this.restoreScripts(target))\n      .then((target) => this.restoreUnbalancedDirective(target))\n      .then((target) => this.restoreCustomDirective(target))\n      .then((target) => this.restoreBladeDirectivesInStyles(target))\n      .then((target) => this.restoreBladeDirectivesInScripts(target))\n      .then((target) => this.restoreInlinePhpDirective(target))\n      .then((target) => this.restoreInlineDirective(target))\n      .then((target) => this.restoreConditions(target))\n      .then((target) => this.restoreRawBladeBrace(target))\n      .then((target) => this.restoreBladeBrace(target))\n      .then((target) => this.restoreBladeComment(target))\n      .then((target) => this.restoreEscapedBladeDirective(target))\n      .then((target) => this.restoreRawPhpTags(target))\n      .then((target) => this.restoreCurlyBraceForJS(target))\n      .then((target) => this.restoreNonnativeScripts(target))\n      .then((target) => this.restoreIgnoredLines(target))\n      .then((target) => adjustSpaces(target))\n      .then((formattedResult) => util.checkResult(formattedResult));\n  }\n\n  formatAsHtml(data: any) {\n    const options = {\n      indent_size: util.optional(this.options).indentSize || 4,\n      wrap_line_length: util.optional(this.options).wrapLineLength || 120,\n      wrap_attributes: util.optional(this.options).wrapAttributes || 'auto',\n      wrap_attributes_min_attrs: util.optional(this.options).wrapAttributesMinAttrs,\n      indent_inner_html: util.optional(this.options).indentInnerHtml || false,\n      end_with_newline: util.optional(this.options).endWithNewline || true,\n      max_preserve_newlines: util.optional(this.options).noMultipleEmptyLines ? 1 : undefined,\n      extra_liners: util.optional(this.options).extraLiners,\n      css: {\n        end_with_newline: false,\n      },\n      eol: this.endOfLine,\n    };\n\n    const promise = new Promise((resolve) => resolve(data))\n      .then((content) => util.preserveDirectives(content))\n      .then((preserved) => beautify.html_beautify(preserved, options))\n      .then((content) => util.revertDirectives(content));\n\n    return Promise.resolve(promise);\n  }\n\n  async sortTailwindcssClasses(content: any) {\n    if (!this.options.sortTailwindcssClasses) {\n      return content;\n    }\n\n    return _.replace(content, /(?<=\\s+(?!:)class\\s*=\\s*([\\\"\\']))(.*?)(?=\\1)/gis, (_match, p1, p2) => {\n      if (_.isEmpty(p2)) {\n        return p2;\n      }\n\n      if (this.options.tailwindcssConfigPath) {\n        const options = { tailwindConfigPath: this.options.tailwindcssConfigPath };\n        return sortClasses(p2, options);\n      }\n\n      if (this.options.tailwindcssConfig) {\n        const options: any = { tailwindConfig: this.options.tailwindcssConfig };\n        return sortClasses(p2, options);\n      }\n\n      return sortClasses(p2);\n    });\n  }\n\n  async preserveIgnoredLines(content: any) {\n    return (\n      _.chain(content)\n        // ignore entire file\n        .replace(\n          /(^(?<!.+)^{{--\\s*blade-formatter-disable\\s*--}}.*?)([\\r\\n]*)$(?![\\r\\n])/gis,\n          (_match: any, p1: any, p2: any) => this.storeIgnoredLines(`${p1}${p2.replace(/^\\n/, '')}`),\n        )\n        // range ignore\n        .replace(\n          /(?:({{--\\s*?blade-formatter-disable\\s*?--}}|<!--\\s*?prettier-ignore-start\\s*?-->|{{--\\s*?prettier-ignore-start\\s*?--}})).*?(?:({{--\\s*?blade-formatter-enable\\s*?--}}|<!--\\s*?prettier-ignore-end\\s*?-->|{{--\\s*?prettier-ignore-end\\s*?--}}))/gis,\n          (match: any) => this.storeIgnoredLines(match),\n        )\n        // line ignore\n        .replace(\n          /(?:{{--\\s*?blade-formatter-disable-next-line\\s*?--}}|{{--\\s*?prettier-ignore\\s*?--}}|<!--\\s*?prettier-ignore\\s*?-->)[\\r\\n]+[^\\r\\n]+/gis,\n          (match: any) => this.storeIgnoredLines(match),\n        )\n        .value()\n    );\n  }\n\n  async preserveCurlyBraceForJS(content: any) {\n    return _.replace(content, /@{{(.*?)}}/gs, (match: any, p1: any) => this.storeCurlyBraceForJS(p1));\n  }\n\n  async preservePhpBlock(content: any) {\n    return this.preserveRawPhpBlock(content);\n  }\n\n  async preservePropsBlock(content: any) {\n    return _.replace(content, /@props\\(((?:[^\\\\(\\\\)]|\\([^\\\\(\\\\)]*\\))*)\\)/gs, (match: any, p1: any) =>\n      this.storeRawPropsBlock(p1),\n    );\n  }\n\n  async preserveRawPhpBlock(content: any) {\n    return _.replace(content, /(?<!@)@php(.*?)@endphp/gs, (match: any, p1: any) => this.storeRawBlock(p1));\n  }\n\n  async preserveHtmlTags(content: string) {\n    const contentUnformatted = ['textarea', 'pre'];\n\n    return _.replace(\n      content,\n      new RegExp(`<(${contentUnformatted.join('|')})\\\\s{0,1}.*?>.*?<\\\\/(${contentUnformatted.join('|')})>`, 'gis'),\n      (match: string) => this.storeHtmlTag(match),\n    );\n  }\n\n  /**\n   * preserve custom directives\n   * @param content\n   * @returns\n   */\n  preserveCustomDirective(content: string) {\n    const negativeLookAhead = [\n      ..._.without(indentStartTokens, '@unless'),\n      ...indentEndTokens,\n      ...indentElseTokens,\n      ...['@unless\\\\(.*?\\\\)'],\n    ].join('|');\n\n    const inlineNegativeLookAhead = _.chain([\n      ..._.without(indentStartTokens, '@unless', '@for'),\n      ...indentEndTokens,\n      ...indentElseTokens,\n      ...inlineFunctionTokens,\n      ..._.without(phpKeywordStartTokens, '@for'),\n      ...['@unless[a-z]*\\\\(.*?\\\\)', '@for\\\\(.*?\\\\)'],\n      ...unbalancedStartTokens,\n      ...cssAtRuleTokens,\n    ])\n      .uniq()\n      .join('|')\n      .value();\n\n    const inlineRegex = new RegExp(\n      `(?!(${inlineNegativeLookAhead}))(@([a-zA-Z1-9_\\\\-]+))(?!.*?@end\\\\3)${nestedParenthesisRegex}.*?(?<!@end\\\\5)`,\n      'gis',\n    );\n\n    const regex = new RegExp(\n      `(?!(${negativeLookAhead}))(@(unless)*([a-zA-Z1-9_\\\\-]+))(?!.*?\\\\2)(\\\\s|\\\\(.*?\\\\))+(.*?)(@end\\\\4)`,\n      'gis',\n    );\n\n    let formatted: string;\n\n    // preserve inline directives\n    formatted = _.replace(content, inlineRegex, (match: string) => this.storeInlineCustomDirective(match));\n\n    // preserve begin~else~end directives\n    formatted = _.replace(\n      formatted,\n      regex,\n      (match: string, p1: string, p2: string, p3: string, p4: string, p5: string, p6: string, p7: string) => {\n        if (indentStartTokens.includes(p2)) {\n          return match;\n        }\n\n        let result: string = match;\n\n        // begin directive\n        result = _.replace(result, new RegExp(`${p2}(${nestedParenthesisRegex})*`, 'gim'), (beginStr: string) =>\n          this.storeBeginCustomDirective(beginStr),\n        );\n        // end directive\n        result = _.replace(result, p7, this.storeEndCustomDirective(p7));\n        // else directive\n        result = _.replace(result, new RegExp(`@else${p4}(${nestedParenthesisRegex})*`, 'gim'), (elseStr: string) =>\n          this.storeElseCustomDirective(elseStr),\n        );\n\n        return result;\n      },\n    );\n\n    // replace directives recursively\n    if (regex.test(formatted)) {\n      formatted = this.preserveCustomDirective(formatted);\n    }\n\n    return formatted;\n  }\n\n  preserveInlineDirective(content: string): string {\n    // preserve inline directives inside html tag\n    const regex = new RegExp(\n      `(<[\\\\w\\\\-\\\\_]+?[^>]*?)${directivePrefix}(${indentStartTokensWithoutPrefix.join(\n        '|',\n      )})(\\\\s*?)?(\\\\([^)]*?\\\\))?((?:(?!@end\\\\2).)+)(@end\\\\2|@endif)(.*?/*>)`,\n      'gims',\n    );\n    const replaced = _.replace(\n      content,\n      regex,\n      (_match: string, p1: string, p2: string, p3: string, p4: string, p5: string, p6: string, p7: string) => {\n        if (p3 === undefined && p4 === undefined) {\n          return `${p1}${this.storeInlineDirective(`${directivePrefix}${p2.trim()}${p5.trim()} ${p6.trim()}`)}${p7}`;\n        }\n        if (p3 === undefined) {\n          return `${p1}${this.storeInlineDirective(\n            `${directivePrefix}${p2.trim()}${p4.trim()}${p5}${p6.trim()}`,\n          )}${p7}`;\n        }\n        if (p4 === undefined) {\n          return `${p1}${this.storeInlineDirective(\n            `${directivePrefix}${p2.trim()}${p3}${p5.trim()} ${p6.trim()}`,\n          )}${p7}`;\n        }\n\n        return `${p1}${this.storeInlineDirective(\n          `${directivePrefix}${p2.trim()}${p3}${p4.trim()} ${p5.trim()} ${p6.trim()}`,\n        )}${p7}`;\n      },\n    );\n\n    if (regex.test(replaced)) {\n      return this.preserveInlineDirective(replaced);\n    }\n\n    return replaced;\n  }\n\n  async preserveInlinePhpDirective(content: any) {\n    return _.replace(\n      content,\n      // eslint-disable-next-line max-len\n      new RegExp(`(?!\\\\/\\\\*.*?\\\\*\\\\/)(${inlineFunctionTokens.join('|')})(\\\\s*?)${nestedParenthesisRegex}`, 'gmsi'),\n      (match: any) => this.storeInlinePhpDirective(match),\n    );\n  }\n\n  preserveBladeDirectivesInScripts(content: any) {\n    return _.replace(content, /(?<=<script[^>]*?(?<!=)>)(.*?)(?=<\\/script>)/gis, (match: string) => {\n      const targetTokens = [...indentStartTokens, ...inlineFunctionTokens];\n\n      if (new RegExp(targetTokens.join('|'), 'gmi').test(match) === false) {\n        if (/^[\\s\\n]+$/.test(match)) {\n          return match.trim();\n        }\n\n        return match;\n      }\n\n      const inlineFunctionDirectives = inlineFunctionTokens.join('|');\n      const inlineFunctionRegex = new RegExp(\n        // eslint-disable-next-line max-len\n        `(?!\\\\/\\\\*.*?\\\\*\\\\/)(${inlineFunctionDirectives})(\\\\s*?)${nestedParenthesisRegex}`,\n        'gmi',\n      );\n      const endTokens = _.chain(indentEndTokens).without('@endphp');\n\n      let formatted: string = match;\n\n      formatted = _.replace(formatted, inlineFunctionRegex, (matched: any) =>\n        this.storeBladeDirective(\n          util.formatRawStringAsPhp(matched, { ...this.options, printWidth: util.printWidthForInline }),\n        ),\n      );\n\n      formatted = _.replace(\n        formatted,\n        new RegExp(`(${indentStartTokens.join('|')})\\\\s*?${nestedParenthesisRegex}`, 'gis'),\n        (matched) => `if ( /*${this.storeBladeDirectiveInScript(matched)}*/ ) {`,\n      );\n\n      formatted = _.replace(\n        formatted,\n        new RegExp(`(${[...indentElseTokens, ...indentStartOrElseTokens].join('|')})(?!\\\\w+?\\\\s*?\\\\(.*?\\\\))`, 'gis'),\n        (matched) => `/***script_placeholder***/} /* ${this.storeBladeDirectiveInScript(matched)} */ {`,\n      );\n\n      formatted = _.replace(\n        formatted,\n        new RegExp(`(${endTokens.join('|')})`, 'gis'),\n        (matched) => `/***script_placeholder***/} /*${this.storeBladeDirectiveInScript(matched)}*/`,\n      );\n\n      formatted = _.replace(formatted, /(?<!@)@php(.*?)@endphp/gis, (_matched: any, p1: any) => this.storeRawBlock(p1));\n\n      // custom directive\n      formatted = this.preserveCustomDirectiveInScript(formatted);\n\n      return formatted;\n    });\n  }\n\n  preserveBladeDirectivesInStyles(content: string) {\n    return _.replace(content, /(?<=<style[^>]*?(?<!=)>)(.*?)(?=<\\/style>)/gis, (inside: string) => {\n      let result: string = inside;\n\n      const inlineRegex = new RegExp(\n        `(?!${['@end', '@else', ...cssAtRuleTokens].join('|')})@(\\\\w+)\\\\s*?(?![^\\\\1]*@end\\\\1)${nestedParenthesisRegex}`,\n        'gmi',\n      );\n\n      result = _.replace(\n        result,\n        inlineRegex,\n        (match: string) => `${this.storeBladeDirectiveInStyle(match)} {/* inline_directive */}`,\n      );\n\n      const customStartRegex = new RegExp(\n        `(?!${['@end', '@else', ...cssAtRuleTokens].join('|')})@(\\\\w+)\\\\s*?(${nestedParenthesisRegex})`,\n        'gmi',\n      );\n\n      result = _.replace(\n        result,\n        customStartRegex,\n        (match: string) => `${this.storeBladeDirectiveInStyle(match)} { /*start*/`,\n      );\n\n      const startRegex = new RegExp(`(${indentStartTokens.join('|')})\\\\s*?(${nestedParenthesisRegex})`, 'gmi');\n\n      result = _.replace(\n        result,\n        startRegex,\n        (match: string) => `${this.storeBladeDirectiveInStyle(match)} { /*start*/`,\n      );\n\n      const elseRegex = new RegExp(\n        `(${['@else\\\\w+', ...indentElseTokens].join('|')})\\\\s*?(${nestedParenthesisRegex})?`,\n        'gmi',\n      );\n\n      result = _.replace(\n        result,\n        elseRegex,\n        (match: string) => `} ${this.storeBladeDirectiveInStyle(match)} { /*else*/`,\n      );\n\n      const endRegex = new RegExp(`${['@end\\\\w+', ...indentEndTokens].join('|')}`, 'gmi');\n\n      result = _.replace(result, endRegex, (match: string) => `} /* ${this.storeBladeDirectiveInStyle(match)} */`);\n\n      return result;\n    });\n  }\n\n  /**\n   *\n   * @param content string between <script>~</script>\n   * @returns string\n   */\n  preserveCustomDirectiveInScript(content: string): string {\n    const negativeLookAhead = [\n      ..._.without(indentStartTokens, '@unless'),\n      ...indentEndTokens,\n      ...indentElseTokens,\n      ...['@unless\\\\(.*?\\\\)'],\n    ].join('|');\n\n    const inlineNegativeLookAhead = [\n      ..._.without(indentStartTokens, '@unless'),\n      ...indentEndTokens,\n      ...indentElseTokens,\n      ...inlineFunctionTokens,\n      ...phpKeywordStartTokens,\n      ...['@unless[a-z]*\\\\(.*?\\\\)'],\n      ...unbalancedStartTokens,\n    ].join('|');\n\n    const inlineRegex = new RegExp(\n      `(?!(${inlineNegativeLookAhead}))(@([a-zA-Z1-9_\\\\-]+))(?!.*?@end\\\\3)${nestedParenthesisRegex}.*?(?<!@end\\\\5)`,\n      'gis',\n    );\n\n    const regex = new RegExp(\n      `(?!(${negativeLookAhead}))(@(unless)*([a-zA-Z1-9_\\\\-]+))(?!.*?\\\\2)(\\\\s|\\\\(.*?\\\\))+(.*?)(@end\\\\4)`,\n      'gis',\n    );\n\n    let formatted: string;\n\n    // preserve inline directives\n    formatted = _.replace(content, inlineRegex, (match: string) => this.storeInlineCustomDirective(match));\n\n    // preserve begin~else~end directives\n    formatted = _.replace(\n      formatted,\n      regex,\n      (match: string, p1: string, p2: string, p3: string, p4: string, p5: string, p6: string, p7: string) => {\n        if (indentStartTokens.includes(p2)) {\n          return match;\n        }\n\n        let result: string = match;\n\n        result = _.replace(\n          result,\n          new RegExp(`${p2}(${nestedParenthesisRegex})*`, 'gim'),\n          (beginStr: string) => `if ( /*${this.storeBladeDirectiveInScript(beginStr)}*/ ) {`,\n        );\n\n        result = _.replace(\n          result,\n          new RegExp(`@else${p4}(${nestedParenthesisRegex})*`, 'gim'),\n          (elseStr: string) => `/***script_placeholder***/} /* ${this.storeBladeDirectiveInScript(elseStr)} */ {`,\n        );\n        result = _.replace(\n          result,\n          p7,\n          (endStr: string) => `/***script_placeholder***/} /*${this.storeBladeDirectiveInScript(endStr)}*/`,\n        );\n\n        return result;\n      },\n    );\n\n    // replace directives recursively\n    if (regex.test(formatted)) {\n      formatted = this.preserveCustomDirectiveInScript(formatted);\n    }\n\n    return formatted;\n  }\n\n  /**\n   * Recursively insert line break before and after directives\n   * @param content string\n   * @returns\n   */\n  breakLineBeforeAndAfterDirective(content: string): string {\n    // handle directive around html tags\n    // eslint-disable-next-line\n    content = _.replace(\n      content,\n      new RegExp(\n        `(?<=<.*?(?<!=)>)(${_.without(indentStartTokens, '@php').join(\n          '|',\n        )})(\\\\s*)${nestedParenthesisRegex}.*?(?=<.*?>)`,\n        'gmis',\n      ),\n      (match) => `\\n${match.trim()}\\n`,\n    );\n\n    // eslint-disable-next-line\n    content = _.replace(\n      content,\n      new RegExp(`(?<=<.*?(?<!=)>).*?(${_.without(indentEndTokens, '@endphp').join('|')})(?=<.*?>)`, 'gmis'),\n      (match) => `\\n${match.trim()}\\n`,\n    );\n\n    const unbalancedConditions = ['@case', ...indentElseTokens];\n\n    // eslint-disable-next-line\n    content = _.replace(\n      content,\n      new RegExp(`(\\\\s*?)(${unbalancedConditions.join('|')})(\\\\s*?)${nestedParenthesisRegex}(\\\\s*)`, 'gmi'),\n      (match) => `\\n${match.trim()}\\n`,\n      // handle else directive\n    );\n\n    // eslint-disable-next-line\n    content = _.replace(\n      content,\n      new RegExp(`\\\\s*?(?!(${_.without(indentElseTokens, '@else').join('|')}))@else\\\\s+`, 'gim'),\n      (match) => `\\n${match.trim()}\\n`,\n      // handle case directive\n    );\n\n    // eslint-disable-next-line\n    content = _.replace(content, /@case\\S*?\\s*?@case/gim, (match) => {\n      // handle unbalanced echos\n      return `${match.replace('\\n', '')}`;\n    });\n\n    const unbalancedEchos = ['@break'];\n\n    _.forEach(unbalancedEchos, (directive) => {\n      // eslint-disable-next-line\n      content = _.replace(content, new RegExp(`(\\\\s*?)${directive}\\\\s+`, 'gmi'), (match) => {\n        return `\\n${match.trim()}\\n\\n`;\n      });\n    });\n\n    // other directives\n    _.forEach(['@default'], (directive) => {\n      // eslint-disable-next-line\n      content = _.replace(content, new RegExp(`(\\\\s*?)${directive}\\\\s*`, 'gmi'), (match) => {\n        return `\\n\\n${match.trim()}\\n`;\n      });\n    });\n\n    // add line break around balanced directives\n    const directives = _.chain(indentStartTokens)\n      .map((x: any) => _.replace(x, /@/, ''))\n      .value();\n\n    _.forEach(directives, (directive: any) => {\n      try {\n        const recursivelyMatched = xregexp.matchRecursive(content, `\\\\@${directive}`, `\\\\@end${directive}`, 'gmi', {\n          valueNames: [null, 'left', 'match', 'right'],\n        });\n\n        if (_.isEmpty(recursivelyMatched)) {\n          return;\n        }\n\n        // eslint-disable-next-line\n        for (const matched of recursivelyMatched) {\n          if (matched.name === 'match') {\n            if (new RegExp(indentStartTokens.join('|')).test(matched.value)) {\n              // eslint-disable-next-line\n              content = _.replace(\n                content,\n                matched.value,\n                this.breakLineBeforeAndAfterDirective(util.escapeReplacementString(matched.value)),\n              );\n            }\n\n            const innerRegex = new RegExp(`^(\\\\s*?)${nestedParenthesisRegex}(.*)`, 'gmis');\n\n            const replaced = _.replace(\n              `${matched.value}`,\n              innerRegex,\n              (_match: string, p1: string, p2: string, p3: string) => {\n                if (p3.trim() === '') {\n                  return `${p1}(${p2.trim()})\\n${p3.trim()}`;\n                }\n\n                return `${p1}(${p2.trim()})\\n${p3.trim()}\\n`;\n              },\n            );\n\n            // eslint-disable-next-line\n            content = _.replace(content, matched.value, util.escapeReplacementString(replaced));\n          }\n        }\n      } catch (error) {\n        // do nothing to ignore unmatched directive pair\n      }\n    });\n\n    return content;\n  }\n\n  async preserveEscapedBladeDirective(content: string) {\n    return _.replace(content, /@@\\w*/gim, (match: string) => this.storeEscapedBladeDirective(match));\n  }\n\n  async preserveBladeComment(content: any) {\n    return _.replace(content, /\\{\\{--(.*?)--\\}\\}/gs, (match: string) => this.storeBladeComment(match));\n  }\n\n  preservePhpComment(content: string) {\n    return _.replace(content, /\\/\\*(?:[^*]|[\\r\\n]|(?:\\*+(?:[^*\\/]|[\\r\\n])))*\\*+\\//gi, (match: string) =>\n      this.storePhpComment(match),\n    );\n  }\n\n  async preserveBladeBrace(content: any) {\n    return _.replace(content, /\\{\\{(.*?)\\}\\}/gs, (_match: any, p1: any) => {\n      // if content is blank\n      if (p1 === '') {\n        return this.storeBladeBrace(p1, p1.length);\n      }\n\n      // preserve a space if content contains only space, tab, or new line character\n      if (!/\\S/.test(p1)) {\n        return this.storeBladeBrace(' ', ' '.length);\n      }\n\n      // any other content\n      return this.storeBladeBrace(p1.trim(), p1.trim().length);\n    });\n  }\n\n  async preserveRawBladeBrace(content: any) {\n    return _.replace(content, /\\{!!(.*?)!!\\}/gs, (_match: any, p1: any) => {\n      // if content is blank\n      if (p1 === '') {\n        return this.storeRawBladeBrace(p1);\n      }\n\n      // preserve a space if content contains only space, tab, or new line character\n      if (!/\\S/.test(p1)) {\n        return this.storeRawBladeBrace(' ');\n      }\n\n      // any other content\n      return this.storeRawBladeBrace(p1.trim());\n    });\n  }\n\n  async preserveConditions(content: any) {\n    const regex = new RegExp(\n      `(${conditionalTokens.join(\n        '|',\n        // eslint-disable-next-line max-len\n      )})(\\\\s*?)${nestedParenthesisRegex}`,\n      'gi',\n    );\n    return _.replace(\n      content,\n      regex,\n      (match: any, p1: any, p2: any, p3: any) => `${p1}${p2}(${this.storeConditions(p3)})`,\n    );\n  }\n\n  /**\n   * preserve unbalanced directive like @hasSection\n   */\n  preserveUnbalancedDirective(content: any) {\n    const regex = new RegExp(`((${unbalancedStartTokens.join('|')})(?!.*?\\\\2)(?:\\\\s|\\\\(.*?\\\\)))+(?=.*?@endif)`, 'gis');\n\n    let replaced: string = _.replace(\n      content,\n      regex,\n      (_match: string, p1: string) => `${this.storeUnbalancedDirective(p1)}`,\n    );\n\n    if (regex.test(replaced)) {\n      replaced = this.preserveUnbalancedDirective(replaced);\n    }\n\n    return replaced;\n  }\n\n  async preserveRawPhpTags(content: any) {\n    return _.replace(content, /<\\?php(.*?)\\?>/gms, (match: any) => this.storeRawPhpTags(match));\n  }\n\n  async preserveNonnativeScripts(content: string) {\n    return _.replace(\n      content,\n      /<script[^>]*?type=([\"'])(?!(text\\/javascript|module))[^\\1]*?\\1[^>]*?>.*?<\\/script>/gis,\n      (match: string) => this.storeNonnativeScripts(match),\n    );\n  }\n\n  async preserveScripts(content: any) {\n    return _.replace(content, /<script.*?>.*?<\\/script>/gis, (match: any) => this.storeScripts(match));\n  }\n\n  async preserveHtmlAttributes(content: any) {\n    return _.replace(\n      content,\n      /(?<=<[\\w]*?[\\s].*?)[\\w\\-\\_\\:]+?=([\"']).*?(?<!\\\\)\\1(?=.*?(?<!=)>)/gms,\n      (match: string) => `${this.storeHtmlAttribute(match)}`,\n    );\n  }\n\n  async sortHtmlAttributes(content: string) {\n    const strategy: SortHtmlAttributes = this.options.sortHtmlAttributes ?? 'none';\n\n    if (!_.isEmpty(strategy) && strategy !== 'none') {\n      const regexes = this.options.customHtmlAttributesOrder;\n\n      if (_.isArray(regexes)) {\n        return sortAttributes(content, { order: strategy, customRegexes: regexes });\n      }\n\n      // when option is string\n      const customRegexes = _.chain(regexes).split(',').map(_.trim).value();\n\n      return sortAttributes(content, { order: strategy, customRegexes });\n    }\n\n    return content;\n  }\n\n  async preserveShorthandBinding(content: string) {\n    return _.replace(\n      content,\n      /(?<=<(?!livewire:)[^<]*?(\\s|x-bind)):{1}(?<!=>)[\\w\\-_.]*?=([\"'])(?!=>)[^]*?\\2(?=[^>]*?\\/*?>)/gim,\n      (match: any) => `${this.storeShorthandBinding(match)}`,\n    );\n  }\n\n  async preserveComponentAttribute(content: string) {\n    return _.replace(\n      content,\n      /(?<=<(x-|livewire:)[^<]*?\\s):{1,2}(?<!=>)[\\w\\-_.]*?=([\"'])(?!=>)[^]*?\\2(?=[^>]*?\\/*?>)/gim,\n      (match: any) => `${this.storeComponentAttribute(match)}`,\n    );\n  }\n\n  async formatXData(content: any) {\n    return _.replace(\n      content,\n      /(\\s*)x-data=\"(.*?)\"(\\s*)/gs,\n      (_match: any, p1: any, p2: any, p3: any) => `${p1}x-data=\"${this.storeXData(p2)}\"${p3}`,\n    );\n  }\n\n  async formatXInit(content: any) {\n    return _.replace(\n      content,\n      /(\\s*)x-init=\"(.*?)\"(\\s*)/gs,\n      (_match: any, p1: any, p2: any, p3: any) => `${p1}x-init=\"${this.storeXInit(p2)}\"${p3}`,\n    );\n  }\n\n  preserveStringLiteralInPhp(content: any) {\n    return _.replace(\n      content,\n      /(\\\"([^\\\\]|\\\\.)*?\\\"|\\'([^\\\\]|\\\\.)*?\\')/gm,\n      (match: string) => `${this.storeStringLiteralInPhp(match)}`,\n    );\n  }\n\n  storeIgnoredLines(value: any) {\n    return this.getIgnoredLinePlaceholder(this.ignoredLines.push(value) - 1);\n  }\n\n  storeCurlyBraceForJS(value: any) {\n    return this.getCurlyBraceForJSPlaceholder(this.curlyBracesWithJSs.push(value) - 1);\n  }\n\n  storeRawBlock(value: any) {\n    return this.getRawPlaceholder(this.rawBlocks.push(value) - 1);\n  }\n\n  storeInlineDirective(value: any) {\n    return this.getInlinePlaceholder(this.inlineDirectives.push(value) - 1, value.length);\n  }\n\n  storeConditions(value: any) {\n    return this.getConditionPlaceholder(this.conditions.push(value) - 1);\n  }\n\n  storeInlinePhpDirective(value: any) {\n    return this.getInlinePhpPlaceholder(this.inlinePhpDirectives.push(value) - 1);\n  }\n\n  storeRawPropsBlock(value: any) {\n    return this.getRawPropsPlaceholder(this.rawPropsBlocks.push(value) - 1);\n  }\n\n  storeBladeDirective(value: any) {\n    return this.getBladeDirectivePlaceholder(this.bladeDirectives.push(value) - 1);\n  }\n\n  storeBladeDirectiveInStyle(value: string) {\n    return this.getBladeDirectiveInStylePlaceholder((this.bladeDirectivesInStyle.push(value) - 1).toString());\n  }\n\n  storeEscapedBladeDirective(value: string) {\n    return this.getEscapedBladeDirectivePlaceholder((this.escapedBladeDirectives.push(value) - 1).toString());\n  }\n\n  storeBladeComment(value: any) {\n    return this.getBladeCommentPlaceholder(this.bladeComments.push(value) - 1);\n  }\n\n  storePhpComment(value: string) {\n    return this.getPhpCommentPlaceholder((this.phpComments.push(value) - 1).toString());\n  }\n\n  storeHtmlTag(value: string) {\n    return this.getHtmlTagPlaceholder((this.htmlTags.push(value) - 1).toString());\n  }\n\n  storeInlineCustomDirective(value: string) {\n    return this.getInlineCustomDirectivePlaceholder((this.customDirectives.push(value) - 1).toString());\n  }\n\n  storeBeginCustomDirective(value: string) {\n    return this.getBeginCustomDirectivePlaceholder((this.customDirectives.push(value) - 1).toString());\n  }\n\n  storeElseCustomDirective(value: string) {\n    return this.getElseCustomDirectivePlaceholder((this.customDirectives.push(value) - 1).toString());\n  }\n\n  storeEndCustomDirective(value: string) {\n    return this.getEndCustomDirectivePlaceholder((this.customDirectives.push(value) - 1).toString());\n  }\n\n  storeUnbalancedDirective(value: string) {\n    return this.getUnbalancedDirectivePlaceholder((this.unbalancedDirectives.push(value) - 1).toString());\n  }\n\n  storeBladeBrace(value: any, length: any) {\n    const index = this.bladeBraces.push(value) - 1;\n    const brace = '{{  }}';\n    return this.getBladeBracePlaceholder(index, length + brace.length);\n  }\n\n  storeRawBladeBrace(value: any) {\n    const index = this.rawBladeBraces.push(value) - 1;\n    return this.getRawBladeBracePlaceholder(index);\n  }\n\n  storeRawPhpTags(value: any) {\n    const index = this.rawPhpTags.push(value) - 1;\n    return this.getRawPhpTagPlaceholder(index);\n  }\n\n  storeNonnativeScripts(value: string) {\n    const index = this.nonnativeScripts.push(value) - 1;\n    return this.getNonnativeScriptPlaceholder(index.toString());\n  }\n\n  storeScripts(value: any) {\n    const index = this.scripts.push(value) - 1;\n    return this.getScriptPlaceholder(index);\n  }\n\n  storeHtmlAttribute(value: string) {\n    const index = this.htmlAttributes.push(value) - 1;\n\n    if (value.length > 0) {\n      return this.getHtmlAttributePlaceholder(index.toString(), value.length);\n    }\n\n    return this.getHtmlAttributePlaceholder(index.toString(), 0);\n  }\n\n  storeShorthandBinding(value: any) {\n    const index = this.shorthandBindings.push(value) - 1;\n\n    return this.getShorthandBindingPlaceholder(index.toString(), value.length);\n  }\n\n  storeComponentAttribute(value: any) {\n    const index = this.componentAttributes.push(value) - 1;\n\n    return this.getComponentAttributePlaceholder(index.toString());\n  }\n\n  storeXData(value: any) {\n    const index = this.xData.push(value) - 1;\n    return this.getXDataPlaceholder(index);\n  }\n\n  storeXInit(value: any) {\n    const index = this.xInit.push(value) - 1;\n    return this.getXInitPlaceholder(index);\n  }\n\n  storeTemplatingString(value: any) {\n    const index = this.templatingStrings.push(value) - 1;\n    return this.getTemplatingStringPlaceholder(index);\n  }\n\n  storeStringLiteralInPhp(value: any) {\n    const index = this.stringLiteralInPhp.push(value) - 1;\n    return this.getStringLiteralInPhpPlaceholder(index);\n  }\n\n  storeBladeDirectiveInScript(value: string) {\n    return this.getBladeDirectiveInScriptPlaceholder((this.directivesInScript.push(value) - 1).toString());\n  }\n\n  getIgnoredLinePlaceholder(replace: any) {\n    return _.replace('___ignored_line_#___', '#', replace);\n  }\n\n  getCurlyBraceForJSPlaceholder(replace: any) {\n    return _.replace('___js_curly_brace_#___', '#', replace);\n  }\n\n  getRawPlaceholder(replace: any) {\n    return _.replace('___raw_block_#___', '#', replace);\n  }\n\n  getInlinePlaceholder(replace: any, length = 0) {\n    if (length > 0) {\n      const template = '___inline_directive_#___';\n      const gap = length - template.length;\n      return _.replace(`___inline_directive_${_.repeat('_', gap > 0 ? gap : 0)}#___`, '#', replace);\n    }\n\n    return _.replace('___inline_directive_+?#___', '#', replace);\n  }\n\n  getConditionPlaceholder(replace: any) {\n    return _.replace('___directive_condition_#___', '#', replace);\n  }\n\n  getInlinePhpPlaceholder(replace: any) {\n    return _.replace('___inline_php_directive_#___', '#', replace);\n  }\n\n  getRawPropsPlaceholder(replace: any) {\n    return _.replace('@__raw_props_block_#__@', '#', replace);\n  }\n\n  getBladeDirectivePlaceholder(replace: any) {\n    return _.replace('___blade_directive_#___', '#', replace);\n  }\n\n  getBladeDirectiveInStylePlaceholder(replace: string) {\n    return _.replace('.___blade_directive_in_style_#__', '#', replace);\n  }\n\n  getEscapedBladeDirectivePlaceholder(replace: string) {\n    return _.replace('___escaped_directive_#___', '#', replace);\n  }\n\n  getBladeCommentPlaceholder(replace: any) {\n    return _.replace('___blade_comment_#___', '#', replace);\n  }\n\n  getPhpCommentPlaceholder(replace: string) {\n    return _.replace('___php_comment_#___', '#', replace);\n  }\n\n  getBladeBracePlaceholder(replace: any, length = 0) {\n    if (length > 0) {\n      const template = '___blade_brace_#___';\n      const gap = length - template.length;\n      return _.replace(`___blade_brace_${_.repeat('_', gap > 0 ? gap : 0)}#___`, '#', replace);\n    }\n\n    return _.replace('___blade_brace_+?#___', '#', replace);\n  }\n\n  getRawBladeBracePlaceholder(replace: any) {\n    return _.replace('___raw_blade_brace_#___', '#', replace);\n  }\n\n  getRawPhpTagPlaceholder(replace: any) {\n    return _.replace('___raw_php_tag_#___', '#', replace);\n  }\n\n  getNonnativeScriptPlaceholder(replace: string) {\n    return _.replace('<blade___non_native_scripts_#___ />', '#', replace);\n  }\n\n  getScriptPlaceholder(replace: any) {\n    return _.replace('<blade___scripts_#___ />', '#', replace);\n  }\n\n  getHtmlTagPlaceholder(replace: string) {\n    return _.replace('<blade___html_tags_#___ />', '#', replace);\n  }\n\n  getInlineCustomDirectivePlaceholder(replace: string) {\n    return _.replace('___inline_cd_#___', '#', replace);\n  }\n\n  getBeginCustomDirectivePlaceholder(replace: string) {\n    return _.replace('@customdirective(___#___)', '#', replace);\n  }\n\n  getElseCustomDirectivePlaceholder(replace: string) {\n    return _.replace('@else(___#___)', '#', replace);\n  }\n\n  getEndCustomDirectivePlaceholder(replace: string) {\n    return _.replace('@endcustomdirective(___#___)', '#', replace);\n  }\n\n  getUnbalancedDirectivePlaceholder(replace: string) {\n    return _.replace('@if (unbalanced___#___)', '#', replace);\n  }\n\n  getHtmlAttributePlaceholder(replace: string, length: any) {\n    if (length && length > 0) {\n      const template = '___attrs_#___';\n      const gap = length - template.length;\n      return _.replace(`___attrs${_.repeat('_', gap > 0 ? gap : 1)}#___`, '#', replace);\n    }\n\n    if (_.isNull(length)) {\n      return _.replace('___attrs_#___', '#', replace);\n    }\n\n    return _.replace('___attrs_+?#___', '#', replace);\n  }\n\n  getShorthandBindingPlaceholder(replace: string, length: any = 0) {\n    if (length && length > 0) {\n      const template = '___short_binding_#___';\n      const gap = length - template.length;\n      return _.replace(`___short_binding_${_.repeat('_', gap > 0 ? gap : 1)}#___`, '#', replace);\n    }\n    return _.replace('___short_binding_+?#___', '#', replace);\n  }\n\n  getComponentAttributePlaceholder(replace: string) {\n    return _.replace('___attribute_#___', '#', replace);\n  }\n\n  getXInitPlaceholder(replace: any) {\n    return _.replace('___x_init_#___', '#', replace);\n  }\n\n  getPlaceholder(attribute: string, replace: any, length: any = null) {\n    if (length && length > 0) {\n      const template = `___${attribute}_#___`;\n      const gap = length - template.length;\n      return _.replace(`___${attribute}${_.repeat('_', gap > 0 ? gap : 1)}#___`, '#', replace);\n    }\n\n    if (_.isNull(length)) {\n      return _.replace(`___${attribute}_#___`, '#', replace);\n    }\n\n    return _.replace(`s___${attribute}_+?#___`, '#', replace);\n  }\n\n  getXDataPlaceholder(replace: any) {\n    return _.replace('___x_data_#___', '#', replace);\n  }\n\n  getTemplatingStringPlaceholder(replace: any) {\n    return _.replace('___templating_str_#___', '#', replace);\n  }\n\n  getStringLiteralInPhpPlaceholder(replace: any) {\n    return _.replace(\"'___php_content_#___'\", '#', replace);\n  }\n\n  getBladeDirectiveInScriptPlaceholder(replace: any) {\n    return _.replace('___directives_script_#___', '#', replace);\n  }\n\n  restoreIgnoredLines(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getIgnoredLinePlaceholder('(\\\\d+)')}`, 'gm'),\n      (_match: any, p1: any) => this.ignoredLines[p1],\n    );\n  }\n\n  restoreCurlyBraceForJS(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getCurlyBraceForJSPlaceholder('(\\\\d+)')}`, 'gm'),\n      (_match: any, p1: any) => `@{{ ${beautify.js_beautify(this.curlyBracesWithJSs[p1].trim())} }}`,\n    );\n  }\n\n  restorePhpBlock(content: any) {\n    return this.restoreRawPhpBlock(content).then((target) => this.restoreRawPropsBlock(target));\n  }\n\n  async restoreRawPhpBlock(content: any) {\n    return _.replace(content, new RegExp(`${this.getRawPlaceholder('(\\\\d+)')}`, 'gm'), (match: any, p1: number) => {\n      let rawBlock = this.rawBlocks[p1];\n      const placeholder = this.getRawPlaceholder(p1.toString());\n      const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n      const indent = detectIndent(matchedLine[0]);\n\n      if (this.isInline(rawBlock) && this.isMultilineStatement(rawBlock)) {\n        rawBlock = util.formatStringAsPhp(`<?php\\n${rawBlock}\\n?>`, this.options).trim();\n      } else if (rawBlock.split('\\n').length > 1) {\n        rawBlock = util.formatStringAsPhp(`<?php${rawBlock}?>`, this.options).trimRight('\\n');\n      } else {\n        rawBlock = `<?php${rawBlock}?>`;\n      }\n\n      return _.replace(rawBlock, /^(\\s*)?<\\?php(.*?)\\?>/gms, (_matched: any, _q1: any, q2: any) => {\n        if (this.isInline(rawBlock)) {\n          return `@php${q2}@endphp`;\n        }\n\n        let preserved = this.preserveStringLiteralInPhp(q2);\n        preserved = this.preservePhpComment(preserved);\n        let indented = this.indentRawBlock(indent, preserved);\n        indented = this.restorePhpComment(indented);\n        const restored = this.restoreStringLiteralInPhp(indented);\n\n        return `@php${restored}@endphp`;\n      });\n    });\n  }\n\n  async restoreRawPropsBlock(content: any) {\n    const regex = this.getRawPropsPlaceholder('(\\\\d+)');\n    return _.replace(\n      content,\n      new RegExp(regex, 'gms'),\n      (_match: any, p1: any) =>\n        `@props(${util\n          .formatRawStringAsPhp(this.rawPropsBlocks[p1], {\n            ...this.options,\n            printWidth: util.printWidthForInline,\n          })\n          .trimRight()})`,\n    );\n  }\n\n  isInline(content: any) {\n    return _.split(content, '\\n').length === 1;\n  }\n\n  isMultilineStatement(rawBlock: any) {\n    return util.formatStringAsPhp(`<?php${rawBlock}?>`, this.options).trimRight().split('\\n').length > 1;\n  }\n\n  indentRawBlock(indent: detectIndent.Indent, content: any) {\n    if (this.isInline(content)) {\n      return `${indent.indent}${content}`;\n    }\n\n    const leftIndentAmount = indent.amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefix = this.indentCharacter.repeat(indentLevel < 0 ? 0 : (indentLevel + 1) * this.indentSize);\n    const prefixForEnd = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const lines = content.split('\\n');\n\n    return _.chain(lines)\n      .map((line: any, index: any) => {\n        if (index === 0) {\n          return line.trim();\n        }\n\n        if (index === lines.length - 1) {\n          return prefixForEnd + line;\n        }\n\n        return prefix + line;\n      })\n      .join('\\n')\n      .value();\n  }\n\n  indentBladeDirectiveBlock(indent: detectIndent.Indent, content: any) {\n    if (_.isEmpty(indent.indent)) {\n      return content;\n    }\n\n    if (this.isInline(content)) {\n      return `${indent.indent}${content}`;\n    }\n\n    const leftIndentAmount = indent.amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefixSpaces = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n    const prefixForEnd = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const lines = content.split('\\n');\n\n    return _.chain(lines)\n      .map((line: any, index: any) => {\n        if (index === lines.length - 1) {\n          return prefixForEnd + line;\n        }\n\n        return prefixSpaces + line;\n      })\n      .value()\n      .join('\\n');\n  }\n\n  indentScriptBlock(indent: detectIndent.Indent, content: any) {\n    if (_.isEmpty(indent.indent)) {\n      return content;\n    }\n\n    if (this.isInline(content)) {\n      return `${content}`;\n    }\n\n    const leftIndentAmount = indent.amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefixSpaces = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n    const prefixForEnd = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const preserved = _.replace(content, /`.*?`/gs, (match: any) => this.storeTemplatingString(match));\n\n    const lines = preserved.split('\\n');\n\n    const indented = _.chain(lines)\n      .map((line: any, index: any) => {\n        if (index === 0) {\n          return line;\n        }\n\n        if (index === lines.length - 1) {\n          return prefixForEnd + line;\n        }\n\n        if (_.isEmpty(line)) {\n          return line;\n        }\n\n        return prefixSpaces + line;\n      })\n      .value()\n      .join('\\n');\n\n    return this.restoreTemplatingString(`${indented}`);\n  }\n\n  indentRawPhpBlock(indent: detectIndent.Indent, content: any) {\n    if (_.isEmpty(indent.indent)) {\n      return content;\n    }\n\n    if (this.isInline(content)) {\n      return `${content}`;\n    }\n\n    const leftIndentAmount = indent.amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefixSpaces = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const lines = content.split('\\n');\n\n    return _.chain(lines)\n      .map((line: any, index: any) => {\n        if (index === 0) {\n          return line.trim();\n        }\n\n        return prefixSpaces + line;\n      })\n      .value()\n      .join('\\n');\n  }\n\n  indentComponentAttribute(prefix: string, content: string) {\n    if (_.isEmpty(prefix)) {\n      return content;\n    }\n\n    if (this.isInline(content)) {\n      return `${content}`;\n    }\n\n    if (this.isInline(content) && /\\S/.test(prefix)) {\n      return `${content}`;\n    }\n\n    const leftIndentAmount = detectIndent(prefix).amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefixSpaces = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const lines = content.split('\\n');\n\n    return _.chain(lines)\n      .map((line: any, index: any) => {\n        if (index === 0) {\n          return line.trim();\n        }\n\n        return prefixSpaces + line;\n      })\n      .value()\n      .join('\\n');\n  }\n\n  indentPhpComment(indent: detectIndent.Indent, content: string) {\n    if (_.isEmpty(indent.indent)) {\n      return content;\n    }\n\n    if (this.isInline(content)) {\n      return `${content}`;\n    }\n\n    const leftIndentAmount = indent.amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefixSpaces = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const lines = content.split('\\n');\n    let withoutCommentLine = false;\n\n    return _.chain(lines)\n      .map((line: string, index: number) => {\n        if (index === 0) {\n          return line.trim();\n        }\n\n        if (!line.trim().startsWith('*')) {\n          withoutCommentLine = true;\n          return line;\n        }\n\n        if (line.trim().endsWith('*/') && withoutCommentLine) {\n          return line;\n        }\n\n        return prefixSpaces + line;\n      })\n      .join('\\n')\n      .value();\n  }\n\n  restoreBladeDirectivesInStyles(content: string) {\n    return _.replace(content, /(?<=<style[^>]*?(?<!=)>)(.*?)(?=<\\/style>)/gis, (inside: string) => {\n      let result: string = inside;\n\n      const inlineRegex = new RegExp(\n        `${this.getBladeDirectiveInStylePlaceholder('(\\\\d+)')} {\\\\s*?\\/\\\\* inline_directive \\\\*\\/\\\\s*?}`,\n        'gmi',\n      );\n\n      result = _.replace(result, inlineRegex, (match: string, p1: number) => this.bladeDirectivesInStyle[p1]);\n\n      const elseRegex = new RegExp(\n        `}\\\\s*?${this.getBladeDirectiveInStylePlaceholder('(\\\\d+)')} {\\\\s*?\\/\\\\*else\\\\*\\/`,\n        'gmi',\n      );\n\n      result = _.replace(result, elseRegex, (match: string, p1: number) => `${this.bladeDirectivesInStyle[p1]}`);\n\n      const startRegex = new RegExp(\n        `${this.getBladeDirectiveInStylePlaceholder('(\\\\d+)')} {\\\\s*?\\/\\\\*start\\\\*\\/`,\n        'gmi',\n      );\n\n      result = _.replace(result, startRegex, (match: string, p1: number) => `${this.bladeDirectivesInStyle[p1]}`);\n\n      const endRegex = new RegExp(`}\\\\s*?\\/\\\\* ${this.getBladeDirectiveInStylePlaceholder('(\\\\d+)')} \\\\*\\/`, 'gmi');\n\n      result = _.replace(result, endRegex, (match: string, p1: number) => `${this.bladeDirectivesInStyle[p1]}`);\n\n      return result;\n    });\n  }\n\n  restoreBladeDirectivesInScripts(content: any) {\n    const regex = new RegExp(`${this.getBladeDirectivePlaceholder('(\\\\d+)')}`, 'gm');\n\n    // restore inline blade directive\n    let result = _.replace(content, regex, (_match: any, p1: number) => {\n      const placeholder = this.getBladeDirectivePlaceholder(p1.toString());\n      const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n      const indent = detectIndent(matchedLine[0]);\n\n      return this.indentBladeDirectiveBlock(indent, this.bladeDirectives[p1]);\n    });\n\n    result = _.replace(result, /(?<=<script[^>]*?(?<!=)>)(.*?)(?=<\\/script>)/gis, (match: string) => {\n      let formatted: string = match;\n\n      // restore begin\n      formatted = _.replace(\n        formatted,\n        new RegExp(\n          `if \\\\( \\\\/\\\\*(?:(?:${this.getBladeDirectiveInScriptPlaceholder('(\\\\d+)')}).*?)\\\\*\\\\/ \\\\) \\\\{`,\n          'gis',\n        ),\n        (_match: any, p1: any) => `${this.directivesInScript[p1]}`,\n      );\n\n      // restore else\n      formatted = _.replace(\n        formatted,\n        new RegExp(\n          `} \\\\/\\\\* (?:${this.getBladeDirectiveInScriptPlaceholder(\n            '(\\\\d+)',\n          )}) \\\\*\\\\/ {(\\\\s*?\\\\(___directive_condition_\\\\d+___\\\\))?`,\n          'gim',\n        ),\n        (_match: any, p1: number, p2: string) => {\n          if (_.isUndefined(p2)) {\n            return `${this.directivesInScript[p1].trim()}`;\n          }\n\n          return `${this.directivesInScript[p1].trim()} ${(p2 ?? '').trim()}`;\n        },\n      );\n\n      // restore end\n      formatted = _.replace(\n        formatted,\n        new RegExp(`} \\\\/\\\\*(?:${this.getBladeDirectiveInScriptPlaceholder('(\\\\d+)')})\\\\*\\\\/`, 'gis'),\n        (_match: any, p1: any) => `${this.directivesInScript[p1]}`,\n      );\n\n      // restore php block\n      formatted = _.replace(\n        formatted,\n        new RegExp(`${this.getRawPlaceholder('(\\\\d+)')}`, 'gm'),\n        // eslint-disable-next-line no-shadow\n        (match: any, p1: number) => {\n          let rawBlock = this.rawBlocks[p1];\n          const placeholder = this.getRawPlaceholder(p1.toString());\n          const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n          const indent = detectIndent(matchedLine[0]);\n\n          if (this.isInline(rawBlock) && this.isMultilineStatement(rawBlock)) {\n            rawBlock = util.formatStringAsPhp(`<?php\\n${rawBlock}\\n?>`, this.options).trim();\n          } else if (rawBlock.split('\\n').length > 1) {\n            rawBlock = util.formatStringAsPhp(`<?php${rawBlock}?>`, this.options).trim();\n          } else {\n            rawBlock = `<?php${rawBlock}?>`;\n          }\n\n          return _.replace(rawBlock, /^(\\s*)?<\\?php(.*?)\\?>/gms, (_matched: any, _q1: any, q2: any) => {\n            if (this.isInline(rawBlock)) {\n              return `@php${q2}@endphp`;\n            }\n\n            const preserved = this.preserveStringLiteralInPhp(q2);\n            const indented = this.indentRawBlock(indent, preserved);\n            const restored = this.restoreStringLiteralInPhp(indented);\n\n            return `@php${restored}@endphp`;\n          });\n        },\n      );\n\n      // delete place holder\n      formatted = _.replace(\n        formatted,\n        /(?<=[\\S]+)(\\s*?)\\/\\*\\*\\*script_placeholder\\*\\*\\*\\/(\\s)?/gim,\n        (_match: any, p1: string, p2: string) => {\n          if (p2 !== undefined) {\n            return p2;\n          }\n\n          const group1 = p1 ?? '';\n          const group2 = p2 ?? '';\n\n          return group1 + group2;\n        },\n      );\n\n      return formatted;\n    });\n\n    if (regex.test(result)) {\n      result = this.restoreBladeDirectivesInScripts(result);\n    }\n\n    return result;\n  }\n\n  async formatPreservedBladeDirectives(directives: any) {\n    return Aigle.map(directives, async (content: any) => {\n      const formattedAsHtml = await this.formatAsHtml(content);\n      const formatted = await this.formatAsBlade(formattedAsHtml);\n      return formatted.trimRight('\\n');\n    });\n  }\n\n  restoreBladeComment(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res: any) =>\n      _.replace(res, new RegExp(`${this.getBladeCommentPlaceholder('(\\\\d+)')}`, 'gms'), (_match: any, p1: any) =>\n        this.bladeComments[p1].replace(/{{--(?=\\S)/g, '{{-- ').replace(/(?<=\\S)--}}/g, ' --}}'),\n      ),\n    );\n  }\n\n  restorePhpComment(content: string) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getPhpCommentPlaceholder('(\\\\d+)')};{0,1}`, 'gms'),\n      (_match: string, p1: number) => {\n        const placeholder = this.getPhpCommentPlaceholder(p1.toString());\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n        const formatted = formatPhpComment(this.phpComments[p1]);\n\n        return this.indentPhpComment(indent, formatted);\n      },\n    );\n  }\n\n  async restoreEscapedBladeDirective(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res: any) =>\n      _.replace(\n        res,\n        new RegExp(`${this.getEscapedBladeDirectivePlaceholder('(\\\\d+)')}`, 'gms'),\n        (_match: string, p1: number) => this.escapedBladeDirectives[p1],\n      ),\n    );\n  }\n\n  restoreBladeBrace(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res: any) =>\n      _.replace(res, new RegExp(`${this.getBladeBracePlaceholder('(\\\\d+)')}`, 'gm'), (_match: string, p1: number) => {\n        const placeholder = this.getBladeBracePlaceholder(p1.toString());\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n        const bladeBrace = this.bladeBraces[p1];\n\n        if (bladeBrace.trim() === '') {\n          return `{{${bladeBrace}}}`;\n        }\n\n        if (this.isInline(bladeBrace)) {\n          return `{{ ${util\n            .formatRawStringAsPhp(bladeBrace, {\n              ...this.options,\n              trailingCommaPHP: false,\n              printWidth: util.printWidthForInline,\n            })\n            .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n            .split('\\n')\n            .map((line) => line.trim())\n            .join('')\n            // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n            .trimRight('\\n')} }}`;\n        }\n\n        return `{{ ${this.indentRawPhpBlock(\n          indent,\n          util\n            .formatRawStringAsPhp(bladeBrace, this.options)\n            .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n            .trim()\n            // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n            .trimRight('\\n'),\n        )} }}`;\n      }),\n    );\n  }\n\n  restoreRawBladeBrace(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res) =>\n      _.replace(\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n        res,\n        new RegExp(`${this.getRawBladeBracePlaceholder('(\\\\d+)')}`, 'gms'),\n        (_match: any, p1: any) => {\n          const placeholder = this.getRawBladeBracePlaceholder(p1);\n          const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n          const indent = detectIndent(matchedLine[0]);\n          const bladeBrace = this.rawBladeBraces[p1];\n\n          if (bladeBrace.trim() === '') {\n            return `{!!${bladeBrace}!!}`;\n          }\n\n          return this.indentRawPhpBlock(\n            indent,\n            `{!! ${util\n              .formatRawStringAsPhp(bladeBrace, this.options)\n              .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n              .trim()} !!}`,\n          );\n        },\n      ),\n    );\n  }\n\n  restoreInlineDirective(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res) =>\n      _.replace(\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n        res,\n        new RegExp(`${this.getInlinePlaceholder('(\\\\d+)')}`, 'gms'),\n        (_match: any, p1: any) => {\n          const matched = this.inlineDirectives[p1];\n          return matched;\n        },\n      ),\n    );\n  }\n\n  restoreConditions(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res: any) =>\n      _.replace(res, new RegExp(`${this.getConditionPlaceholder('(\\\\d+)')}`, 'gms'), (_match: any, p1: any) => {\n        const placeholder = this.getConditionPlaceholder(p1);\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n\n        const matched = this.conditions[p1];\n\n        return this.formatExpressionInsideBladeDirective(matched, indent);\n      }),\n    );\n  }\n\n  restoreUnbalancedDirective(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res: any) =>\n      _.replace(res, /@if \\(unbalanced___(\\d+)___\\)/gms, (_match: any, p1: any) => {\n        const matched = this.unbalancedDirectives[p1];\n        return matched;\n      }),\n    );\n  }\n\n  restoreInlinePhpDirective(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res) =>\n      _.replace(\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n        res,\n        new RegExp(`${this.getInlinePhpPlaceholder('(\\\\d+)')}`, 'gm'),\n        (_match: any, p1: any) => {\n          const matched = this.inlinePhpDirectives[p1];\n          const placeholder = this.getInlinePhpPlaceholder(p1);\n          const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n          const indent = detectIndent(matchedLine[0]);\n\n          if (matched.includes('@php')) {\n            return `${util\n              .formatRawStringAsPhp(matched, { ...this.options, printWidth: util.printWidthForInline })\n              .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n              .trim()\n              // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n              .trimRight('\\n')}`;\n          }\n\n          if (new RegExp(inlinePhpDirectives.join('|'), 'gi').test(matched)) {\n            const formatted = _.replace(\n              matched,\n              new RegExp(\n                `(?<=@(${_.map(inlinePhpDirectives, (token) => token.substring(1)).join('|')}).*?\\\\()(.*)(?=\\\\))`,\n                'gis',\n              ),\n              (match2: any, p3: any, p4: any) => {\n                let wrapLength = this.wrapLineLength;\n\n                if (['button', 'class'].includes(p3)) {\n                  wrapLength = 80;\n                }\n\n                if (p3 === 'include') {\n                  wrapLength = this.wrapLineLength - `func`.length - p1.length - indent.amount;\n                }\n\n                return this.formatExpressionInsideBladeDirective(p4, indent, wrapLength);\n              },\n            );\n\n            return formatted;\n          }\n\n          return `${util\n            .formatRawStringAsPhp(matched, { ...this.options, printWidth: util.printWidthForInline })\n            .trimEnd()}`;\n        },\n      ),\n    );\n  }\n\n  restoreRawPhpTags(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res) =>\n      _.replace(\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n        res,\n        new RegExp(`${this.getRawPhpTagPlaceholder('(\\\\d+)')}`, 'gms'),\n        (_match: any, p1: any) => {\n          // const result= this.rawPhpTags[p1];\n          try {\n            const matched = this.rawPhpTags[p1];\n            const commentBlockExists = /(?<=<\\?php\\s*?)\\/\\*.*?\\*\\/(?=\\s*?\\?>)/gim.test(matched);\n            const inlinedComment = commentBlockExists && this.isInline(matched);\n            const placeholder = this.getRawPhpTagPlaceholder(p1);\n            const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n            const indent = detectIndent(matchedLine[0]);\n\n            if (inlinedComment) {\n              return matched;\n            }\n\n            const result = util.formatStringAsPhp(this.rawPhpTags[p1], this.options).trim().trimRight('\\n');\n\n            if (this.isInline(result)) {\n              return result;\n            }\n\n            let preserved = this.preservePhpComment(result);\n\n            if (indent.indent) {\n              preserved = this.indentRawPhpBlock(indent, preserved);\n            }\n\n            const restored = this.restorePhpComment(preserved);\n\n            return restored;\n          } catch (e) {\n            return `${this.rawPhpTags[p1]}`;\n          }\n        },\n      ),\n    );\n  }\n\n  restoreNonnativeScripts(content: string) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getNonnativeScriptPlaceholder('(\\\\d+)')}`, 'gmi'),\n      (_match: any, p1: number) => `${this.nonnativeScripts[p1]}`,\n    );\n  }\n\n  restoreScripts(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res) =>\n      _.replace(\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n        res,\n        new RegExp(`${this.getScriptPlaceholder('(\\\\d+)')}`, 'gim'),\n        (_match: any, p1: number) => {\n          const script = this.scripts[p1];\n\n          const placeholder = this.getScriptPlaceholder(p1);\n          const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n          const indent = detectIndent(matchedLine[0]);\n          const useTabs = util.optional(this.options).useTabs || false;\n\n          const options = {\n            indent_size: util.optional(this.options).indentSize || 4,\n            wrap_line_length: util.optional(this.options).wrapLineLength || 120,\n            wrap_attributes: util.optional(this.options).wrapAttributes || 'auto',\n            wrap_attributes_min_attrs: util.optional(this.options).wrapAttributesMinAttrs,\n            indent_inner_html: util.optional(this.options).indentInnerHtml || false,\n            extra_liners: util.optional(this.options).extraLiners,\n            indent_with_tabs: useTabs,\n            end_with_newline: false,\n            templating: ['php'],\n          };\n\n          if (useTabs) {\n            return this.indentScriptBlock(\n              indent,\n              _.replace(beautify.html_beautify(script, options), /\\t/g, '\\t'.repeat(this.indentSize)),\n            );\n          }\n\n          return this.indentScriptBlock(indent, beautify.html_beautify(script, options));\n        },\n      ),\n    );\n  }\n\n  async restoreCustomDirective(content: string) {\n    return this.restoreInlineCustomDirective(content)\n      .then((data: string) => this.restoreBeginCustomDirective(data))\n      .then((data: string) => this.restoreElseCustomDirective(data))\n      .then((data: string) => this.restoreEndCustomDirective(data));\n  }\n\n  async restoreInlineCustomDirective(content: string) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getInlineCustomDirectivePlaceholder('(\\\\d+)')}`, 'gim'),\n      (_match: any, p1: number) => {\n        const placeholder = this.getInlineCustomDirectivePlaceholder(p1.toString());\n        const matchedLine = content.match(new RegExp(`^(.*?)${_.escapeRegExp(placeholder)}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n\n        const matched = `${this.customDirectives[p1]}`;\n        return _.replace(matched, /(@[a-zA-z0-9\\-_]+)(.*)/gis, (match2: string, p2: string, p3: string) => {\n          try {\n            const formatted = util\n              .formatRawStringAsPhp(`func${p3}`, {\n                ...this.options,\n                printWidth: util.printWidthForInline,\n              })\n              .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n              .replace(/,(\\s*?\\))$/gm, (_m, p4) => p4)\n              .trim()\n              .substring(4);\n            return `${p2}${this.indentComponentAttribute(indent.indent, formatted)}`;\n          } catch (error) {\n            return `${match2}`;\n          }\n        });\n      },\n    );\n  }\n\n  async restoreBeginCustomDirective(content: string) {\n    return _.replace(\n      content,\n      new RegExp(`@customdirective\\\\(___(\\\\d+)___\\\\)\\\\s*?(${nestedParenthesisRegex})*`, 'gim'),\n      (_match: any, p1: number) => {\n        const placeholder = this.getBeginCustomDirectivePlaceholder(p1.toString());\n        const matchedLine = content.match(new RegExp(`^(.*?)${_.escapeRegExp(placeholder)}`, 'gmi')) ?? [''];\n\n        const indent = detectIndent(matchedLine[0]);\n        const matched = `${this.customDirectives[p1]}`;\n\n        return _.replace(matched, /(@[a-zA-z0-9\\-_]+)(.*)/gis, (match2: string, p3: string, p4: string) => {\n          try {\n            const formatted = util\n              .formatRawStringAsPhp(`func${p4}`, { ...this.options, trailingCommaPHP: false })\n              .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n              .trim()\n              .substring(4);\n            return `${p3}${this.indentComponentAttribute(indent.indent, formatted)}`;\n          } catch (error) {\n            return `${match2}`;\n          }\n        });\n      },\n    );\n  }\n\n  async restoreElseCustomDirective(content: string) {\n    return _.replace(content, /@else\\(___(\\d+)___\\)/gim, (_match: any, p1: number) => `${this.customDirectives[p1]}`);\n  }\n\n  async restoreEndCustomDirective(content: string) {\n    return _.replace(\n      content,\n      /@endcustomdirective\\(___(\\d+)___\\)/gim,\n      (_match: any, p1: number) => `${this.customDirectives[p1]}`,\n    );\n  }\n\n  async restoreHtmlTags(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getHtmlTagPlaceholder('(\\\\d+)')}`, 'gim'),\n      (_match: any, p1: number) => {\n        const placeholder = this.getHtmlTagPlaceholder(p1.toString());\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n\n        const options = {\n          indent_size: util.optional(this.options).indentSize || 4,\n          wrap_line_length: util.optional(this.options).wrapLineLength || 120,\n          wrap_attributes: util.optional(this.options).wrapAttributes || 'auto',\n          wrap_attributes_min_attrs: util.optional(this.options).wrapAttributesMinAttrs,\n          indent_inner_html: util.optional(this.options).indentInnerHtml || false,\n          extra_liners: util.optional(this.options).extraLiners,\n          end_with_newline: false,\n          templating: ['php'],\n        };\n\n        const matched = this.htmlTags[p1];\n        const openingTag = _.first(matched.match(/(<(textarea|pre).*?(?<!=)>)(?=.*?<\\/\\2>)/gis));\n\n        if (openingTag === undefined) {\n          return `${this.indentScriptBlock(indent, beautify.html_beautify(matched, options))}`;\n        }\n\n        const restofTag = matched.substring(openingTag.length, matched.length);\n\n        return `${this.indentScriptBlock(indent, beautify.html_beautify(openingTag, options))}${restofTag}`;\n      },\n    );\n  }\n\n  restoreHtmlAttributes(content: string) {\n    return _.replace(\n      content,\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n      new RegExp(`${this.getHtmlAttributePlaceholder('(\\\\d+)')}`, 'gms'),\n      (_match: string, p1: number) => this.htmlAttributes[p1],\n    );\n  }\n\n  restoreXData(content: any) {\n    return _.replace(content, new RegExp(`${this.getXDataPlaceholder('(\\\\d+)')}`, 'gm'), (_match: any, p1: any) => {\n      const placeholder = this.getXDataPlaceholder(p1.toString());\n      const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n      const indent = detectIndent(matchedLine[0]);\n\n      const lines = this.formatJS(this.xData[p1]).split('\\n');\n\n      const indentLevel = indent.amount / (this.indentCharacter === '\\t' ? 4 : 1);\n\n      const firstLine = lines[0];\n      const prefix = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel);\n      const offsettedLines = lines.map((line) => prefix + line);\n      offsettedLines[0] = firstLine;\n      return `${offsettedLines.join('\\n')}`;\n    });\n  }\n\n  restoreXInit(content: any) {\n    return _.replace(content, new RegExp(`${this.getXInitPlaceholder('(\\\\d+)')}`, 'gm'), (_match: any, p1: number) => {\n      const placeholder = this.getXInitPlaceholder(p1.toString());\n      const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n      const indent = detectIndent(matchedLine[0]);\n\n      const lines = this.formatJS(this.xInit[p1]).split('\\n');\n\n      const indentLevel = indent.amount / (this.indentCharacter === '\\t' ? 4 : 1);\n\n      const firstLine = lines[0];\n      const prefix = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel);\n      const offsettedLines = lines.map((line) => prefix + line);\n      offsettedLines[0] = firstLine;\n      return `${offsettedLines.join('\\n')}`;\n    });\n  }\n\n  restoreTemplatingString(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getTemplatingStringPlaceholder('(\\\\d+)')}`, 'gms'),\n      (_match: any, p1: any) => this.templatingStrings[p1],\n    );\n  }\n\n  restoreStringLiteralInPhp(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getStringLiteralInPhpPlaceholder('(\\\\d+)')}`, 'gms'),\n      (_match: any, p1: any) => this.stringLiteralInPhp[p1],\n    );\n  }\n\n  restoreComponentAttribute(content: string): string {\n    return _.replace(\n      content,\n      new RegExp(`${this.getComponentAttributePlaceholder('(\\\\d+)')}`, 'gim'),\n      (_match: any, p1: any) => {\n        const placeholder = this.getComponentAttributePlaceholder(p1);\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n\n        const matched = this.componentAttributes[p1];\n        const formatted = _.replace(\n          matched,\n          /(:{1,2}.*?=)([\"'])(.*?)(?=\\2)/gis,\n          (match, p2: string, p3: string, p4: string) => {\n            if (p4 === '') {\n              return match;\n            }\n\n            if (p2.startsWith('::')) {\n              return `${p2}${p3}${beautify\n                .js_beautify(p4, {\n                  wrap_line_length: this.wrapLineLength - indent.amount,\n                  brace_style: 'preserve-inline',\n                })\n                .trim()}`;\n            }\n\n            if (this.isInline(p4)) {\n              try {\n                return `${p2}${p3}${util\n                  .formatRawStringAsPhp(p4, {\n                    ...this.options,\n                    printWidth: this.wrapLineLength - indent.amount,\n                  })\n                  .trimEnd()}`;\n              } catch (error) {\n                return `${p2}${p3}${p4}`;\n              }\n            }\n\n            return `${p2}${p3}${util\n              .formatRawStringAsPhp(p4, {\n                ...this.options,\n                printWidth: this.wrapLineLength - indent.amount,\n              })\n              .trimEnd()}`;\n          },\n        );\n\n        return `${this.indentComponentAttribute(indent.indent, formatted)}`;\n      },\n    );\n  }\n\n  restoreShorthandBinding(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getShorthandBindingPlaceholder('(\\\\d+)')}`, 'gms'),\n      (_match: any, p1: any) => {\n        const placeholder = this.getShorthandBindingPlaceholder(p1);\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n\n        const matched = this.shorthandBindings[p1];\n\n        const formatted = _.replace(\n          matched,\n          /(:{1,2}.*?=)([\"'])(.*?)(?=\\2)/gis,\n          (match, p2: string, p3: string, p4: string) => {\n            const beautifyOpts: JSBeautifyOptions = {\n              wrap_line_length: this.wrapLineLength - indent.amount,\n              brace_style: 'preserve-inline',\n            };\n\n            if (p4 === '') {\n              return match;\n            }\n\n            if (this.isInline(p4)) {\n              try {\n                return `${p2}${p3}${beautify.js_beautify(p4, beautifyOpts).trimEnd()}`;\n              } catch (error) {\n                return `${p2}${p3}${p4}`;\n              }\n            }\n\n            return `${p2}${p3}${beautify.js_beautify(p4, beautifyOpts).trimEnd()}`;\n          },\n        );\n\n        return `${this.indentComponentAttribute(indent.indent, formatted)}`;\n      },\n    );\n  }\n\n  async formatAsBlade(content: any) {\n    // init parameters\n    this.currentIndentLevel = 0;\n    this.shouldBeIndent = false;\n\n    const splitedLines = util.splitByLines(content);\n    const vsctmModule = await new vsctm.VscodeTextmate(this.vsctm, this.oniguruma);\n    // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n    const registry = vsctmModule.createRegistry(content);\n\n    const formatted = registry\n      .loadGrammar('text.html.php.blade')\n      .then((grammar: any) => vsctmModule.tokenizeLines(splitedLines, grammar))\n      .then((tokenizedLines: any) => this.formatTokenizedLines(splitedLines, tokenizedLines))\n      .catch((err: any) => {\n        throw err;\n      });\n\n    return formatted;\n  }\n\n  formatTokenizedLines(splitedLines: any, tokenizedLines: any) {\n    this.result = [];\n    this.stack = [];\n    for (let i = 0; i < splitedLines.length; i += 1) {\n      const originalLine = splitedLines[i];\n      const tokenizeLineResult = tokenizedLines[i];\n      this.processLine(tokenizeLineResult, originalLine);\n    }\n\n    return this.result.join(this.endOfLine);\n  }\n\n  processLine(tokenizeLineResult: any, originalLine: any) {\n    this.processTokenizeResult(tokenizeLineResult, originalLine);\n  }\n\n  processKeyword(token: any) {\n    if (_.includes(phpKeywordStartTokens, token)) {\n      if (_.last(this.stack) === '@case' && token === '@case') {\n        this.decrementIndentLevel();\n      }\n\n      if (token === '@case') {\n        this.shouldBeIndent = true;\n      }\n\n      this.stack.push(token);\n      return;\n    }\n\n    if (_.includes(phpKeywordEndTokens, token)) {\n      if (token === '@break') {\n        this.decrementIndentLevel();\n        this.stack.pop();\n        this.stack.push(token);\n        return;\n      }\n\n      if (_.last(this.stack) !== '@hassection') {\n        this.stack.pop();\n        return;\n      }\n    }\n\n    if (_.includes(indentStartAndEndTokens, token)) {\n      this.shouldBeIndent = true;\n      this.stack.push(token);\n    }\n\n    if (_.includes(indentStartOrElseTokens, token)) {\n      if (_.includes(tokenForIndentStartOrElseTokens, _.last(this.stack))) {\n        this.decrementIndentLevel();\n        this.shouldBeIndent = true;\n      }\n    }\n\n    if (_.includes(indentStartTokens, token)) {\n      if (_.last(this.stack) === '@section' && token === '@section') {\n        if (this.currentIndentLevel > 0) this.decrementIndentLevel();\n        this.shouldBeIndent = true;\n        this.stack.push(token);\n      } else {\n        this.shouldBeIndent = true;\n        this.stack.push(token);\n      }\n    }\n\n    if (_.includes(indentEndTokens, token)) {\n      if (token === '@endswitch' && _.last(this.stack) === '@default') {\n        this.decrementIndentLevel(2);\n        this.shouldBeIndent = false;\n        return;\n      }\n\n      this.decrementIndentLevel();\n      this.shouldBeIndent = false;\n      this.stack.pop();\n    }\n\n    if (_.includes(indentElseTokens, token)) {\n      this.decrementIndentLevel();\n      this.shouldBeIndent = true;\n    }\n  }\n\n  processToken(tokenStruct: any, token: any) {\n    if (_.includes(tokenStruct.scopes, 'punctuation.definition.comment.begin.blade')) {\n      this.isInsideCommentBlock = true;\n    }\n\n    if (this.argumentCheck) {\n      const { count, inString, stack } = this.argumentCheck;\n      if (!inString && token === ')') {\n        stack.push(token);\n        count[token] += 1;\n        if (count['('] === count[token]) {\n          // finished\n          const expression = stack.join('');\n          const argumentCount = util.getArgumentsCount(expression);\n          if (argumentCount >= this.argumentCheck.unindentOn) this.shouldBeIndent = false;\n          this.argumentCheck = false;\n        }\n        return;\n      }\n      stack.push(token);\n      if (inString === token) this.argumentCheck.inString = false;\n      else if (!inString && (token === '\"' || token === \"'\")) this.argumentCheck.inString = token;\n      if (token === '(' && !inString) count[token] += 1;\n    }\n\n    if (_.includes(tokenStruct.scopes, 'punctuation.definition.comment.end.blade')) {\n      this.isInsideCommentBlock = false;\n    }\n    if (token === '{{--' || token.includes('{{--')) {\n      this.isInsideCommentBlock = true;\n    }\n\n    if (token === '--}}' || token.includes('--}}')) {\n      this.isInsideCommentBlock = false;\n    }\n\n    if (!_.includes(tokenStruct.scopes, 'keyword.blade')) {\n      return;\n    }\n\n    if (this.isInsideCommentBlock) {\n      return;\n    }\n\n    this.processKeyword(token.toLowerCase());\n    if (_.includes(Object.keys(optionalStartWithoutEndTokens), token.toLowerCase())) {\n      this.argumentCheck = {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        unindentOn: optionalStartWithoutEndTokens[token.toLowerCase()],\n        stack: [],\n        inString: false,\n        count: { '(': 0, ')': 0 },\n      };\n    }\n  }\n\n  processTokenizeResult(tokenizeLineResult: any, originalLine: any) {\n    if (this.shouldBeIndent) {\n      this.incrementIndentLevel();\n      this.shouldBeIndent = false;\n    }\n\n    if (hasStartAndEndToken(tokenizeLineResult, originalLine)) {\n      this.insertFormattedLineToResult(originalLine);\n      return;\n    }\n\n    for (let j = 0; j < tokenizeLineResult.tokens.length; j += 1) {\n      const tokenStruct = tokenizeLineResult.tokens[j];\n\n      const token = originalLine.substring(tokenStruct.startIndex, tokenStruct.endIndex).trim();\n\n      this.processToken(tokenStruct, token);\n    }\n\n    this.insertFormattedLineToResult(originalLine);\n  }\n\n  insertFormattedLineToResult(originalLine: any) {\n    const originalLineWhitespaces = detectIndent(originalLine).amount;\n    const whitespaces = originalLineWhitespaces + this.indentSize * this.currentIndentLevel;\n    const formattedLine = this.indentCharacter.repeat(whitespaces < 0 ? 0 : whitespaces) + originalLine.trim();\n\n    // blankline\n    if (originalLine.length === 0) {\n      this.result.push(originalLine);\n    }\n\n    // formatted line\n    if (originalLine.length !== 0 && formattedLine.length > 0) {\n      this.result.push(formattedLine);\n    }\n\n    if (formattedLine !== originalLine) {\n      this.diffs.push({\n        original: originalLine,\n        formatted: formattedLine,\n      });\n    }\n  }\n\n  incrementIndentLevel(level = 1) {\n    this.currentIndentLevel += level;\n  }\n\n  decrementIndentLevel(level = 1) {\n    this.currentIndentLevel -= level;\n  }\n\n  formatExpressionInsideBladeDirective(\n    matchedExpression: string,\n    indent: detectIndent.Indent,\n    wrapLength: number | undefined = undefined,\n  ) {\n    const formatTarget = `func(${matchedExpression})`;\n    const formattedExpression = util.formatRawStringAsPhp(formatTarget, {\n      ...this.options,\n      printWidth: wrapLength ?? this.defaultPhpFormatOption.printWidth,\n    });\n\n    if (formattedExpression === formatTarget) {\n      return matchedExpression;\n    }\n\n    let inside = formattedExpression\n      .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n      .replace(/(?<!(['\"]).*)(?<=\\()[\\n\\s]+?(?=\\w)/gm, '')\n      .replace(/([^]*)],[\\n\\s]*?\\)$/gm, (match: string, p1: string) => `${p1}]\\n)`)\n      .replace(/,[\\n\\s]*?\\)/gs, ')')\n      .replace(/,(\\s*?\\))$/gm, (match, p1) => p1)\n      .trim();\n\n    if (this.options.useTabs || false) {\n      inside = _.replace(inside, /(?<=^ *) {4}/gm, '\\t'.repeat(this.indentSize));\n    }\n\n    inside = inside.replace(/func\\((.*)\\)/gis, (match: string, p1: string) => p1);\n    if (this.isInline(inside.trim())) {\n      inside = inside.trim();\n    }\n\n    return this.indentRawPhpBlock(indent, inside);\n  }\n\n  formatJS(jsCode: string): string {\n    let code: string = jsCode;\n    const tempVarStore: any = {\n      js: [],\n      entangle: [],\n    };\n    Object.keys(tempVarStore).forEach((directive) => {\n      code = code.replace(\n        new RegExp(`@${directive}\\\\((?:[^)(]+|\\\\((?:[^)(]+|\\\\([^)(]*\\\\))*\\\\))*\\\\)`, 'gs'),\n        (m: any) => {\n          const index = tempVarStore[directive].push(m) - 1;\n          return this.getPlaceholder(directive, index, m.length);\n        },\n      );\n    });\n    code = beautify.js_beautify(code, { brace_style: 'preserve-inline' });\n\n    Object.keys(tempVarStore).forEach((directive) => {\n      code = code.replace(\n        new RegExp(this.getPlaceholder(directive, '_*(\\\\d+)'), 'gms'),\n        (_match: any, p1: any) => tempVarStore[directive][p1],\n      );\n    });\n\n    return code;\n  }\n}\n", "function splitByLines(content: string): Array<string> {\n  return content.split('\\n');\n}\n\nfunction isCommentedLine(line: string): boolean {\n  return line.trim().startsWith('*');\n}\n\nfunction isMultiline(lines: Array<string>): boolean {\n  return lines.length > 1;\n}\n\nfunction addPrefixToLine(line: string): string {\n  const prefix = ' ';\n\n  return `${prefix}${line}`;\n}\n\n/**\n * Formats php comment\n *\n * @param comment\n * @returns string\n */\nexport function formatPhpComment(comment: string): string {\n  const lines = splitByLines(comment);\n\n  if (!isMultiline(lines)) {\n    return comment;\n  }\n\n  let nonCommentLineExists = false;\n\n  const mapped = lines.map((line: string, row: number) => {\n    if (row === 0) {\n      return line;\n    }\n\n    if (nonCommentLineExists) {\n      return line;\n    }\n\n    if (!isCommentedLine(line)) {\n      nonCommentLineExists = true;\n      return line;\n    }\n\n    const trimmedLine = line.trim();\n\n    return addPrefixToLine(trimmedLine);\n  });\n\n  return mapped.join('\\n');\n}\n\nexport default {\n  formatPhpComment,\n};\n", "const constants = {\n  defaultPrintWidth: 120,\n};\n\nexport default constants;\n", "import _ from 'lodash';\n\nexport const directivePrefix = '@';\n\nexport const indentStartTokens = [\n  '@alert',\n  '@pushonce',\n  '@push',\n  '@slot',\n  '@switch',\n  '@unless',\n  '@verbatim',\n  '@prependonce',\n  '@prepend',\n  '@once',\n  '@error',\n  '@empty',\n  '@guest',\n  '@isset',\n  '@permission',\n  '@permissions',\n  '@canany',\n  '@cannot',\n  '@can',\n  '@role',\n  '@hasrole',\n  '@hasanyrole',\n  '@hasallroles',\n  '@unlessrole',\n  '@hasexactroles',\n  '@if',\n  '@production',\n  '@env',\n  '@while',\n  '@auth',\n  '@forelse',\n  '@for',\n  '@foreach',\n  '@php',\n  '@component',\n  '@section',\n  '@customdirective',\n];\n\nexport const indentStartTokensWithoutPrefix = _.map(indentStartTokens, (token) => token.substring(1));\n\nexport const indentEndTokens = [\n  '@endalert',\n  '@endpushonce',\n  '@endpush',\n  '@endslot',\n  '@endswitch',\n  '@endunless',\n  '@endverbatim',\n  '@show',\n  '@stop',\n  '@endprependonce',\n  '@endprepend',\n  '@endonce',\n  '@enderror',\n  '@append',\n  '@overwrite',\n  '@endempty',\n  '@endguest',\n  '@endisset',\n  '@endpermission',\n  '@endpermissions',\n  '@endcanany',\n  '@endcannot',\n  '@endcan',\n  '@endrole',\n  '@endhasrole',\n  '@endhasanyrole',\n  '@endhasallroles',\n  '@endunlessrole',\n  '@endhasexactroles',\n  '@endif',\n  '@endproduction',\n  '@endenv',\n  '@endwhile',\n  '@endauth',\n  '@endforelse',\n  '@endforeach',\n  '@endfor',\n  '@endphp',\n  '@endcomponent',\n  '@endsection',\n  '@endcustomdirective',\n];\n\nexport const indentElseTokens = [\n  '@elseenv',\n  '@elseif',\n  '@elsecanany',\n  '@elsecannot',\n  '@elsecan',\n  '@else',\n  '@elsecustomdirective',\n];\n\n// Directives which do not need an end token if a parameter is present\nexport const optionalStartWithoutEndTokens = {\n  '@section': 2,\n  '@push': 2,\n  '@prepend': 2,\n  '@slot': 2,\n};\n\nexport const tokenForIndentStartOrElseTokens = ['@forelse', '@if'];\n\nexport const indentStartOrElseTokens = ['@empty'];\n\nexport const indentStartAndEndTokens = ['@default'];\n\nexport const phpKeywordStartTokens = ['@forelse', '@if', '@for', '@foreach', '@while', '@sectionmissing', '@case'];\n\nexport const phpKeywordEndTokens = ['@endforelse', '@endif', '@endforeach', '@endfor', '@endwhile', '@break'];\n\nexport const inlinePhpDirectives = ['@button', '@class', '@include', '@disabled', '@checked', '@json'];\n\nexport const inlineFunctionTokens = [\n  '@set',\n  '@json',\n  '@selected',\n  '@checked',\n  '@disabled',\n  '@php',\n  '@include',\n  '@includeif',\n  '@includewhen',\n  '@includeunless',\n  '@includefirst',\n  '@button',\n  '@class',\n  '@props',\n  '@aware',\n];\n\nexport const conditionalTokens = [\n  '@if',\n  '@while',\n  '@case',\n  '@isset',\n  '@empty',\n  '@elseif',\n  '@component',\n  '@hassection',\n  '@unless',\n];\n\nexport const unbalancedStartTokens = ['@hassection'];\n\nexport const cssAtRuleTokens = [\n  '@charset',\n  '@color-profile',\n  '@counter-style',\n  '@font-face',\n  '@font-feature-values',\n  '@import',\n  '@keyframes',\n  '@media',\n  '@namespace',\n  '@page',\n  '@property',\n  '@supports',\n];\n\nexport function hasStartAndEndToken(tokenizeLineResult: any, originalLine: any) {\n  return (\n    _.filter(tokenizeLineResult.tokens, (tokenStruct: any) => {\n      const token = originalLine.substring(tokenStruct.startIndex, tokenStruct.endIndex).trim();\n\n      return _.includes(indentStartTokens, token) || _.includes(indentEndTokens, token);\n    }).length >= 2\n  );\n}\n", "// eslint-disable-next-line import/prefer-default-export\nexport const nestedParenthesisRegex = `\\\\(((?:[^)(]+|\\\\((?:[^)(]+|\\\\((?:[^)(]+|\\\\((?:[^)(]+|\\\\([^)(]*\\\\))*\\\\))*\\\\))*\\\\))*)\\\\)?`;\n", "import _ from 'lodash';\nimport { nestedParenthesisRegex } from './regex';\n\n/**\n * Adjust spaces in blade directives\n * @param content\n * @returns\n */\n// eslint-disable-next-line import/prefer-default-export\nexport function adjustSpaces(content: string): string {\n  const directivesRequiredSpace = ['@unless'];\n\n  return _.replace(\n    content,\n    new RegExp(`(?<!@)(${directivesRequiredSpace.join('|')})\\\\s*${nestedParenthesisRegex}`, 'gi'),\n    (_matched: string, p1: string, p2: string) => `${p1} (${p2})`,\n  );\n}\n", "/* eslint-disable max-len */\nimport _ from 'lodash';\nimport fs from 'fs';\nimport os from 'os';\nimport chalk from 'chalk';\nimport prettier from 'prettier/standalone.js';\n// @ts-ignore\n// eslint-disable-next-line\nimport phpPlugin from '@prettier/plugin-php/standalone.js';\nimport detectIndent from 'detect-indent';\nimport { indentStartTokens, phpKeywordStartTokens, phpKeywordEndTokens } from './indent';\nimport { nestedParenthesisRegex } from './regex';\nimport { EndOfLine } from './runtimeConfig';\n\nexport const optional = (obj: any) => {\n  const chain = {\n    get() {\n      return null;\n    },\n  };\n\n  if (_.isUndefined(obj) || _.isNull(obj)) {\n    return chain;\n  }\n\n  return obj;\n};\n\nexport async function readFile(path: any) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (error: any, data: any) => (error ? reject(error) : resolve(data)));\n  });\n}\n\nexport function splitByLines(content: any) {\n  if (!content) {\n    return '';\n  }\n\n  return content.split(/\\r\\n|\\n|\\r/);\n}\n\nexport type FormatPhpOption = {\n  noPhpSyntaxCheck?: boolean;\n  printWidth?: number;\n  trailingCommaPHP?: boolean;\n  phpVersion?: string;\n  noSingleQuote?: boolean;\n};\n\nexport const printWidthForInline = 1000;\n\nconst defaultFormatPhpOption = {\n  noPhpSyntaxCheck: false,\n  printWidth: printWidthForInline,\n  trailingCommaPHP: true,\n  phpVersion: '8.1',\n  noSingleQuote: false,\n};\n\nexport function formatStringAsPhp(content: any, params: FormatPhpOption = {}) {\n  const options = {\n    ...defaultFormatPhpOption,\n    ...params,\n  };\n\n  try {\n    return prettier.format(content.replace(/\\n$/, ''), {\n      parser: 'php',\n      printWidth: 1000,\n      singleQuote: !options.noSingleQuote,\n      // @ts-ignore\n      phpVersion: options.phpVersion,\n      trailingCommaPHP: options.trailingCommaPHP,\n      plugins: [phpPlugin],\n    });\n  } catch (error) {\n    if (options.noPhpSyntaxCheck === false) {\n      throw error;\n    }\n    return content;\n  }\n}\n\nexport function formatRawStringAsPhp(content: string, params: FormatPhpOption = {}) {\n  const options = {\n    ...defaultFormatPhpOption,\n    ...params,\n  };\n\n  try {\n    return prettier\n      .format(`<?php echo ${content} ?>`, {\n        parser: 'php',\n        printWidth: options.printWidth,\n        singleQuote: !options.noSingleQuote,\n        // @ts-ignore\n        phpVersion: options.phpVersion,\n        trailingCommaPHP: options.trailingCommaPHP,\n        plugins: [phpPlugin],\n      })\n      .replace(/<\\?php echo (.*)?\\?>/gs, (match: any, p1: any) => p1.trim().replace(/;\\s*$/, ''));\n  } catch (error) {\n    if (options.noPhpSyntaxCheck === false) {\n      throw error;\n    }\n\n    return content;\n  }\n}\n\nexport function getArgumentsCount(expression: any) {\n  const code = `<?php tmp_func${expression}; ?>`;\n  // @ts-ignore\n  // eslint-disable-next-line no-underscore-dangle\n  const { ast } = prettier.__debug.parse(code, {\n    parser: 'php',\n    phpVersion: '8.0',\n    plugins: [phpPlugin],\n  });\n  try {\n    return ast.children[0].expression.arguments.length || 0;\n  } catch (e) {\n    return 0;\n  }\n}\n\nexport function normalizeIndentLevel(length: any) {\n  if (length < 0) {\n    return 0;\n  }\n\n  return length;\n}\n\nexport function printDiffs(diffs: any) {\n  return Promise.all(\n    _.map(diffs, async (diff: any) => {\n      process.stdout.write(`path: ${chalk.bold(diff.path)}:${diff.line}\\n`);\n      process.stdout.write(chalk.red(`--${diff.original}\\n`));\n      process.stdout.write(chalk.green(`++${diff.formatted}\\n`));\n    }),\n  );\n}\n\nexport function generateDiff(path: any, originalLines: any, formattedLines: any) {\n  const diff = _.map(originalLines, (originalLine: any, index: any) => {\n    if (_.isEmpty(originalLine)) {\n      return null;\n    }\n\n    if (originalLine === formattedLines[index]) {\n      return null;\n    }\n\n    return {\n      path,\n      line: index + 1,\n      original: originalLine,\n      formatted: formattedLines[index],\n    };\n  });\n\n  return _.without(diff, null);\n}\n\nexport async function prettifyPhpContentWithUnescapedTags(content: string, options: FormatPhpOption) {\n  const directives = _.without(indentStartTokens, '@switch', '@forelse', '@php').join('|');\n\n  const directiveRegexes = new RegExp(\n    // eslint-disable-next-line max-len\n    `(?!\\\\/\\\\*.*?\\\\*\\\\/)(${directives})(\\\\s*?)${nestedParenthesisRegex}`,\n    'gmi',\n  );\n\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) =>\n      _.replace(res, directiveRegexes, (match: any, p1: any, p2: any, p3: any) =>\n        formatStringAsPhp(`<?php ${p1.substr('1')}${p2}(${p3}) ?>`, options)\n          .replace(\n            /<\\?php\\s(.*?)(\\s*?)\\((.*?)\\);*\\s\\?>\\n/gs,\n            (match2: any, j1: any, j2: any, j3: any) => `@${j1.trim()}${j2}(${j3.trim()})`,\n          )\n          .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n          .replace(/,\\)$/, ')')\n          .replace(/(?:\\n\\s*)* as(?= (?:&{0,1}\\$[\\w]+|list|\\[\\$[\\w]+))/g, ' as'),\n      ),\n    )\n    .then((res) => formatStringAsPhp(res, options));\n}\n\nexport async function prettifyPhpContentWithEscapedTags(content: string, options: FormatPhpOption) {\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) => _.replace(res, /{!!/g, '<?php /*escaped*/'))\n    .then((res) => _.replace(res, /!!}/g, '/*escaped*/ ?>\\n'))\n    .then((res) => formatStringAsPhp(res, options))\n    .then((res) => _.replace(res, /<\\?php\\s\\/\\*escaped\\*\\//g, '{!! '))\n    .then((res) => _.replace(res, /\\/\\*escaped\\*\\/\\s\\?>\\n/g, ' !!}'));\n}\n\nexport async function removeSemicolon(content: any) {\n  return new Promise((resolve) => {\n    resolve(content);\n  })\n    .then((res: any) => _.replace(res, /;[\\n\\s]*!!\\}/g, ' !!}'))\n    .then((res) => _.replace(res, /;[\\s\\n]*!!}/g, ' !!}'))\n    .then((res) => _.replace(res, /;[\\n\\s]*}}/g, ' }}'))\n    .then((res) => _.replace(res, /; }}/g, ' }}'))\n    .then((res) => _.replace(res, /; --}}/g, ' --}}'));\n}\n\nexport async function formatAsPhp(content: string, options: FormatPhpOption) {\n  return prettifyPhpContentWithUnescapedTags(content, options);\n}\n\nexport async function preserveOriginalPhpTagInHtml(content: any) {\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) => _.replace(res, /<\\?php/g, '/** phptag_start **/'))\n    .then((res) => _.replace(res, /\\?>/g, '/** end_phptag **/'));\n}\n\nexport function revertOriginalPhpTagInHtml(content: any) {\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) => _.replace(res, /\\/\\*\\*[\\s\\n]*?phptag_start[\\s\\n]*?\\*\\*\\//gs, '<?php'))\n    .then((res) => _.replace(res, /\\/\\*\\*[\\s\\n]*?end_phptag[\\s\\n]*?\\*\\*\\/[\\s];\\n/g, '?>;'))\n    .then((res) => _.replace(res, /\\/\\*\\*[\\s\\n]*?end_phptag[\\s\\n]*?\\*\\*\\//g, '?>'));\n}\n\nexport function indent(content: any, level: any, options: any) {\n  const lines = content.split('\\n');\n  return _.map(lines, (line: any, index: any) => {\n    if (!line.match(/\\w/)) {\n      return line;\n    }\n\n    const ignoreFirstLine = optional(options).ignoreFirstLine || false;\n\n    if (ignoreFirstLine && index === 0) {\n      return line;\n    }\n\n    const originalLineWhitespaces = detectIndent(line).amount;\n    const indentChar = optional(options).useTabs ? '\\t' : ' ';\n    const indentSize = optional(options).indentSize || 4;\n    const whitespaces = originalLineWhitespaces + indentSize * level;\n\n    if (whitespaces < 0) {\n      return line;\n    }\n\n    return indentChar.repeat(whitespaces) + line.trimLeft();\n  }).join('\\n');\n}\n\nexport function unindent(directive: any, content: any, level: any, options: any) {\n  const lines = content.split('\\n');\n  return _.map(lines, (line: any) => {\n    if (!line.match(/\\w/)) {\n      return line;\n    }\n\n    const originalLineWhitespaces = detectIndent(line).amount;\n    const indentChar = optional(options).useTabs ? '\\t' : ' ';\n    const indentSize = optional(options).indentSize || 4;\n    const whitespaces = originalLineWhitespaces - indentSize * level;\n\n    if (whitespaces < 0) {\n      return line;\n    }\n\n    return indentChar.repeat(whitespaces) + line.trimLeft();\n  }).join('\\n');\n}\n\nexport function preserveDirectives(content: any) {\n  const startTokens = _.without(phpKeywordStartTokens, '@case');\n  const endTokens = _.without(phpKeywordEndTokens, '@break');\n\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) => {\n      const regex = new RegExp(`(${startTokens.join('|')})([\\\\s]*?)${nestedParenthesisRegex}`, 'gis');\n      return _.replace(\n        res,\n        regex,\n        (match: any, p1: any, p2: any, p3: any) => `<beautifyTag start=\"${p1}${p2}\" exp=\"^^^${_.escape(p3)}^^^\">`,\n      );\n    })\n    .then((res: any) => {\n      const regex = new RegExp(`(?!end=\".*)(${endTokens.join('|')})(?!.*\")`, 'gi');\n      return _.replace(res, regex, (match: any, p1: any) => `</beautifyTag end=\"${p1}\">`);\n    });\n}\n\nexport function preserveDirectivesInTag(content: any) {\n  return new Promise((resolve) => {\n    const regex = new RegExp(\n      `(<[^>]*?)(${phpKeywordStartTokens.join('|')})([\\\\s]*?)${nestedParenthesisRegex}(.*?)(${phpKeywordEndTokens.join(\n        '|',\n      )})([^>]*?>)`,\n      'gis',\n    );\n    resolve(\n      _.replace(\n        content,\n        regex,\n        (match: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any) =>\n          `${p1}|-- start=\"${p2}${p3}\" exp=\"^^^${p4}^^^\" body=\"^^^${_.escape(_.trim(p5))}^^^\" end=\"${p6}\" --|${p7}`,\n      ),\n    );\n  });\n}\n\nexport function revertDirectives(content: any) {\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) =>\n      _.replace(\n        res,\n        /<beautifyTag.*?start=\"(.*?)\".*?exp=\".*?\\^\\^\\^(.*?)\\^\\^\\^.*?\"\\s*>/gs,\n        (match: any, p1: any, p2: any) => `${p1}(${_.unescape(p2)})`,\n      ),\n    )\n    .then((res) => _.replace(res, /<\\/beautifyTag.*?end=\"(.*?)\"\\s*>/gs, (match: any, p1: any) => `${p1}`));\n}\n\nexport function revertDirectivesInTag(content: any) {\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) =>\n      _.replace(\n        res,\n        /\\|--.*?start=\"(.*?)\".*?exp=\".*?\\^\\^\\^(.*?)\\^\\^\\^.*?\"(.*?)body=\".*?\\^\\^\\^(.*?)\\^\\^\\^.*?\".*?end=\"(.*?)\".*?--\\|/gs,\n        (match: any, p1: any, p2: any, p3: any, p4: any, p5: any) =>\n          `${_.trimStart(p1)}(${p2}) ${_.unescape(p4)} ${p5}`,\n      ),\n    )\n    .then((res) => _.replace(res, /\\/-- end=\"(.*?)\"--\\//gs, (match: any, p1: any) => `${p1}`));\n}\nexport function printDescription() {\n  const returnLine = '\\n\\n';\n  process.stdout.write(returnLine);\n  process.stdout.write(chalk.bold.green('Fixed: F\\n'));\n  process.stdout.write(chalk.bold.red('Errors: E\\n'));\n  process.stdout.write(chalk.bold('Not Changed: ') + chalk.bold.green('.\\n'));\n}\n\nconst escapeTags = [\n  '/\\\\*\\\\* phptag_start \\\\*\\\\*/',\n  '/\\\\*\\\\* end_phptag \\\\*\\\\*/',\n  '/\\\\*escaped\\\\*/',\n  '__BLADE__;',\n  '/\\\\* blade_comment_start \\\\*/',\n  '/\\\\* blade_comment_end \\\\*/',\n  '/\\\\*\\\\*\\\\*script_placeholder\\\\*\\\\*\\\\*/',\n  'blade___non_native_scripts_',\n  'blade___scripts_',\n  'blade___html_tags_',\n  'beautifyTag',\n  '@customdirective',\n  '@elsecustomdirective',\n  '@endcustomdirective',\n];\n\nexport function checkResult(formatted: any) {\n  if (new RegExp(escapeTags.join('|')).test(formatted)) {\n    throw new Error(\n      [\n        \"Can't format blade: something goes wrong.\",\n        // eslint-disable-next-line max-len\n        'Please check if template is too complicated or not. Or simplify template might solves issue.',\n      ].join('\\n'),\n    );\n  }\n\n  return formatted;\n}\n\nexport function escapeReplacementString(string: string) {\n  return string.replace(/\\$/g, '$$$$');\n}\n\nexport function debugLog(...content: any) {\n  _.each(content, (item) => {\n    console.log('------------------- content start -------------------');\n    console.log(item);\n    console.log('------------------- content end   -------------------');\n  });\n\n  return content;\n}\n\nexport function getEndOfLine(endOfLine?: EndOfLine): string {\n  switch (endOfLine) {\n    case 'LF':\n      return '\\n';\n    case 'CRLF':\n      return '\\r\\n';\n    default:\n      return os.EOL;\n  }\n}\n", "import { promises as fs } from 'fs';\nimport _ from 'lodash';\nimport * as vscodeOniguruma from 'vscode-oniguruma';\nimport path from 'path';\nimport { readFile } from './util';\n\nexport class VscodeTextmate {\n  oniguruma: any;\n\n  registry: any;\n\n  vsctm: any;\n\n  initCalled: any;\n\n  constructor(vsctm: any, oniguruma: any) {\n    // @ts-ignore\n    return (async () => {\n      this.vsctm = vsctm.default ?? vsctm;\n      // @ts-ignore\n      this.oniguruma = oniguruma || vscodeOniguruma?.default || vscodeOniguruma;\n      await this.loadWasm();\n      return this;\n    })();\n  }\n\n  async loadWasm() {\n    const wasm = await fs.readFile(\n      // @ts-ignore\n      // eslint-disable-next-line\n      require.resolve('vscode-oniguruma/release/onig.wasm'),\n    );\n    await this.oniguruma?.loadWASM(wasm.buffer);\n\n    if (!this.initCalled) {\n      try {\n        this.oniguruma.loadWASM(wasm.buffer);\n      } catch (error) {\n        this.initCalled = true;\n      }\n\n      this.initCalled = true;\n    }\n  }\n\n  createRegistry() {\n    this.registry = new this.vsctm.Registry({\n      loadGrammar: (scopeName: any) => {\n        if (scopeName === 'text.html.php.blade') {\n          // https://github.com/onecentlin/\n          // laravel-blade-snippets-vscode/\n          // blob/master/syntaxes/blade.tmLanguage.json\n          return readFile(path.resolve(__dirname, `../syntaxes/blade.tmLanguage.json`)).then((content: any) =>\n            this.vsctm.parseRawGrammar(content.toString(), './blade.tmLanguage.json'),\n          );\n        }\n        return null;\n      },\n      onigLib: Promise.resolve({\n        createOnigScanner: (sources: any) => new this.oniguruma.OnigScanner(sources),\n        createOnigString: (str: any) => new this.oniguruma.OnigString(str),\n      }),\n    });\n\n    return this.registry;\n  }\n\n  tokenizeLines(splitedLines: any, grammar: any) {\n    return _.map(splitedLines, (line: any) => grammar.tokenizeLine(line, this.vsctm?.INITIAL));\n  }\n}\n\nexport default {\n  VscodeTextmate,\n};\n", "import Ajv, { JSONSchemaType } from 'ajv';\nimport findConfig from 'find-config';\nimport fs from 'fs';\nimport path from 'path';\n\nconst ajv = new Ajv();\n\nexport type WrapAttributes =\n  | 'auto'\n  | 'force'\n  | 'force-aligned'\n  | 'force-expand-multiline'\n  | 'aligned-multiple'\n  | 'preserve'\n  | 'preserve-aligned';\n\nexport type SortHtmlAttributes = 'none' | 'alphabetical' | 'code-guide' | 'idiomatic' | 'vuejs' | 'custom';\n\nexport type EndOfLine = 'LF' | 'CRLF';\n\nexport interface RuntimeConfig {\n  indentSize?: number;\n  wrapLineLength?: number;\n  wrapAttributes?: WrapAttributes;\n  wrapAttributesMinAttrs?: number;\n  indentInnerHtml?: boolean;\n  endWithNewline?: boolean;\n  endOfLine?: EndOfLine;\n  useTabs?: boolean;\n  sortTailwindcssClasses?: boolean;\n  tailwindcssConfigPath?: string;\n  sortHtmlAttributes?: SortHtmlAttributes;\n  customHtmlAttributesOrder?: string[] | string;\n  noMultipleEmptyLines?: boolean;\n  noPhpSyntaxCheck?: boolean;\n  noSingleQuote?: boolean;\n  extraLiners?: string[];\n}\n\nconst defaultConfigNames = ['.bladeformatterrc.json', '.bladeformatterrc'];\n\nexport function findRuntimeConfig(filePath: string): string | null {\n  for (let i = 0; i < defaultConfigNames.length; i += 1) {\n    const result: string | null = findConfig(defaultConfigNames[i], {\n      cwd: path.dirname(filePath),\n      home: false,\n    });\n\n    if (result) {\n      return result;\n    }\n  }\n\n  return null;\n}\n\nexport async function readRuntimeConfig(filePath: string | null): Promise<RuntimeConfig | undefined> {\n  if (filePath === null) {\n    return undefined;\n  }\n\n  const options = JSON.parse((await fs.promises.readFile(filePath)).toString());\n\n  const schema: JSONSchemaType<RuntimeConfig> = {\n    type: 'object',\n    properties: {\n      indentSize: { type: 'integer', nullable: true },\n      wrapLineLength: { type: 'integer', nullable: true },\n      wrapAttributes: {\n        type: 'string',\n        enum: [\n          'auto',\n          'force',\n          'force-aligned',\n          'force-expand-multiline',\n          'aligned-multiple',\n          'preserve',\n          'preserve-aligned',\n        ],\n        nullable: true,\n      },\n      wrapAttributesMinAttrs: { type: 'integer', nullable: true, default: 2 },\n      indentInnerHtml: { type: 'boolean', nullable: true },\n      endWithNewline: { type: 'boolean', nullable: true },\n      endOfLine: { type: 'string', enum: ['LF', 'CRLF'], nullable: true },\n      useTabs: { type: 'boolean', nullable: true },\n      sortTailwindcssClasses: { type: 'boolean', nullable: true },\n      tailwindcssConfigPath: { type: 'string', nullable: true },\n      sortHtmlAttributes: {\n        type: 'string',\n        enum: ['none', 'alphabetical', 'code-guide', 'idiomatic', 'vuejs', 'custom'],\n        nullable: true,\n      },\n      customHtmlAttributesOrder: { type: 'array', nullable: true, items: { type: 'string' }, default: [] },\n      noMultipleEmptyLines: { type: 'boolean', nullable: true },\n      noPhpSyntaxCheck: { type: 'boolean', nullable: true },\n      noSingleQuote: { type: 'boolean', nullable: true },\n      extraLiners: { type: 'array', nullable: true, items: { type: 'string' }, default: ['head', 'body', '/html'] },\n    },\n    additionalProperties: true,\n  };\n  const validate = ajv.compile(schema);\n\n  if (!validate(options)) {\n    throw validate;\n  }\n\n  return options;\n}\n"],
  "mappings": "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",
  "names": ["ignore", "chalk", "findConfig", "fs", "glob", "nodepath", "process", "nodeutil", "FormatError", "sortClasses", "Aigle", "detectIndent", "sortAttributes", "beautify", "_", "vscodeTmModule", "xregexp", "splitByLines", "content", "isCommentedLine", "line", "isMultiline", "lines", "addPrefixToLine", "formatPhpComment", "comment", "nonCommentLineExists", "row", "trimmedLine", "constants", "constants_default", "_", "directivePrefix", "indentStartTokens", "indentStartTokensWithoutPrefix", "token", "indentEndTokens", "indentElseTokens", "optionalStartWithoutEndTokens", "tokenForIndentStartOrElseTokens", "indentStartOrElseTokens", "indentStartAndEndTokens", "phpKeywordStartTokens", "phpKeywordEndTokens", "inlinePhpDirectives", "inlineFunctionTokens", "conditionalTokens", "unbalancedStartTokens", "cssAtRuleTokens", "hasStartAndEndToken", "tokenizeLineResult", "originalLine", "tokenStruct", "nestedParenthesisRegex", "_", "adjustSpaces", "content", "directivesRequiredSpace", "_", "nestedParenthesisRegex", "_matched", "p1", "p2", "_", "fs", "os", "chalk", "prettier", "phpPlugin", "detectIndent", "optional", "obj", "chain", "_", "readFile", "path", "resolve", "reject", "fs", "error", "data", "splitByLines", "content", "printWidthForInline", "defaultFormatPhpOption", "formatStringAsPhp", "params", "options", "prettier", "phpPlugin", "formatRawStringAsPhp", "match", "p1", "getArgumentsCount", "expression", "code", "ast", "printDiffs", "diffs", "_", "diff", "chalk", "generateDiff", "path", "originalLines", "formattedLines", "originalLine", "index", "prettifyPhpContentWithUnescapedTags", "content", "options", "directives", "indentStartTokens", "directiveRegexes", "nestedParenthesisRegex", "resolve", "res", "match", "p1", "p2", "p3", "formatStringAsPhp", "match2", "j1", "j2", "j3", "formatAsPhp", "content", "options", "prettifyPhpContentWithUnescapedTags", "preserveDirectives", "content", "startTokens", "_", "phpKeywordStartTokens", "endTokens", "phpKeywordEndTokens", "resolve", "res", "regex", "nestedParenthesisRegex", "match", "p1", "p2", "p3", "revertDirectives", "content", "resolve", "res", "_", "match", "p1", "p2", "escapeTags", "checkResult", "formatted", "escapeReplacementString", "string", "getEndOfLine", "endOfLine", "os", "fs", "_", "vscodeOniguruma", "path", "VscodeTextmate", "vsctm", "oniguruma", "_a", "vscodeOniguruma", "wasm", "fs", "__require", "scopeName", "readFile", "path", "content", "sources", "str", "splitedLines", "grammar", "_", "line", "Formatter", "options", "constants_default", "optional", "vscodeTmModule", "getEndOfLine", "content", "resolve", "target", "formatAsPhp", "adjustSpaces", "formattedResult", "checkResult", "data", "promise", "preserveDirectives", "preserved", "beautify", "revertDirectives", "_", "_match", "p1", "p2", "sortClasses", "match", "contentUnformatted", "negativeLookAhead", "indentStartTokens", "indentEndTokens", "indentElseTokens", "inlineNegativeLookAhead", "inlineFunctionTokens", "phpKeywordStartTokens", "unbalancedStartTokens", "cssAtRuleTokens", "inlineRegex", "nestedParenthesisRegex", "regex", "formatted", "p3", "p4", "p5", "p6", "p7", "result", "beginStr", "elseStr", "directivePrefix", "indentStartTokensWithoutPrefix", "replaced", "targetTokens", "inlineFunctionDirectives", "inlineFunctionRegex", "endTokens", "matched", "formatRawStringAsPhp", "printWidthForInline", "indentStartOrElseTokens", "_matched", "inside", "customStartRegex", "startRegex", "elseRegex", "endRegex", "endStr", "unbalancedConditions", "unbalancedEchos", "directive", "directives", "x", "recursivelyMatched", "xregexp", "escapeReplacementString", "innerRegex", "conditionalTokens", "_a", "strategy", "regexes", "sortAttributes", "customRegexes", "value", "length", "index", "brace", "replace", "gap", "attribute", "template", "rawBlock", "placeholder", "matchedLine", "indent", "detectIndent", "formatStringAsPhp", "_q1", "q2", "indented", "indentLevel", "prefix", "prefixForEnd", "lines", "line", "prefixSpaces", "withoutCommentLine", "group1", "group2", "Aigle", "formattedAsHtml", "res", "formatPhpComment", "bladeBrace", "inlinePhpDirectives", "token", "match2", "wrapLength", "inlinedComment", "script", "useTabs", "_m", "openingTag", "restofTag", "firstLine", "offsettedLines", "beautifyOpts", "splitedLines", "splitByLines", "vsctmModule", "VscodeTextmate", "grammar", "tokenizedLines", "err", "i", "originalLine", "tokenizeLineResult", "phpKeywordEndTokens", "indentStartAndEndTokens", "tokenForIndentStartOrElseTokens", "tokenStruct", "count", "inString", "stack", "expression", "getArgumentsCount", "optionalStartWithoutEndTokens", "hasStartAndEndToken", "j", "whitespaces", "formattedLine", "level", "matchedExpression", "formatTarget", "formattedExpression", "jsCode", "code", "tempVarStore", "m", "Ajv", "findConfig", "fs", "path", "ajv", "defaultConfigNames", "findRuntimeConfig", "filePath", "i", "result", "readRuntimeConfig", "options", "schema", "validate", "BladeFormatter", "options", "paths", "_a", "content", "opts", "target", "nodepath", "process", "Formatter", "err", "FormatError", "filepath", "fs", "filePath", "configFilename", "configFilePath", "worakingDir", "findConfig", "workingDir", "_b", "configFile", "findRuntimeConfig", "readRuntimeConfig", "obj", "src", "error", "chalk", "nodeutil", "path", "resolve", "reject", "glob", "matches", "REGEX_FILES_NOT_IN_CURRENT_DIR", "filesOutsideTargetDir", "filesUnderTargetDir", "filteredFiles", "ignore", "readFile", "data", "formatted", "originalContent", "originalLines", "splitByLines", "formattedLines", "diff", "generateDiff", "returnLine", "printDiffs"]
}
