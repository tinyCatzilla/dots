"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeJsonata = exports.formatJsonata = void 0;
const prettierPlugin = __importStar(require("../plugin"));
const prettier = __importStar(require("prettier"));
const parser_1 = require("../plugin/parser");
/**
 * Re-formats JSONata expression string in an opinionated way on where to put line breaks and whitespace.
 */
function formatJsonata(expression, options) {
    return __awaiter(this, void 0, void 0, function* () {
        clearPrettierCacheIfAvailable();
        return yield prettier.format(expression, Object.assign({ parser: prettierPlugin.AST_PARSER_NAME, plugins: [prettierPlugin], printWidth: 150, tabWidth: 2, useTabs: false }, options));
    });
}
exports.formatJsonata = formatJsonata;
/**
 * Serializes JSONata AST to a formatted string representing JSONata expression.
 */
function serializeJsonata(jsonataAST, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const pluginBoundToAST = buildPluginBoundToAST(jsonataAST);
        clearPrettierCacheIfAvailable();
        return yield prettier.format("ignore text input", Object.assign({ parser: prettierPlugin.AST_PARSER_NAME, plugins: [pluginBoundToAST], printWidth: 150, tabWidth: 2, useTabs: false }, options));
    });
}
exports.serializeJsonata = serializeJsonata;
/**
 * Prettier does not allow to skip the "parse" step completely, and jump straight to converting AST to a formatted string,
 * but there are use-cases when we need to format only a part of the full AST tree without access to the original string representation of it.
 *
 * To work around it, we are adding this dynamic plugin generator, which returns its AST argument as the result of `parse` callback
 * without any parsing, ignoring text input.
 */
const buildPluginBoundToAST = (jsonataAST) => {
    return Object.assign(Object.assign({}, prettierPlugin), { parsers: {
            [prettierPlugin.AST_PARSER_NAME]: {
                astFormat: prettierPlugin.AST_FORMAT_NAME,
                parse: () => jsonataAST,
                locStart: parser_1.locStart,
                locEnd: parser_1.locEnd,
            },
        } });
};
/**
 * Allows to clear prettier cache when executed in nodejs (mostly in unit tests)
 */
function clearPrettierCacheIfAvailable() {
    // Because the issue with cache only happens in unit tests executed in nodejs,
    // and the `clearConfigCache` is only exposed by Prettier in nodejs (it's not present in the browser version of it),
    // we have to check for its presense before running the method.
    if ("clearConfigCache" in prettier) {
        prettier.clearConfigCache();
    }
}
