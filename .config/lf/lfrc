# Basic Settings
set hidden true
set ignorecase true
set icons true

# Sort downloads by time, and everything else naturally
cmd on-cd &{{
    case "$PWD" in
        ~/Downloads)
            lf -remote "send $id set user_prev_sortby $lf_sortby"
            lf -remote "send $id set sortby time"
            lf -remote "send $id set reverse true"
            lf -remote "send $id set dirfirst false"

            lf -remote "send $id echomsg changed sort to time"
            ;;
        *)
            # restore sorting on directory exit
            if [[ "$lf_user_prev_sortby" != "" ]]; then
                lf -remote "send $id set sortby $lf_user_prev_sortby"
                lf -remote "send $id set reverse false"
                lf -remote "send $id set dirfirst true"

                lf -remote "send $id echomsg restored sort to $lf_user_prev_sortby"
                lf -remote "send $id set user_prev_sortby ''"
            fi
            ;;
    esac
}}

# run on startup too
on-cd

# Custom Functions

cmd open ${{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd setwallpaper ${{
    cp "$f" ~/.config/wall.jpg
    xwallpaper --zoom "$f"
    betterlockscreen -u "$f" --fx
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd remove ${{
    if [ -z $fs ]; then
        rm -fr $f
    else
        IFS=':'; echo $fs | tr " " "\n"
        echo 'delete? [y/n]'
        read ans

        [ $ans = 'y' ] && (echo 'deleting files...' && rm -fr $fs) || (echo 'cancelled...')
    fi
}}

cmd broot ${{
  f=$(mktemp)
  res="$(broot -h --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# Bindings
map Km maps  # List normal mode mappings
map Kc cmaps  # List command mode mappings
map d
map m

# Basic Functions
map . set hidden!
map dd delete
map dD push :remove
map p paste
map x cut
map y copy
map <enter> open
map R reload
map mf mkfile
map md mkdir
map bg setwallpaper
map C clear
map f broot

map az zip
map au unarchive

# Movement
map gd cd ~/Downloads
map gD cd ~/Desktop
map gp cd ~/pictures
map gc cd ~/.config
map gs cd ~/.local/bin
map gt cd ~/.local/share/Trash/files
map glf $nvim ~/.config/lf/lfrc
map gzs $nvim ~/.zshrc
map gnv $nvim ~/.config/nvim/lua/custom/plugins.lua

